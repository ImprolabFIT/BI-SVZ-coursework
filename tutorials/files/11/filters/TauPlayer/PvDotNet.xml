<?xml version="1.0"?>
<doc>
    <assembly>
        "PvDotNet"
    </assembly>
    <members>
        <member name="E:PvDotNet.PvSystem.OnDeviceFound">
            <summary>
Event OnDeviceFound. This event lets you control how devices are treated, once found.	
</summary>
            <remarks>
                <para>See delegate documentation for more information.</para>
            </remarks>
        </member>
        <member name="P:PvDotNet.PvSystem.SubnetBroadcastEnabled">
            <summary>Sets whether subnet broadcasts are used (or not) when detecting GigE Vision devices.</summary>
        </member>
        <member name="M:PvDotNet.PvSystem.GetDeviceInfo(System.UInt32)">
            <summary>Returns a handle to a device of the PvSystem.</summary>
            <remarks>
The GetDeviceCount and GetDeviceInfo methods of PvSystem are a shortcut
for users only interested in retrieving devices without having to handle the
interface to device topology.
</remarks>
            <param name="aIndex"> Zero-based index of the device info. Valid range is [0 .. GetDeviceCount - 1].</param>
            <returns>Handle to the requested PvDeviceInfo.</returns>
        </member>
        <member name="P:PvDotNet.PvSystem.DeviceCount">
            <summary>Returns number of device that can be enumerated from <see cref="T:PvDotNet.PvSystem" /> using GetDeviceInfo.</summary>
        </member>
        <member name="M:PvDotNet.PvSystem.GetInterface(System.UInt32)">
            <summary>
Get a <see cref="T:PvDotNet.PvInterface" />.
</summary>
            <remarks>
                <para>Interfaces are ordered in the <see cref="T:PvDotNet.PvSystem" /> array as provided by the OS.</para>
            </remarks>
            <param name="aIndex">The interface's index in the array; a number ranging from 0 to <see cref="P:PvDotNet.PvSystem.InterfaceCount" />-1.</param>
            <returns>A handle to a <see cref="T:PvDotNet.PvInterface" /> object, or NULL if the index is out of bounds.</returns>
        </member>
        <member name="P:PvDotNet.PvSystem.InterfaceCount">
            <summary>
Gets the number of interfaces detected on the system; the range for the <see cref="M:PvDotNet.PvSystem.GetInterface(System.UInt32)" /> method.
</summary>
        </member>
        <member name="P:PvDotNet.PvSystem.U3VSupportedVersion">
            <summary>Get the version of USB3 Vision spec supported by the SDK.</summary>
            <remarks>
The high 16 bits contain the major version and The low 16 bits the minor version.
</remarks>
        </member>
        <member name="P:PvDotNet.PvSystem.GEVSupportedVersion">
            <summary>Get the version of GigE Vision spec supported by the SDK.</summary>
            <remarks>
The high 16 bits contain the major version and The low 16 bits the minor version.
</remarks>
        </member>
        <member name="P:PvDotNet.PvSystem.DetectionTimeout">
            <summary>Time to search the system for devices.</summary>
            <remarks>
                <para>Time the #PvSystem::Find methods wait for responses from GigE Vision or Pleora Protocol
devices before returning.</para>
                <para>GigE Vision devices may wait up to 1 second before answering a discovery request and this
detection timeout allows enough time for all discovery answers to come back in.</para>
                <para>USB3 Vision devices detection is instant. You can set this timeout to its minimum supported
value if you are only interested in detecting USB3 Vision devices.</para>
                <para>Pleora Protocol and some GigE Vision devices answer as soon as the discovery request is received.
Experimenting with this timeout and discovery stability is a way improving discovery performance.
Another would be to stick with the safe, default delay and use the event sink callback to be
notified as soon as a device is discovered.</para>
            </remarks>
        </member>
        <member name="M:PvDotNet.PvSystem.FindDevice(System.String)">
            <summary>Finds devices until a specific device is found.</summary>
            <remarks>
Performs a standard find operation and keeps listening for answers
until a specific device is found.

More than one device can be found and added to the interfaces during this
find operation. Do not assume only the device of interest is present
in the system/interface data after this method returns.

If the device of interest is found, a handle to the device info in the interface
where the device was found is returned using the aDeviceInfo parameter.
</remarks>
            <param name="aDeviceToFind">String representing the device to find. Can be a MAC, IP or device name.</param>
            <returns>A Handle to the PvDeviceInfo object or null if the device is not found.</returns>
        </member>
        <member name="M:PvDotNet.PvSystem.Find">
            <summary>
Find all interfaces and GigE Vision, USB3 Vision and Pleora Protocol devices reachable from this system (the PC).
</summary>
            <remarks>
                <para>The <see cref="M:PvDotNet.PvSystem.Find" /> and <see cref="T:PvDotNet.PvInterface" />::Find methods search
for all GigE Vision, USB3 Vision and Pleora Protocol devices reachable from this system. 
The <see cref="T:PvDotNet.PvSystem" /> version searches using all interfaces on the system; the 
<see cref="T:PvDotNet.PvInterface" /> version, only one interface. The former works as if making multiple, 
simultaneous calls to the later, albeit concurrently.</para>
                <para>The methods are blocking and won't return for the duration
set using <see cref="P:PvDotNet.PvSystem.DetectionTimeout" />.</para>
            </remarks>
        </member>
        <member name="M:PvDotNet.PvSystem.Finalize">
            <summary>
Finalizer.
</summary>
        </member>
        <member name="M:PvDotNet.PvSystem.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="M:PvDotNet.PvSystem.#ctor">
            <summary>
Constructor.
</summary>
        </member>
        <member name="T:PvDotNet.PvSystem">
            <summary>
Find interfaces (network adapters and USB controlls) and devices (GigE Vision, USB3 Vision, Pleora Protocol) reachable from this PC.
</summary>
            <remarks>
                <para>PvSystem finds all interfaces (network adapters) and returns <see cref="T:PvDotNet.PvInterface" /> objects. <see cref="T:PvDotNet.PvInterface" /> finds all devices on a specific 
interface and returns <see cref="T:PvDotNet.PvDeviceInfo" /> objects. <see cref="T:PvDotNet.PvDeviceInfo" /> provides the information required to connect to 
a GigE Vision or USB3 Vision device.</para>
                <para>To connect to the GigE Vision device, see <see cref="T:PvDotNet.PvDevice" /> or <see cref="T:PvDotNet.PvDeviceGEV" />.</para>
                <para>To connect to the USB3 Vision device, see <see cref="T:PvDotNet.PvDevice" /> or <see cref="T:PvDotNet.PvDeviceU3V" />.</para>
                <para>To bring up a user interface that allows one to select a GigE Vision device, refer to PvDeviceFinderForm.</para>
            </remarks>
        </member>
        <member name="T:PvDotNet.OnDeviceFoundHandler">
            <summary>
PvSystem device found event delegate.
</summary>
            <param name="aInterface">Reference to the interface the device was found on.</param>
            <param name="aDeviceInfo">Reference to information about the device.</param>
            <param name="aIgnore">Output parameter: if set to true by the delegate handler, the device just found will be ignored/dropped.</param>
        </member>
        <member name="M:PvDotNet.PvGenParameterArrayCL.GetXMLID">
            <summary>
Returns the XML ID used to build the node map.
</summary>
            <returns>XML ID or an empty string if Build has not happened or failed.</returns>
        </member>
        <member name="M:PvDotNet.PvGenParameterArrayCL.GetDeviceID">
            <summary>
Returns the Device ID used to connect the port.
</summary>
            <returns>Device ID or an empty string if Connect has not happened or failed.</returns>
        </member>
        <member name="M:PvDotNet.PvGenParameterArrayCL.GetPortID">
            <summary>
Returns the Port ID used to connect the port.
</summary>
            <returns>Port ID or an empty string if Connect has not happened or failed.</returns>
        </member>
        <member name="M:PvDotNet.PvGenParameterArrayCL.GetSerialTimeout(System.UInt32@)">
            <summary>
Gets the serial timeout used by the CLProtocol library.
</summary>
            <param name="aTimeout">New timeout.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> if the PvGenParameterArrayCL is not connected. <see cref="M:PvDotNet.PvGenParameterArrayCL.Connect(System.String,System.String)" />.</description></item><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> if building the node map failed. Use <see cref="P:PvDotNet.PvResult.Description" /> for more information.</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvGenParameterArrayCL.SetSerialTimeout(System.UInt32)">
            <summary>
Sets the serial timeout used by the CLProtocol library.
</summary>
            <param name="aTimeout">New timeout.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> if the PvGenParameterArrayCL is not connected. <see cref="M:PvDotNet.PvGenParameterArrayCL.Connect(System.String,System.String)" />.</description></item><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> if building the node map failed. Use <see cref="P:PvDotNet.PvResult.Description" /> for more information.</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvGenParameterArrayCL.Build(System.String)">
            <summary>
Builds the node map.
</summary>
            <remarks>
                <para>Using the specific XML from the subset returned by GetXMLIDs, builds the 
node map thus completing the PvGenParameterArrayCL. After a successful
call to this method, the PvGenParameterArrayCL is ready to use.</para>
            </remarks>
            <param name="aXMLID">XML ID as returned by GetXMLIDs.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> if building the node map failed. Use <see cref="P:PvDotNet.PvResult.Description" /> for more information.</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvGenParameterArrayCL.GetXMLIDs(System.Collections.Generic.List`1{System.String})">
            <summary>
Returns all XMLs that can be used to build the node map behind the PvGenParameterArrayCL.
</summary>
            <remarks>
Fails if the PvGenParameterArrayCL is not connected. The strings returned
are properly formatted and ready to be used in a GUI.
</remarks>
            <param name="aXMLIDList">String list of available XML.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> if the operation fails. Use PvResult.Description for more information.</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvGenParameterArrayCL.Connect(System.String,System.String)">
            <summary>
Using a valid device ID, connects the empty PvGenParameterArrayCL to a camera through a specific port.
</summary>
            <remarks>
                <para>After calling this method, the port and camera are connected but the node map has not yet been created yet.</para>
            </remarks>
            <param name="aPortID">Port to use when probing the device. Available ports are
                    enumerated with GetPortIDs. With the eBUS SDK the enumerated
                    ports are highly likely going to be named PvSerialBridge
                    used in Camera Link DLL mode.</param>
            <param name="aDeviceID"> Can be resolved from a template with ProbeDevice or simply
                      be known from a previous session with the same system configuration.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> if the operation fails. Use PvResult.Description for more information.</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvGenParameterArrayCL.ProbeDevice(System.String,System.String,System.UInt32)">
            <summary>
Using a device template, a specific port is probed for a camera.
</summary>
            <remarks>
                <para>If a camera is found a camera ID is returned to the caller. That camera ID can be used to connect to camera.</para>
            </remarks>
            <param name="aPortID">Port to use when probing the device. Available ports are
                    enumerated with GetPortIDs. With the eBUS SDK the enumerated
                    ports are highly likely going to be named PvSerialBridge
                    used in Camera Link DLL mode.</param>
            <param name="aDeviceTemplate">Allows selecting which CLProtocol library to use and can
                            even  refine the camera selection within the library. All
                            possible device templates for the system can be enumerated
                            with GetDeviceTemplates.</param>
            <param name="aSerialTimeout">Optional serial timeout used when probing the camera. 500 milliseconds is used as a 
                           default value if not provided.</param>
            <returns>Camera ID, if a camera is found.</returns>
        </member>
        <member name="M:PvDotNet.PvGenParameterArrayCL.ProbeDevice(System.String,System.String)">
            <summary>
Using a device template, a specific port is probed for a camera.
</summary>
            <remarks>
This overload method ProbeDevice has one default argument parameters, for information about the default argument parameter UInt32 aSerialTimeout of this overload method, refer to the other overload method 
<see cref="M:PvDotNet.PvGenParameterArrayCL.ProbeDevice(System.String,System.String,System.UInt32)" />.
<para>If a camera is found a camera ID is returned to the caller. That camera ID can be used to connect to camera.</para></remarks>
            <param name="aPortID">Port to use when probing the device. Available ports are
                    enumerated with GetPortIDs. With the eBUS SDK the enumerated
                    ports are highly likely going to be named PvSerialBridge
                    used in Camera Link DLL mode.</param>
            <param name="aDeviceTemplate">Allows selecting which CLProtocol library to use and can
                            even  refine the camera selection within the library. All
                            possible device templates for the system can be enumerated
                            with GetDeviceTemplates.</param>
            <returns>Camera ID, if a camera is found.</returns>
        </member>
        <member name="M:PvDotNet.PvGenParameterArrayCL.GetDeviceTemplates(System.Collections.Generic.List`1{System.String})">
            <summary>
Static method returning the list of all available device templates.
</summary>
            <remarks>
                <para>A device template is used as a hint when probing cameras on a specific port.</para>
                <para>The device template list is built from all available CLProtocol.dll on the system.</para>
                <para>One DLL can support more than one device template. The strings returned are properly formatted and ready to be used in a GUI.</para>
            </remarks>
            <param name="aDeviceTemplateList">aDeviceTemplateList String list containing available device templates.</param>
        </member>
        <member name="M:PvDotNet.PvGenParameterArrayCL.GetPortIDs(System.Collections.Generic.List`1{System.String})">
            <summary>
Static method returning the list of all available port IDs.
</summary>
            <remarks>
                <para>The list is built from the list of Camera Link DLLs available on the system.</para>
                <para>The strings returned are properly formatted and ready to be used in a GUI.</para>
            </remarks>
            <param name="aPortIDList">aPortIDList List of strings representing available ports.</param>
        </member>
        <member name="M:PvDotNet.PvGenParameterArrayCL.Finalize">
            <summary>
Finalizer.
</summary>
        </member>
        <member name="M:PvDotNet.PvGenParameterArrayCL.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="M:PvDotNet.PvGenParameterArrayCL.#ctor">
            <summary>
Constructor.
</summary>
        </member>
        <member name="T:PvDotNet.PvGenParameterArrayCL">
            <summary>
Camera Link CLProtocol GenICam feature array.
<remarks>
OBSOLETE: use PvCameraBridge instead.
</remarks></summary>
        </member>
        <member name="P:PvDotNet.PvSerialBridge.HardCodedBaudRate">
            <summary>
Returns the device hard-coded baud rate (user-defined).
</summary>
            <remarks>
                <para>Zero (0) is returned if the bridge is not started or in serial COM port mode.</para>
                <para>Sets the device hard-coded baud rate (user-defined)</para>
                <para>If the device GenICam interface does not have the features to control
the configuration of the serial port used by the bridge, the developer
must know and provide the baud rate to which the serial port is hard-coded.</para>
                <para>This hard-coded baud rate is only used to control which unique baud rate
is made available to the application or CLProtocol DLL using the Camera Link DLL.
This unique baud rate must match the hard-coded device serial port
baud rate.</para>
                <para>This method should be called after starting the Camera Link DLL bridge, but
before starting the application using the Camera Link DLL or before
creating the CLProtocol node map.</para>
                <para>With a serial COM port, the baud rate of the COM port is specified through
the PvSerialPortConfiguration parameter passed to the Start method and simply
isn't used to set the device serial port baud rate. The hard coded baud
rate does not need to be defined.</para>
                <para>If the device GenICam interface does not have the features to control
the configuration of the serial port and this method is not called to specify
the hard-coded baud rate of the serial port, 9600 baud is used/assumed.</para>
                <para>Valid baud rates are the intersection between the device serial port baud
rates and what is described in the Camera Link specification:
<list type="bullet"><item><description>9600 baud.</description></item><item><description>19200 baud.</description></item><item><description>38400 baud.</description></item><item><description>57600 baud.</description></item><item><description>115200 baud.</description></item></list></para>
            </remarks>
            <exception cref="T:PvDotNet.PvException">Failure to set the device hard-coded baud rate can produce a PvException of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /> if the bridge is not started.</description></item><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /> if the baud rate is not supported.</description></item><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> if the bridge is not in Camera Link DLL mode.</description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvSerialBridge.BaudRate">
            <summary>
Returns the active baud rate of the device serial port used by the bridge.
</summary>
            <remarks>
                <para>Zero (0) is returned if the bridge is not active.</para>
                <para>If the device serial port baud rate cannot be retrieved, the serial COM port baud 
rate is returned if the bridge is used on a serial COM port.</para>
                <para>If the bridge is used on a Camera Link DLL, the hard-coded baud rate specified using 
the HardCodedBaudRate property is returned.</para>
            </remarks>
        </member>
        <member name="M:PvDotNet.PvSerialBridge.GetSupportedBaudRate(System.UInt32)">
            <summary>
Returns an indexed baud rate supported by the device.
</summary>
            <param name="aIndex">Zero-based supported baud rate index.</param>
            <returns>Indexed supported baud rate.</returns>
            <remarks>
                <para>Used with SupportedBaudRateCount property to enumerate all supported baud rates by 
the device serial port used by the bridge.</para>
                <para>Zero (0) is returned if the baud rates of the device serial port
could not be determined from its GenICam interface or if the bridge is not active.</para>
            </remarks>
            <param name="aIndex">Zero-based supported baud rate index.</param>
        </member>
        <member name="P:PvDotNet.PvSerialBridge.SupportedBaudRateCount">
            <summary>
Returns how many baud rates are supported by the device serial port.
</summary>
            <remarks>
                <para>Used with SupportedBaudRate property to enumerate all supported baud rates by 
the device serial port used by the bridge.</para>
                <para>Zero (0) can be returned if the GenICam interface of the device does
not allow serial port configuration.</para>
            </remarks>
        </member>
        <member name="M:PvDotNet.PvSerialBridge.Recover">
            <summary>
Deprecated.
</summary>
            <remarks>
                <para>Instead, on disconnect event use Save to store the serial bridge state. After
reconnection, use Load to bring it back.</para>
            </remarks>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_IMPLEMENTED" /> if the bridge is not started.</description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvSerialBridge.Name">
            <summary>
Returns the bridge name used when clserpte.dll enumerates ports. Empty string if the bridge is not started in Camera Link DLL mode.
</summary>
        </member>
        <member name="P:PvDotNet.PvSerialBridge.SerialPortConfiguration">
            <summary>
Returns the serial port configuration string used to start the bridge in serial port mode.

An invalid configuaration is returned if the bridge is not started or in Camera Link DLL mode.	
</summary>
        </member>
        <member name="P:PvDotNet.PvSerialBridge.SerialPort">
            <summary>
Returns the serial port string used to start the bridge in serial port mode. Empty string if the bridge is not started or in Camera Link DLL mode.
</summary>
        </member>
        <member name="P:PvDotNet.PvSerialBridge.DevicePort">
            <summary>
Returns the device port used by the bridge. PvDeviceSerialInvalid if the bridge is not started.
</summary>
        </member>
        <member name="M:PvDotNet.PvSerialBridge.ResetStatistics">
            <summary>
Resets the bridge statistics. Has not effect if the bridge is not started.
</summary>
        </member>
        <member name="P:PvDotNet.PvSerialBridge.BytesReceivedFromDevice">
            <summary>
Returns the number of bytes received from the device by the bridge. Zero if the bridge is not started.
</summary>
        </member>
        <member name="P:PvDotNet.PvSerialBridge.BytesSentToDevice">
            <summary>
Returns the number of bytes sent to the device by the bridge. Zero if the bridge is not started.
</summary>
        </member>
        <member name="M:PvDotNet.PvSerialBridge.Stop">
            <summary>
Stops the serial bridge.
</summary>
            <exception cref="T:PvDotNet.PvException">Failure can produce a following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /> if the bridge is not running.</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvSerialBridge.Start(System.String,PvDotNet.PvDevice,PvDotNet.PvDeviceSerial)">
            <summary>
Starts the serial bridge using a serial port as the source.
</summary>
            <param name="aName">Name used when enumerating bridges (ports) with clserpte.dll.</param>
            <param name="aDevice">Handle to a connected PvDevice used to open the device-side serial port.</param>
            <param name="aDevicePort">Device port to bridge to. Example: PvIPEngineBulk0.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_SUPPORTED" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvSerialBridge.Start(System.String,PvDotNet.PvSerialPortConfiguration,PvDotNet.PvDevice,PvDotNet.PvDeviceSerial)">
            <summary>
Starts the serial bridge using a Camera Link DLL (clserpte.dll) as the source.
</summary>
            <remarks>
Supported baud rates are 9600, 14400, 19200, 28800, 38400, 57600, 115200. For parity, none/even/odd
are supported and expressed as N/E/O. Supported bit counts are 7 and 8. Supported stop
bits are 1 and 2.
</remarks>
            <param name="aSerialPort">Handle to a string identifying which serial port on the host to use. Example: "COM1".</param>
            <param name="aConfig">Handle to an object containing the serial port configuration to be applied on aSerialPort.</param>
            <param name="aDevice">Handle to a connected PvDevice used to open the device-side serial port.</param>
            <param name="aDevicePort">Device port to bridge to. Example: PvIPEngineBulk0.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_SUPPORTED" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvSerialBridge.Finalize">
            <summary>
Finalizer.
</summary>
        </member>
        <member name="M:PvDotNet.PvSerialBridge.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="M:PvDotNet.PvSerialBridge.#ctor">
            <summary>
Constructor.
</summary>
        </member>
        <member name="T:PvDotNet.PvSerialBridge">
            <summary>
Bridges a COM port of Camera Link DLL to a device serial port.
</summary>
            <remarks>
                <para>Notes: This class is only available on Windows.</para>
                <para />
                <para>The serial bridge takes all the data coming from either a COM port or eBUS SDK 
Camera Link DLL (clserpte.dll) and sends to a device serial port.
</para>
                <para>It also takes all the data coming from a device serial port and sends it to either
a COM port or eBUS SDK Camera Link DLL.
</para>
                <para>Depending on the Start method that is used, the bridge is either started as a 
COM port bridge or Camera Link DLL bridge.
</para>
                <para>Statistics can be retrieved about a bridge: count of transmitted and received bytes.
</para>
                <para>The COM port can be used with a stand-alone application, usually a camera configuration
application relying on a COM port (ie: COM1, COM2, etc.) to interact with the camera. The
port selected by the application must be connected with a NULL modem to the port used
by the bridge. It can be two real COM ports connected together or two virtual ports
with a COM port emulation software/driver.
</para>
                <para>The Camera Link DLL can be used with a stand-alone application, usually a camera configuration
application, relying on the API described in the Camera Link standard used to interface
a serial port. Instead of being the serial port of a frame grabber here it is the serial
port of a GigE Vision device.
</para>
                <para>The Camera Link DLL can also be used with a PvGenParameterArrayCL - a GenICam CLProtocol
interface.
</para>
            </remarks>
        </member>
        <member name="M:PvDotNet.PvStreamU3V.Open(System.String,System.UInt16,System.UInt32)">
            <summary>Opens a USB3 Vision stream object.</summary>
            <param name="aInfo">GUID of the USB3 Vision device.</param>
            <param name="aChannel">Streaming channel to listen to.</param>
            <param name="aBuffersCapacity">The number of buffers can be queued in the streaming object at one time.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_SUPPORTED" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.CANNOT_OPEN_FILE" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvStreamU3V.Open(PvDotNet.PvDeviceInfo,System.UInt16,System.UInt32)">
            <summary>Opens a USB3 Vision stream object.</summary>
            <param name="aDeviceInfo">Device info object from a device finder.</param>
            <param name="aChannel">Streaming channel to listen to.</param>
            <param name="aBuffersCapacity">The number of buffers can be queued in the streaming object at one time.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_SUPPORTED" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.CANNOT_OPEN_FILE" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvStreamU3V.Open(System.String)">
            <summary>Opens a USB3 Vision stream object.</summary>
            <param name="aInfo">GUID of the USB3 Vision device.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_SUPPORTED" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.CANNOT_OPEN_FILE" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvStreamU3V.Open(PvDotNet.PvDeviceInfo)">
            <summary>Opens a stream object from a device info object.</summary>
            <param name="aDeviceInfo">Device info object from a device finder.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_SUPPORTED" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.CANNOT_OPEN_FILE" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvStreamU3V.Finalize">
            <summary>
Finalizer.
</summary>
        </member>
        <member name="M:PvDotNet.PvStreamU3V.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="M:PvDotNet.PvStreamU3V.#ctor">
            <summary>
Constructor.
</summary>
        </member>
        <member name="T:PvDotNet.PvStreamU3V">
            <summary>Receive data from a USB3 Vision transmitter.</summary>
        </member>
        <member name="P:PvDotNet.PvGenFile.LastErrorMessage">
            <summary>
Used to retrieve string-based operation of the last operation on a PvGenFile.
</summary>
            <remarks>
                <para>Use this method to retrieve detailed information about the last failed operation that throws GENERIC_ERROR exception.</para>
                <para>EOFs and other status are not considered errors and are monitored through the GetStatus method.</para>
            </remarks>
            <returns>Error message associated with the last <see cref="T:PvDotNet.PvException" /> operation on a PvGenFile.</returns>
        </member>
        <member name="M:PvDotNet.PvGenFile.GetFiles(PvDotNet.PvGenParameterArray,System.Collections.Generic.List`1{System.String})">
            <summary>
Returns all available files for a GenICam interface.
</summary>
            <param name="aArray">Handle to <see cref="T:PvDotNet.PvGenParameterArray" /></param>
            <param name="aFiles">List of strings that will contain all the available files after the method returns</param>
        </member>
        <member name="M:PvDotNet.PvGenFile.IsWritable(PvDotNet.PvGenParameterArray,System.String)">
            <summary>
Returns true if a file defined by the GenICam interface can be written.
</summary>
            <param name="aArray">Handle to <see cref="T:PvDotNet.PvGenParameterArray" /></param>
            <param name="aFilename"> Pass a file to be written.</param>
            <returns> True if the false is writable, false if not.</returns>
        </member>
        <member name="M:PvDotNet.PvGenFile.IsReadable(PvDotNet.PvGenParameterArray,System.String)">
            <summary>
Returns true if a file defined by the GenICam interface can be read.
</summary>
            <param name="aArray">Handle to <see cref="T:PvDotNet.PvGenParameterArray" /></param>
            <param name="aFilename"> Pass a file to be read.</param>
            <returns> True if the false is readable, false if not.</returns>
        </member>
        <member name="M:PvDotNet.PvGenFile.IsSupported(PvDotNet.PvGenParameterArray)">
            <summary>
Static method used to query if a PvGenParameterArray supports file access.
</summary>
            <remarks>
                <para>A PvGenParameterArray must support the following features in order to allow
access to device files through GenICam:</para>
                <list type="number">
                    <item>
                        <description>PvGenEnum.FileSelector </description>
                    </item>
                    <item>
                        <description>PvGenEnum.FileOperationSelector (must contain "Open", "Close", "Read", "Write" operations) </description>
                    </item>
                    <item>
                        <description>PvGenEnum.FileOpenMode (must contain "Read", "Write") </description>
                    </item>
                    <item>
                        <description>PvGenInteger.FileAccessOffset </description>
                    </item>
                    <item>
                        <description>PvGenInteger.FileAccessLength </description>
                    </item>
                    <item>
                        <description>PvGenRegister.FileAccessBuffer </description>
                    </item>
                    <item>
                        <description>PvGenEnum.FileOperationStatus (must contain "Success" enum entry) </description>
                    </item>
                    <item>
                        <description>PvGenCommand.FileOperationExecute </description>
                    </item>
                    <item>
                        <description>PvGenInteger.FileOperationResult </description>
                    </item>
                </list>
            </remarks>
            <param name="aArray">Handle to <see cref="T:PvDotNet.PvGenParameterArray" /></param>
            <returns> True if supported, false if not.</returns>
        </member>
        <member name="M:PvDotNet.PvGenFile.GetProgress(System.Int64@,System.Int64@)">
            <summary>
Returns progress about the current read or write operation.
</summary>
            <param name="aCompleted">How many bytes have been read or written.</param>
            <param name="aTotal">Total byte count for the read or write operation.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> (Use <see cref="P:PvDotNet.PvGenFile.LastErrorMessage" /> to get more information).</description></item><item><description><see cref="F:PvDotNet.PvResultCode.STATE_ERROR" /> if no read or write operation is in progress or completed.</description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvGenFile.Status">
            <summary>
 Gets the status of the last operation on a PvGenFile.
</summary>
            <remarks>
                <para>Last status of a read or write operation as provided by the device. The only
enum entry guaranteed to be provided by all devices is "Success" and everything
else is quality of implementation.</para>
                <para>As an example, the reference GenApi implementation for files assumes
end-of-file (EOF) if anything else other than "Success" is reported after
a read or a write.</para>
                <para>Open, Close, Read and Write operations can get the status through GetStatus. The GetStatus shows
the success or failure (or EOF) of the operation on the device.</para>
            </remarks>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> (Use <see cref="P:PvDotNet.PvGenFile.LastErrorMessage" /> to get more information).</description></item><item><description><see cref="F:PvDotNet.PvResultCode.STATE_ERROR" /> if the file is not opened.</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvGenFile.Read(System.Byte*,System.Int64,System.Int64@)">
            <summary>
 Reads data from the opened device file.
</summary>
            <remarks>
                <para>Reads aLength bytes from the device file into aBuffer. If EOF (end-of-file) is reached,
aBytesRead is 0 or less than aLength.</para>
            </remarks>
            <param name="aBuffer">Pointer to the data to write to the device file.</param>
            <param name="aLength">Number of bytes to write to the device file.</param>
            <param name="aBytesRead">Number of bytes successfully read from the device file.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> (Use <see cref="P:PvDotNet.PvGenFile.LastErrorMessage" /> to get more information).</description></item><item><description><see cref="F:PvDotNet.PvResultCode.STATE_ERROR" /> if the file is not opened.</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvGenFile.Write(System.Byte*,System.Int64,System.Int64@)">
            <summary>
 Writes data to the opened device file.
</summary>
            <remarks>
                <para>Writes aLength bytes from aBuffer to the device file. If EOF (end-of-file) is reached,
aBytesWritten is 0 or less than aLength. </para>
            </remarks>
            <param name="aBuffer">Pointer to the data to write to the device file.</param>
            <param name="aLength">Number of bytes to write to the device file.</param>
            <param name="aBytesWritten">Number of bytes successfully written to the device file.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> (Use <see cref="P:PvDotNet.PvGenFile.LastErrorMessage" /> to get more information).</description></item><item><description><see cref="F:PvDotNet.PvResultCode.STATE_ERROR" /> if the file is already opened.</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvGenFile.ReadTo(System.String)">
            <summary>
 Reads a complete device file and writes it to a local file.
</summary>
            <param name="aLocalFilename">The full path of the local file where data read from the device file is written to.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> (Use <see cref="P:PvDotNet.PvGenFile.LastErrorMessage" /> to get more information).</description></item><item><description><see cref="F:PvDotNet.PvResultCode.STATE_ERROR" /> if the file is already opened.</description></item><item><description><see cref="F:PvDotNet.PvResultCode.CANNOT_OPEN_FILE" /> if the local file cannot be opened.</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvGenFile.WriteFrom(System.String)">
            <summary>
 Writes a complete local file to the opened device file.
</summary>
            <param name="aLocalFilename">The full path of the local file to write to the device file.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /><see cref="P:PvDotNet.PvGenFile.LastErrorMessage" /> to get more information).</description></item><item><description><see cref="F:PvDotNet.PvResultCode.STATE_ERROR" /> if the file is already opened.</description></item><item><description><see cref="F:PvDotNet.PvResultCode.CANNOT_OPEN_FILE" /> if the local file cannot be opened.</description></item><item><description>ERR_OVERFLOW if EOF was reached on the device file before the complete local file could be written.</description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvGenFile.IsOpened">
            <summary>
 If the file object is opened or not. True if it is opened and attached to a PvGenParameterArray, false if not.
</summary>
        </member>
        <member name="M:PvDotNet.PvGenFile.Close">
            <summary>
 Closes the PvGenFile.
</summary>
            <remarks>
                <para>Closes the PvGenFile, detaches the PvGenParameterArray.</para>
            </remarks>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> (Use <see cref="P:PvDotNet.PvGenFile.LastErrorMessage" /> to get more information).</description></item><item><description><see cref="F:PvDotNet.PvResultCode.STATE_ERROR" /> if the file is already opened.</description></item><item><description>FILE_ERROR if the GenICam file close operation fails.</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvGenFile.Open(PvDotNet.PvGenParameterArray,System.String,PvDotNet.PvGenOpenMode)">
            <summary>
Opens a file through the GenICam interface.
</summary>
            <remarks>
                <para>Attaches the PvGenFile object to a GenICam parameter array, validates the 
filename exists for this device and perform the open operation through GenApi.</para>
            </remarks>
            <param name="aArray">The GenICam parameter array to use.</param>
            <param name="aFilename">The filename of the file to open on the device. Must match 
                       one of the pre-defined enumeration entry of the FileSelector 
                       feature. The filename is case sensitive.</param>
            <param name="aMode">Mode used to access the file. Read or write.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> (Use <see cref="P:PvDotNet.PvGenFile.LastErrorMessage" /> to get more information).</description></item><item><description><see cref="F:PvDotNet.PvResultCode.STATE_ERROR" /> if the file is already opened.</description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /> if the file does not exist.</description></item><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /> if aMode is not one of the supported open modes.</description></item><item><description>FILE_ERROR if the GenICam file open operation fails.</description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_SUPPORTED" /> if the <see cref="T:PvDotNet.PvGenParameterArray" /> does not have all expected features to support files.</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvGenFile.Finalize">
            <summary>
Finalizer.
</summary>
        </member>
        <member name="M:PvDotNet.PvGenFile.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="M:PvDotNet.PvGenFile.#ctor">
            <summary>
Constructor
</summary>
        </member>
        <member name="T:PvDotNet.PvGenFile">
            <summary>
Allows reading/writing to files hosted on the device.
</summary>
            <remarks>
                <para>These files could be debug information, look-up tables, new firmware, 
configuration files, persistent configurations or just about anything.</para>
            </remarks>
        </member>
        <member name="T:PvDotNet.PvGenOpenMode">
            <summary>
Mode used to access the file.
</summary>
        </member>
        <member name="F:PvDotNet.PvGenOpenMode.Undefined">
            <summary>
Undefined access mode.
</summary>
        </member>
        <member name="F:PvDotNet.PvGenOpenMode.Read">
            <summary>
Read access mode.
</summary>
        </member>
        <member name="F:PvDotNet.PvGenOpenMode.Write">
            <summary>
Write access mode.
</summary>
        </member>
        <member name="M:PvDotNet.PvFPSStabilizer.Reset">
            <summary>
Resets the history.
</summary>
        </member>
        <member name="P:PvDotNet.PvFPSStabilizer.Average">
            <summary>
Queries the displayed frame rate average. 
</summary>
            <remarks>
Used by eBUS Player in the status control that displays the display frame rate.
</remarks>
        </member>
        <member name="M:PvDotNet.PvFPSStabilizer.IsTimeToDisplay(System.UInt32)">
            <summary>
Checks whether displaying a frame now would bring us close to the desired display frame rate or not.
</summary>
            <remarks>
If the new frame will bring you closer to your desired frame rate, the method returns true
and you send the frame to be displayed to a PvDisplayControl or your own display class.
If it returns false, this new frame would bring you above the desired display rate. The
frame can still be processed, etc. but displaying it would bring you above the desired frame rate.
The expected course of action would then be to simply not display the frame and wait for a new
incoming frame - instead of holding to the current one and trying to display it later.
</remarks>
            <param name="aTargetFPS">The target (desired) display frame rate.</param>
            <returns>True if the frame should be displayed, false if not.</returns>
        </member>
        <member name="M:PvDotNet.PvFPSStabilizer.Finalize">
            <summary>
Finalizer.
</summary>
        </member>
        <member name="M:PvDotNet.PvFPSStabilizer.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="M:PvDotNet.PvFPSStabilizer.#ctor">
            <summary>
Constructor.
</summary>
        </member>
        <member name="T:PvDotNet.PvFPSStabilizer">
            <summary>
Display frame rate manager. Used to stabilize the frames-per-seconds displayed.
</summary>
            <remarks>
This class is pretty simple to use. Just instantiate an object and call the IsTimeToDisplay
every time you have a new frame to display, specifying the desired frame rate.
This class is not tied to the display. It simply keeps track of the times associated with
displayed frames (IsTimeToDisplay returning true) in a circular buffer and uses this history
to decide if it is time to display a new frame.
</remarks>
        </member>
        <member name="M:PvDotNet.PvDfwPayload.GetDeviceIdRecord(System.String,System.String,System.Byte*,System.UInt32,System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Generates a reset record from a firmware update file.
</summary>
            <param name="aFirmwareFilename">Name of the firmware file to read the version and attributes from.</param>
            <param name="aNewDeviceId"> New device Id.</param>
            <param name="aBuffer">Memory buffer where to write the reset record.</param>
            <param name="aBufferLength">Length of the memory buffer, in bytes.</param>
            <param name="aBytesWritten">How many effective bytes were written to the buffer.</param>
        </member>
        <member name="M:PvDotNet.PvDfwPayload.GetResetRecord(System.String,System.Byte*,System.UInt32,System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Generates a reset record from a firmware update file.
</summary>
            <param name="aFirmwareFilename">Name of the firmware file to read the version and attributes from.</param>
            <param name="aBuffer">Memory buffer where to write the reset record.</param>
            <param name="aBufferLength">Length of the memory buffer, in bytes.</param>
            <param name="aBytesWritten">How many effective bytes were written to the buffer.</param>
        </member>
        <member name="M:PvDotNet.PvDfwPayload.Finalize">
            <summary>
Finalizer.
</summary>
        </member>
        <member name="M:PvDotNet.PvDfwPayload.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="M:PvDotNet.PvDfwPayload.#ctor(System.Byte*,System.UInt32)">
            <summary>
Constructor, works on a memory buffer.
</summary>
            <param name="aBuffer">Pointer to the buffer of the payload to work on.</param>
            <param name="aBufferLength">Length of the memory buffer, in bytes.</param>
        </member>
        <member name="M:PvDotNet.PvDfwPayload.#ctor(System.String)">
            <summary>
Constructor, works a on file.
</summary>
            <param name="aFilename">Filename of the payload file to work on.</param>
        </member>
        <member name="T:PvDotNet.PvDfwPayload">
            <summary>
Currently only used to generate reset and device ID DFW records from firmware update files.
This class may eventually be instantiated to perform DFW files manipulation. However, for the time being it only provides a fixed set of static functions used to generate ready-to-use DFW records.
</summary>
        </member>
        <member name="M:PvDotNet.PvDeviceGEV.SetIPConfiguration(System.String,System.String,System.String,System.String)">
            <summary>Sets the GigE Vision device's IP address.</summary>
            <remark>
This static method lets you configure the GigE Vision device's IP address. You cannot
change the IP address when a PvDevice is connected.
Can be used to assign a valid IP configuration to a device before connecting a <see cref="T:PvDotNet.PvDevice" /> to a
GigE Vision device (using the <see cref="M:PvDotNet.PvDeviceGEV.Connect(PvDotNet.PvDeviceInfo)" /> method). The GigE Vision device to be configured is identified using its MAC address.
</remark>
            <param name="aMACAddress">The GigE Vision device's MAC address.</param>
            <param name="aIP">The GigE Vision device's new IP address.</param>
            <param name="aSubnetMask">The GigE Vision device's new subnet mask.</param>
            <param name="aGateway">The GigE Vision device's new gateway.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvDeviceGEV.GetAccessType(System.String)">
            <summary>Returns the current access type of a device identified by its IP address.</summary>
            <remark>This function is static. It does not work on an specific object but will return the access type
of a GigE Vision device identified by its IP address.</remark>
            <param name="aDeviceIPAddress">IPAddress The IP address of the GigE Vision device.</param>
            <returns>Current access type of a device identified by its IP address.</returns>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.TIMEOUT" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvDeviceGEV.WriteRegister(System.UInt32,System.UInt32,System.Boolean)">
            <summary>Write a 32-bit value to a specific register address on the GigE Vision device.</summary>
            <remark>
See warnings about accessing the register map directly in <see cref="M:PvDotNet.PvDevice.WriteMemory(System.UInt32,System.Byte*,System.UInt32)" />.
aValue is provided in the platform's expected Endianess. GigE Vision single register 
operations are always performed as Big Endian and on Intel platforms are corrected to/from Little Endian.
</remark>
            <param name="aAddress">The GigE Vision device's register address (mod 4).</param>
            <param name="aValue">The value to be written to the register.</param>
            <param name="aAcknowledge">When sending the command, sets the acknowledge requested bit and waits for that acknowledge.
                         If set to false, the acknowledge is not requested and the method returns as soon as the command has been
                         pushed in the UDP socket. If not specified true is assumed.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.TIMEOUT" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvDeviceGEV.WriteRegister(System.UInt32,System.UInt32)">
            <summary>Write a 32-bit value to a specific register address on the GigE Vision device.</summary>
            <remark>
See warnings about accessing the register map directly in <see cref="M:PvDotNet.PvDevice.WriteMemory(System.UInt32,System.Byte*,System.UInt32)" />.
aValue is provided in the platform's expected Endianess. GigE Vision single register 
operations are always performed as Big Endian and on Intel platforms are corrected to/from Little Endian.
</remark>
            <param name="aAddress">The GigE Vision device's register address (mod 4).</param>
            <param name="aValue">The value to be written to the register.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.TIMEOUT" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvDeviceGEV.ReadRegister(System.UInt32,System.UInt32@)">
            <summary>Read a 32-bit value from a specific register address on the GigE Vision device.</summary>
            <remark>
aValue is returned in the platform's expected Endianess. GigE Vision single register 
operations are always performed as Big Endian and on Intel platforms are corrected to/from Little Endian.
</remark>
            <param name="aAddress">The GigE Vision device's register address (mod 4).</param>
            <param name="aValue">The value read from the GigE Vision device's register.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.TIMEOUT" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvDeviceGEV.NegotiatePacketSize(System.UInt32,System.UInt32)">
            <summary>Automatically finds and sets the optimal packet size.</summary>
            <remark>
                <para>This method tests the network connection for the largest possible packet size 
that the network can support between the GigE Vision transmitter and the controlling PC.</para>
                <para>Calling this method resets the streaming destination for aChannel. You should always call this
method AFTER connecting, BEFORE setting the GigE Vision streaming destination using SetStreamDestination.</para>
                <para>The highest possible packet size from { 9000, 8000, 4000, 2000, 1500, 1000, 600 } is used. These values are
used as raw seeds and are adjusted by removing 24 bytes for the Ethernet layer and then rounded down to meet
the increment requirement imposed by the GevSCPSPacketSize parameter.</para>
            </remark>
            <param name="aChannel">The streaming channel. Use 0 for most GigE Vision devices only supporting a single streaming channel.</param>
            <param name="aDefaultPacketSize">The packet size to use, in bytes, should the negotiation fail. Use 1476 for a safe packet size; 0 to continue using the GigE Vision device's original setting in case of failure.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.TIMEOUT" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvDeviceGEV.NegotiatePacketSize(System.UInt32)">
            <summary>Automatically finds and sets the optimal packet size.</summary>
            <remark>
                <para>This method tests the network connection for the largest possible packet size 
that the network can support between the GigE Vision transmitter and the controlling PC.</para>
                <para>Calling this method resets the streaming destination for aChannel. You should always call this
method AFTER connecting, BEFORE setting the GigE Vision streaming destination using SetStreamDestination.</para>
                <para>The highest possible packet size from { 9000, 8000, 4000, 2000, 1500, 1000, 600 } is used. These values are
used as raw seeds and are adjusted by removing 24 bytes for the Ethernet layer and then rounded down to meet
the increment requirement imposed by the GevSCPSPacketSize parameter.</para>
            </remark>
            <param name="aChannel">The streaming channel. Use 0 for most GigE Vision devices only supporting a single streaming channel.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.TIMEOUT" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvDeviceGEV.NegotiatePacketSize">
            <summary>Automatically finds and sets the optimal packet size.</summary>
            <remark>
                <para>This method tests the network connection for the largest possible packet size 
that the network can support between the GigE Vision transmitter and the controlling PC.</para>
                <para>Calling this method resets the streaming destination for aChannel. You should always call this
method AFTER connecting, BEFORE setting the GigE Vision streaming destination using SetStreamDestination.</para>
                <para>The highest possible packet size from { MTU (if below 9000), 9000, 8000, 4000, 2000, 1500, 1000, 600 } is used. These values are
used as raw seeds and are adjusted by removing 24 bytes for the Ethernet layer and then rounded down to meet
the increment requirement imposed by the GevSCPSPacketSize parameter.</para>
            </remark>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.TIMEOUT" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvDeviceGEV.SetPacketSize(System.UInt32,System.UInt32)">
            <summary>Sets the packet size for a streaming channel.</summary>
            <remark>
Applies a specific packet size to a streaming channel. Unlike the NegotiatePacketSize method,
it does not attempt to find the best packet size, it just uses the one provided as a parameter.
</remark>
            <param name="aPacketSize">The packet size to use for aChannel.</param>
            <param name="aChannel">The streaming channel. Use 0 for most GigE Vision devices only supporting a single streaming channel.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.TIMEOUT" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvDeviceGEV.SetPacketSize(System.UInt32)">
            <summary>Sets the packet size for a streaming channel.</summary>
            <remark>
                <para>Applies a specific packet size to a streaming channel. Unlike the NegotiatePacketSize method,
it does not attempt to find the best packet size, it just uses the one provided as a parameter.</para>
            </remark>
            <param name="aPacketSize">The packet size to use for aChannel.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.TIMEOUT" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvDeviceGEV.ResetStreamDestination(System.UInt32)">
            <summary>Resets the UDP/IP streaming destination of the GigE Vision device.</summary>
            <remarks>
This method is equivalent to calling <see cref="M:PvDotNet.PvDeviceGEV.SetStreamDestination(System.String,System.UInt16,System.UInt32)" /> with values ("0.0.0.0", 0, <i>aChannel</i>).
</remarks>
            <param name="aChannel">See the <i>aChannel</i> parameter for the <see cref="M:PvDotNet.PvDeviceGEV.SetStreamDestination(System.String,System.UInt16,System.UInt32)" /> method.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.TIMEOUT" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvDeviceGEV.ResetStreamDestination">
            <summary>Resets the UDP/IP streaming destination of the GigE Vision device.</summary>
            <remarks>
This method is equivalent to calling <see cref="M:PvDotNet.PvDeviceGEV.SetStreamDestination(System.String,System.UInt16)" /> with values ("0.0.0.0", 0).
</remarks>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.TIMEOUT" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvDeviceGEV.SetStreamDestination(System.String,System.UInt16,System.UInt32)">
            <summary>Set the UDP/IP destination to which the GigE Vision device transmits data.</summary>
            <remark>
The destination consists of an IP address (unicast or multicast) and a port number.
</remark>
            <param name="aIPAddress">The receiving PC's IP address (GenICam feature name: <b>GevSCDA</b>) or a multicast IP address.</param>
            <param name="aDataPort">The receiving PC's data port (feature name: <b>GevSCPHostPort</b>) or the multicast port.</param>
            <param name="aChannel">The GigE Vision stream channel; the channel over which the GigE Vision device transmits images.
                        Use 0 for device having supporting a single streaming channel.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.TIMEOUT" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvDeviceGEV.SetStreamDestination(System.String,System.UInt16)">
            <summary>Set the UDP/IP destination to which the GigE Vision device transmits data.</summary>
            <remark>
The destination consists of an IP address (unicast or multicast) and a port number.
</remark>
            <param name="aIPAddress">The receiving PC's IP address (GenICam feature name: <b>GevSCDA</b>) or a multicast IP address.</param>
            <param name="aDataPort">The receiving PC's data port (feature name: <b>GevSCPHostPort</b>) or the multicast port.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.TIMEOUT" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvDeviceGEV.Connect(System.String,PvDotNet.PvAccessType)">
            <summary>Connect to a GigE Vision device.</summary>
            <remark>
If you know the GigE Vision device's IP address, MAC address or DeviceUserID, you can use this method to connect to it.
1. If aInfo contains an IP address, the connection attempt is direct.
2. If aInfo contains a MAC address or DeviceUserID:
<list type="bullet"><item><description>An internal <see cref="T:PvDotNet.PvSystem" /> is used to find all reachable GigE Vision devices.</description></item><item><description>Found devices are browsed, looking for a match on either MAC address or DeviceUserID.</description></item><item><description>If the device is found, connection is attempted.</description></item></list></remark>
            <param name="aInfo">Information that uniquely identifies the GigE Vision device. You may use one of the following:
                        - GigE Vision device's MAC address. Use the form <tt>00:11:22:33:44:5F</tt>.
                        - GigE Vision device's IP Address. Use the form <tt>192.168.1.114</tt>.
                        - GigE Vision device's DeviceUserID.
</param>
            <param name="aAccessType">The access control privilege to set at the time of connection.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.NO_LICENSE" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.GENICAM_XML_ERROR" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvDeviceGEV.Connect(PvDotNet.PvDeviceInfo,PvDotNet.PvAccessType)">
            <summary>Connect to a GigE Vision device (found with <see cref="T:PvDotNet.PvSystem" />, <see cref="T:PvDotNet.PvInterface" />, <see cref="T:PvDotNet.PvDeviceInfo" />).</summary>
            <remark>
The <see cref="M:PvDotNet.PvDeviceGEV.Connect(PvDotNet.PvDeviceInfo,PvDotNet.PvAccessType)" /> method connects to a GigE Vision device found using a <see cref="T:PvDotNet.PvSystem" /> or PvDeviceFinderWnd object.
Only one device can be connected to at a time.
</remark>
            <param name="aDeviceInfo">The GigE Vision device's network connectivity information; a <see cref="T:PvDotNet.PvDeviceInfo" /> object.</param>
            <param name="aAccessType">The GigE Vision device's availability for connections by multiple controllers.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.NO_LICENSE" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.GENICAM_XML_ERROR" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvDeviceGEV.Connect(PvDotNet.PvDeviceInfo)">
            <summary>Connect to a GigE Vision device.</summary>
            <remark>
The <see cref="M:PvDotNet.PvDeviceGEV.Connect(PvDotNet.PvDeviceInfo)" /> method connects to a GigE Vision device found using a <see cref="T:PvDotNet.PvSystem" /> or PvDeviceFinderWnd object.
Only one device can be connected to at a time.
</remark>
            <param name="aDeviceInfo">The GigE Vision device's network connectivity information; a <see cref="T:PvDotNet.PvDeviceInfo" /> object.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.NO_LICENSE" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.GENICAM_XML_ERROR" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvDeviceGEV.Finalize">
            <summary>
Finalizer.
</summary>
        </member>
        <member name="M:PvDotNet.PvDeviceGEV.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="M:PvDotNet.PvDeviceGEV.#ctor">
            <summary>
Constructor.
</summary>
        </member>
        <member name="T:PvDotNet.PvDeviceGEV">
            <summary>
Connect, configure and control a GigE Vision device.
</summary>
        </member>
        <member name="M:PvDotNet.PvTftpClient.GetProgress(System.Int64@,System.Int64@)">
            <summary>
Returns the transfer progress.
</summary>
            <param name="aCompleted">How many bytes have been transferred.</param>
            <param name="aTotal">Size of the transfer in bytes.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.STATE_ERROR" /> if no transfer is in progress</description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvTftpClient.TransferResult">
            <summary>
Returns the last error message.
</summary>
            <remarks>
                <para>Can be one of:</para>
                <list type="bullet">
                    <item>
                        <description>
                            <see cref="F:PvDotNet.PvResultCode.OK" /> if the transfer completed successfully</description>
                    </item>
                    <item>
                        <description>
                            <see cref="F:PvDotNet.PvResultCode.PENDING" /> if the transfer is still in progress</description>
                    </item>
                    <item>
                        <description>
                            <see cref="F:PvDotNet.PvResultCode.NETWORK_ERROR" /> if the transfer failed. The description of the result should contain more information</description>
                    </item>
                    <item>
                        <description>
                            <see cref="F:PvDotNet.PvResultCode.ABORTED" /> if the transfer was aborted</description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="M:PvDotNet.PvTftpClient.GetWarning">
            <summary>Pops the oldest transfer warning and returns it in a string. </summary>
            <returns> Returns warnings string.</returns>
        </member>
        <member name="M:PvDotNet.PvTftpClient.Abort">
            <summary>
Aborts the current transfer.
</summary>
            <remarks>
                <para>As the send and receive methods are blocking, this one needs to be called from a different thread.</para>
            </remarks>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.STATE_ERROR" /> if no transfer is in progress</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvTftpClient.GetData(System.Byte*,System.UInt32,System.UInt32@)">
            <summary>
Gets data from a device file using TFTP.
</summary>
            <param name="aBuffer">Pointer to the buffer where the data is written.</param>
            <param name="aBufferLength">The size of the buffer in bytes.</param>
            <param name="aBytesRead">Output, the number of bytes read from the device file into aBuffer in bytes.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.FILE_ERROR" /> if the buffer parameters are invalid</description></item><item><description><see cref="F:PvDotNet.PvResultCode.STATE_ERROR" /> if a transfer is already in progress</description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_INITIALIZED" /> if Init has not been called</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvTftpClient.GetFile(System.String)">
            <summary>
Reads a file from the device using TFTP.
</summary>
            <param name="aHostFilename">The file read from the device is written to that location.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.FILE_ERROR" /> if the file does not exist or cannot be opened</description></item><item><description><see cref="F:PvDotNet.PvResultCode.STATE_ERROR" /> if a transfer is already in progress</description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_INITIALIZED" /> if Init has not been called</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvTftpClient.GetFile">
            <summary>
Reads a file from the device using TFTP. aDeviceFilename (from Init) from the current working directory is sent to the device.
</summary>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.FILE_ERROR" /> if the file does not exist or cannot be opened</description></item><item><description><see cref="F:PvDotNet.PvResultCode.STATE_ERROR" /> if a transfer is already in progress</description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_INITIALIZED" /> if Init has not been called</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvTftpClient.SendData(System.Byte*,System.UInt32)">
            <summary>
Sends data to a device file using TFTP.
</summary>
            <param name="aBuffer">Pointer to the buffer containing the data to send.</param>
            <param name="aBufferLength">The size of the buffer, in bytes.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.FILE_ERROR" /> if the buffer parameters are invalid</description></item><item><description><see cref="F:PvDotNet.PvResultCode.STATE_ERROR" /> if a transfer is already in progress</description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_INITIALIZED" /> if Init has not been called</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvTftpClient.SendFile(System.String)">
            <summary>
Sends a local file to the device using TFTP.
</summary>
            <param name="aHostFilename">The name of the local file to write to the device.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.FILE_ERROR" /> if the file does not exist or cannot be opened</description></item><item><description><see cref="F:PvDotNet.PvResultCode.STATE_ERROR" /> if a transfer is already in progress</description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_INITIALIZED" /> if Init has not been called</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvTftpClient.SendFile">
            <summary>
Sends a local file to the device using TFTP. aDeviceFilename (from Init) from the current working directory is sent to the device.
</summary>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.FILE_ERROR" /> if the file does not exist or cannot be opened</description></item><item><description><see cref="F:PvDotNet.PvResultCode.STATE_ERROR" /> if a transfer is already in progress</description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_INITIALIZED" /> if Init has not been called</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvTftpClient.Init(System.String,System.String)">
            <summary>
Initializes the client for file transfer.
</summary>
            <param name="aDeviceIPAddress">The IP address of the device to transfer to/from.</param>
            <param name="aDeviceFilename">The name device-side filename written to or read from the device.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /> if the IP address is invalid</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvTftpClient.Finalize">
            <summary>
Finalizer.
</summary>
        </member>
        <member name="M:PvDotNet.PvTftpClient.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="M:PvDotNet.PvTftpClient.#ctor">
            <summary>
Constructor
</summary>
        </member>
        <member name="T:PvDotNet.PvTftpClient">
            <summary>
Sends or receives files from a GigE Vision device using the TFTP protocol.
</summary>
        </member>
        <member name="P:PvDotNet.PvTruesenseConverter.LowLumaNoise">
            <summary>
Low noise threshold.
</summary>
        </member>
        <member name="P:PvDotNet.PvTruesenseConverter.HighLumaNoise">
            <summary>
High noise threshold.
</summary>
        </member>
        <member name="P:PvDotNet.PvTruesenseConverter.MaxSharpen">
            <summary>
Sharp maximal threshold.
</summary>
        </member>
        <member name="P:PvDotNet.PvTruesenseConverter.SharpenParam">
            <summary>
Sharp parameter.
</summary>
        </member>
        <member name="P:PvDotNet.PvTruesenseConverter.GlobalGain">
            <summary>
Global gain of white balance.
</summary>
        </member>
        <member name="P:PvDotNet.PvTruesenseConverter.PanGain">
            <summary>
Pan gain of white balance.
</summary>
        </member>
        <member name="P:PvDotNet.PvTruesenseConverter.BlueGain">
            <summary>
Blue gain of white balance.
</summary>
        </member>
        <member name="P:PvDotNet.PvTruesenseConverter.GreenGain">
            <summary>
Green gain of white balance.
</summary>
        </member>
        <member name="P:PvDotNet.PvTruesenseConverter.RedGain">
            <summary>
Red gain of white balance.
</summary>
        </member>
        <member name="P:PvDotNet.PvTruesenseConverter.Darkfloor">
            <summary>
Dark floor of the raw image.
</summary>
        </member>
        <member name="M:PvDotNet.PvTruesenseConverter.Convert(PvDotNet.PvImage,PvDotNet.PvImage,System.Boolean)">
            <summary>
Convert an image from TRUESENSE(TM) to RGB.
</summary>
            <param name="aSource">The original image.</param>
            <param name="aDestination">The destination image.</param>
            <param name="aReallocIfNeeded"> Depending on the conversion, the memory footprint of the new image may be greater than aDestination
    current size. By setting this parameter to true, the image is re-allocated if aDestination is too small. If aDestination memory 
    image is not owned by the PvImage&gt; and is too small, Convert fails.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description>INVALID_DATA_FORMAT.</description></item><item><description>GENERIC_ERROR.</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvTruesenseConverter.Convert(PvDotNet.PvImage,PvDotNet.PvImage)">
            <summary>
Convert an image from TRUESENSE(TM) to RGB.
</summary>
            <param name="aSource">The original image.</param>
            <param name="aDestination">The destination image.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description>INVALID_DATA_FORMAT.</description></item><item><description>GENERIC_ERROR.</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvTruesenseConverter.IsConversionSupported(PvDotNet.PvPixelType,PvDotNet.PvPixelType)">
            <summary>
Test if a pixel type can be converted to another type.
</summary>
            <remarks>
                <para>Converting from one pixel type to another isn't a trivial mathematical calculation - all conversions require specialized, dedicated algorithms.</para>
                <para>The IsConversionSupported function tests if the Convertmethod has an available conversion algorithm.</para>
            </remarks>
            <param name="aSource">The original pixel type. For available pixel types, see PvPixelType.h.</param>
            <param name="aDestination">The new pixel type. See <i>aSource</i>.</param>
            <returns>True if Convert has an available conversion algorithm; otherwise, false.</returns>
        </member>
        <member name="M:PvDotNet.PvTruesenseConverter.Finalize">
            <summary>
Finalizer.
</summary>
        </member>
        <member name="M:PvDotNet.PvTruesenseConverter.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="M:PvDotNet.PvTruesenseConverter.#ctor">
            <summary>
Constructor.
</summary>
        </member>
        <member name="T:PvDotNet.PvTruesenseConverter">
            <summary>
Converts images from TRUESENSE(TM) to RGB.
</summary>
            <remarks>
                <para>This class can be used to convert Sparse Color Filter TRUESENSE(TM) images (SCF1)
into RGB8 or RGBa8. The image quality is expected to be much better than SCF1 conversion
performed using PvBufferConverter.</para>
                <para>The intense image processing algorithms used to obtain this high quality yields much higher 
processing times. Various gain and filtering parameters can be used to tweak the image conversion.</para>
                <para>SCF1 12-unpacked is recommended as input pixel type for slightly better processing times.
Other SCF1 pixel types are also supported but must internally be converted to 
12-unpacked before being converted to RGB.</para>
            </remarks>
        </member>
        <member name="M:PvDotNet.PvGenStateStack.SetStringValue(System.String,System.String)">
            <summary>
Changes the value of an string parameter.
</summary>
            <param name="aName">The name of the parameter to change.</param>
            <param name="aValue">The new value of the parameter.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> (Use <see cref="P:PvDotNet.PvResult.Description" /> to get more information).</description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /> if the parameter does not exist </description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvGenStateStack.SetBooleanValue(System.String,System.Boolean)">
            <summary>
Changes the value of an Boolean parameter.
</summary>
            <param name="aName">The name of the parameter to change.</param>
            <param name="aValue">The new value of the parameter.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> (Use <see cref="P:PvDotNet.PvResult.Description" /> to get more information).</description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /> if the parameter does not exist </description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvGenStateStack.SetEnumValue(System.String,System.Int64)">
            <summary>
Changes the value of an enum parameter.
</summary>
            <param name="aName">The name of the parameter to change.</param>
            <param name="aValue">The new integer value of the parameter.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> (Use <see cref="P:PvDotNet.PvResult.Description" /> to get more information).</description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /> if the parameter does not exist </description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvGenStateStack.SetEnumValue(System.String,System.String)">
            <summary>
Changes the value of an enum parameter.
</summary>
            <param name="aName">The name of the parameter to change.</param>
            <param name="aValue">The new symbolic (string) value of the parameter.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> (Use <see cref="P:PvDotNet.PvResult.Description" /> to get more information).</description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /> if the parameter does not exist </description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvGenStateStack.SetFloatValue(System.String,System.Double)">
            <summary>
Changes the value of an float parameter.
</summary>
            <param name="aName">The name of the parameter to change.</param>
            <param name="aValue">The new value of the parameter.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> (Use <see cref="P:PvDotNet.PvResult.Description" /> to get more information).</description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /> if the parameter does not exist </description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvGenStateStack.SetIntegerValue(System.String,System.Int64)">
            <summary>
Changes the value of an integer parameter.
</summary>
            <param name="aName">The name of the parameter to change.</param>
            <param name="aValue">The new value of the parameter.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> (Use <see cref="P:PvDotNet.PvResult.Description" /> to get more information).</description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /> if the parameter does not exist </description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvGenStateStack.Finalize">
            <summary>
Finalizer.
</summary>
        </member>
        <member name="M:PvDotNet.PvGenStateStack.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="M:PvDotNet.PvGenStateStack.#ctor(PvDotNet.PvGenParameterArray)">
            <summary>
Constructor
</summary>
            <param name="aArray">The GenICam parameter array to operate on.</param>
        </member>
        <member name="T:PvDotNet.PvGenStateStack">
            <summary>
Performs changes to a GenICam node map, tracks them and restores the previous state on destruction.
</summary>
            <remarks>
                <para>This class can be used to make temporary changes to a GenICam node map. Every parameter changed through this class is tracked and its original value is saved. When the object is destroyed, the original value of all parameters is restored in the reverse order.</para>
                <para>This class is very useful when dealing with selectors. If you want to change a selected value without affecting the current selector state of the node map, create an object of this type, change the selector(s) using the Set methods, perform your changes and let the object go out of scope: the selectors will go back to their original values.</para>
                <para>Assume A is originally 1, B is 2, C is 3. If you use this class to change A 4, B to 5 and C to 6 (in that order) when the object goes out of scope C will be set back to 3, B to 2 and A to 1 (in that order as well).</para>
                <para>If a value cannot be set (an error occurs) the previous value is not pushed on the stack of parameters that will be restored when the destructor is called.</para>
                <para>If the parameter is already set to the requested value, its value IS NOT changed, and IS NOT pushed on the stack to be eventually restored. This is done to minimize traffic to the device and to avoid having too many invalidators to be fired when a selector is already set to the right value.</para>
            </remarks>
        </member>
        <member name="M:PvDotNet.PvDeviceInfoPleoraProtocol.Dispose">
            <summary>Destructor.</summary>
        </member>
        <member name="M:PvDotNet.PvDeviceInfoPleoraProtocol.#ctor(PvDeviceInfo*)">
            <summary>Constructor.</summary>
        </member>
        <member name="P:PvDotNet.PvDeviceInfoPleoraProtocol.SoftwareMinor">
            <summary>Get the Minor version of the firmware running on the Pleora Protocol device.</summary>
        </member>
        <member name="P:PvDotNet.PvDeviceInfoPleoraProtocol.SoftwareMajor">
            <summary>Get the Major version of the firmware running on the Pleora Protocol device.</summary>
        </member>
        <member name="P:PvDotNet.PvDeviceInfoPleoraProtocol.VendorID">
            <summary>Get the Vendor ID of the Pleora Protocol device.</summary>
        </member>
        <member name="P:PvDotNet.PvDeviceInfoPleoraProtocol.SubID">
            <summary>Get the Sub ID of the Pleora Protocol device.</summary>
        </member>
        <member name="P:PvDotNet.PvDeviceInfoPleoraProtocol.ModuleID">
            <summary>Get the Module ID of the Pleora Protocol device.</summary>
        </member>
        <member name="P:PvDotNet.PvDeviceInfoPleoraProtocol.DeviceID">
            <summary>Get the Device ID of the Pleora Protocol device.</summary>
        </member>
        <member name="P:PvDotNet.PvDeviceInfoPleoraProtocol.DefaultGateway">
            <summary>Get the Pleora Protocol device's subnet mask; the <b>GevCurrentSubnetMask</b> feature. For the form, see #GetIPAddress.
</summary>
        </member>
        <member name="P:PvDotNet.PvDeviceInfoPleoraProtocol.SubnetMask">
            <summary>Get the Pleora Protocol device's default gateway; the <b>GevCurrentDefaultGateway</b> feature. For the form, see #GetIPAddress.
</summary>
        </member>
        <member name="P:PvDotNet.PvDeviceInfoPleoraProtocol.IPAddress">
            <summary>Get the Pleora Protocol device's current IP address; the <b>GevCurrentIPAddress</b> feature. The form is <i>a</i>.<i>b</i>.<i>c</i>.<i>d</i>, 
        where <i>a</i> through <i>d</i> are decimal numbers ranging from 0 to 255.
</summary>
        </member>
        <member name="P:PvDotNet.PvDeviceInfoPleoraProtocol.MACAddress">
            <summary>Get the Pleora Protocol device's MAC address, in the form <i>aa</i>-<i>bb</i>-<i>cc</i>-<i>dd</i>-<i>ee</i>-<i>ff</i>, 
        where <i>aa</i> through <i>ff</i> are uppercase hexadecimal numbers ranging from 0x00 to 0xFF.
</summary>
        </member>
        <member name="T:PvDotNet.PvDeviceInfoPleoraProtocol">
            <summary>Information about a Pleora Protocol device.</summary>
            <remark>The eBUS SDK allows enumerating devices using the Pleora protocol. However, it does not allow
connecting to or controlling these device.
</remark>
        </member>
        <member name="P:PvDotNet.PvDeviceInfoU3V.IsPleoraDriverInstalled">
            <summary>Returns true if the currently selected driver for the device is the Pleora driver.</summary>
        </member>
        <member name="P:PvDotNet.PvDeviceInfoU3V.MaxPower">
            <summary>Power consumption of the device in milliamp.</summary>
        </member>
        <member name="P:PvDotNet.PvDeviceInfoU3V.Speed">
            <summary>Returns the currently effective connection speed of the USB3 Vision device.</summary>
            <remark>
If a device supporting super speed is connected in a slower hub or controller it is
not able to negotiate up to its maximum supported speed.
</remark>

If a device IsSuperSpeedSupported returns true and GetSpeed returns something slower
look into the supported speed of the hubs chain to the controller or the controller itself.

</member>
        <member name="P:PvDotNet.PvDeviceInfoU3V.IsSuperSpeedSupported">
            <summary>Returns true if the device supports USB3 speed.</summary>
        </member>
        <member name="P:PvDotNet.PvDeviceInfoU3V.IsHighSpeedSupported">
            <summary>Returns true if the device supports USB2 speed.</summary>
        </member>
        <member name="P:PvDotNet.PvDeviceInfoU3V.IsFullSpeedSupported">
            <summary>Returns true if the device supports USB1.1 speed.</summary>
        </member>
        <member name="P:PvDotNet.PvDeviceInfoU3V.IsLowSpeedSupported">
            <summary>Returns true if the device supports USB1.0 speed.</summary>
        </member>
        <member name="P:PvDotNet.PvDeviceInfoU3V.U3VSerialNumber">
            <summary>Returns the USB 3 Vision serial number of the device.</summary>
        </member>
        <member name="P:PvDotNet.PvDeviceInfoU3V.FamilyName">
            <summary>Returns the family name of the device.</summary>
        </member>
        <member name="P:PvDotNet.PvDeviceInfoU3V.DeviceGUID">
            <summary>Get the USB3 Vision GUID of the device.</summary>
            <remark>
GUID stands for "Globally Unique Identifier". It is the USB3 Vision counterpart of 
the MAC of a GigE Vision device.
</remark>
        </member>
        <member name="P:PvDotNet.PvDeviceInfoU3V.U3VVersion">
            <summary>Get the USB3 Vision device's USB3 Vision protocol version.</summary>
            <remark>
The high 16 bits contain the major version and The low 16 bits the minor version.
</remark>
        </member>
        <member name="P:PvDotNet.PvDeviceInfoU3V.GenCPVersion">
            <summary>Get the USB3 Vision device's GenCP protocol version.</summary>
            <remark>
The high 16 bits contain the major version and The low 16 bits the minor version.
</remark>
        </member>
        <member name="T:PvDotNet.PvDeviceInfoU3V">
            <summary>Information about a USB3 Vision device.</summary>
        </member>
        <member name="M:PvDotNet.PvSerialPortConfiguration.MakeInvalid">
            <summary>
Makes the content of the object invalid.
</summary>
        </member>
        <member name="P:PvDotNet.PvSerialPortConfiguration.IsValid">
            <summary>
Validates the content of the object.
</summary>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><see cref="F:PvDotNet.PvResultCode.OK" /></item><item><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /> if a parameter is not properly set. Use <see cref="P:PvDotNet.PvResult.Description" /> to get more information.</item></list></exception>
        </member>
        <member name="P:PvDotNet.PvSerialPortConfiguration.StopBits">
            <summary>
Returns and sets the stop bits.
</summary>
        </member>
        <member name="P:PvDotNet.PvSerialPortConfiguration.ByteSize">
            <summary>
Returns and sets the byte size.
</summary>
        </member>
        <member name="P:PvDotNet.PvSerialPortConfiguration.Parity">
            <summary>
Returns and sets the parity bit.
</summary>
        </member>
        <member name="P:PvDotNet.PvSerialPortConfiguration.BaudRate">
            <summary>
Returns and sets the baud rate.
</summary>
        </member>
        <member name="M:PvDotNet.PvSerialPortConfiguration.Finalize">
            <summary>
Finalizer.
</summary>
        </member>
        <member name="M:PvDotNet.PvSerialPortConfiguration.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="M:PvDotNet.PvSerialPortConfiguration.#ctor(System.UInt32,PvDotNet.PvParity,System.UInt32,System.UInt32)">
            <summary>
Constructor fully configuring the object.
</summary>
            <param name="aBaudRate">The baud rate of COM port.</param>
            <param name="aParity">The parity bit of COM port.</param>
            <param name="aByteSize">The byte size of COM port.</param>
            <param name="aStopBits">The stop bit of COM port.</param>
        </member>
        <member name="M:PvDotNet.PvSerialPortConfiguration.#ctor">
            <summary>
Default constructor.
</summary>
        </member>
        <member name="T:PvDotNet.PvSerialPortConfiguration">
            <summary>
(PC side) COM port configuration to set on a PvSerialBridge.
</summary>
        </member>
        <member name="T:PvDotNet.PvParity">
            <summary>
Parity bit enumeration.
</summary>
        </member>
        <member name="F:PvDotNet.PvParity.Odd">
            <summary>
Odd parity bit.
</summary>
        </member>
        <member name="F:PvDotNet.PvParity.Even">
            <summary>
Even parity bit.
</summary>
        </member>
        <member name="F:PvDotNet.PvParity.None">
            <summary>
None parity bit.
</summary>
        </member>
        <member name="F:PvDotNet.PvParity.Invalid">
            <summary>
Invalid parity bit.
</summary>
        </member>
        <member name="M:PvDotNet.PvImageAnalysisMono.Save(PvDotNet.PvConfigurationWriter)">
            <summary>
Saves the configuration to a configuration file
</summary>
            <param name="aWriter">Configuration writer to which filter is saved.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvImageAnalysisMono.Load(PvDotNet.PvConfigurationReader)">
            <summary>
Loads the configuration from a configuration file
</summary>
            <param name="aReader">Configuration reader from which to load the configuration.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /></description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvImageAnalysisMono.ROI">
            <summary>
Region of interest on used to analyze the image. Only the pixels inside the region of interest
are considered.
</summary>
        </member>
        <member name="P:PvDotNet.PvImageAnalysisMono.StdDev">
            <summary>
Standard deviation of the pixels in the ROI in the last analyzed image.
</summary>
        </member>
        <member name="P:PvDotNet.PvImageAnalysisMono.Avg">
            <summary>
Average of the pixels in the ROI in the last analyzed image.
</summary>
        </member>
        <member name="M:PvDotNet.PvImageAnalysisMono.Reset">
            <summary>
Resets the configuration and results of the analysis object.
</summary>
        </member>
        <member name="M:PvDotNet.PvImageAnalysisMono.GetHistogram(System.UInt32@)">
            <summary>
Retrieves histogram information about the last processed image.
</summary>
            <remarks>
Copies the histogram data in a buffer. 
</remarks>
            <param name="aMaxValue">aMaxValue The maximum value for one histogram bin.</param>
            <returns>aHistogram Pointer to a buffer where to copy the histogram data.</returns>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.BUFFER_TOO_SMALL" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvImageAnalysisMono.Process(PvDotNet.PvBuffer)">
            <summary>
Analyze a buffer.
</summary>
            <remarks>
Computes the histogram, average, etc. on the input buffer. Use the class properties to 
retrieve the information about calling this method.
</remarks>
            <param name="aBuffer">Input image buffer.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_SUPPORTED" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvImageAnalysisMono.Finalize">
            <summary>
Finalizer.
</summary>
        </member>
        <member name="M:PvDotNet.PvImageAnalysisMono.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="M:PvDotNet.PvImageAnalysisMono.#ctor">
            <summary>
Constructor
</summary>
        </member>
        <member name="T:PvDotNet.PvImageAnalysisMono">
            <summary>
Performs image analyse on an image.
</summary>
            <remarks>
Call the Process method on a PvBuffer and the use accessors to retrieve information
extracted from the image.
</remarks>
        </member>
        <member name="M:PvDotNet.DisplayEngine.FireMouseOverPixel">

\brief Fires the mouse-over-pixel event

</member>
        <member name="M:PvDotNet.DisplayEngine.get_ROI">

\brief Returns the ROI

</member>
        <member name="M:PvDotNet.DisplayEngine.set_ROI(System.Drawing.Rectangle)">

\brief Sets the ROI programmatically

</member>
        <member name="M:PvDotNet.DisplayEngine.OnMouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">

\brief Mouse move event handler

</member>
        <member name="M:PvDotNet.DisplayEngine.OnMouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">

\brief Mouse move event handler

</member>
        <member name="M:PvDotNet.DisplayEngine.HandleROIPan(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">

\brief Handles ROI pan

aX, aY: mouse position in image coordinates

</member>
        <member name="M:PvDotNet.DisplayEngine.AnchorCoerceY">

\brief Checks ROI top vs bottom and flips them + anchor if needed

</member>
        <member name="M:PvDotNet.DisplayEngine.AnchorCoerceX">

\brief Checks ROI left vs right and flips them + anchor if needed

</member>
        <member name="M:PvDotNet.DisplayEngine.HandleROIY(System.Int32!System.Runtime.CompilerServices.IsLong)">

\brief Handles a new ROI Y-resizing

aX: mouse Y on image-coordinates

</member>
        <member name="M:PvDotNet.DisplayEngine.HandleROIX(System.Int32!System.Runtime.CompilerServices.IsLong)">

\brief Handles a new ROI X-resizing

aX: mouse X on image-coordinates

</member>
        <member name="M:PvDotNet.DisplayEngine.UpdateMouseCursor(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">

\brief Updates the mouse cursor if needed vs ROI anchors

aX, aY: cursor coordinates in client pixels

</member>
        <member name="M:PvDotNet.DisplayEngine.OnMouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">

\brief Mouse move event handler

</member>
        <member name="M:PvDotNet.DisplayEngine.DrawROI(HDC__*,System.Boolean)">

\brief Draws the ROI

</member>
        <member name="M:PvDotNet.DisplayEngine.ClientToROI(_Point*)">

\brief Converts a client point to a ROI point

</member>
        <member name="M:PvDotNet.DisplayEngine.ROIToClient(_Rect*)">

\brief Converts a ROI rectangle to a client rectangle

</member>
        <member name="M:PvDotNet.DisplayEngine.InvalidateROI">

\brief Refreshes the ROI

</member>
        <member name="M:PvDotNet.DisplayEngine.OnLostFocus(System.Object,System.EventArgs)">

\brief Lost focus event handler

</member>
        <member name="M:PvDotNet.DisplayEngine.OnGotFocus(System.Object,System.EventArgs)">

\brief Got focus handler

</member>
        <member name="M:PvDotNet.DisplayEngine.OnTimedEvent(System.Object,System.EventArgs)">

\brief Timer handler

</member>
        <member name="M:PvDotNet.DisplayEngine.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
OnPaintBackground event handler.
</summary>
            <param name="pevent">Paint event arguments.</param>
        </member>
        <member name="M:PvDotNet.DisplayEngine.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
OnMousWheel event handler.
</summary>
            <param name="e">Mouse event arguments.</param>
        </member>
        <member name="P:PvDotNet.DisplayEngine.HorizontalScroll">
            <summary>
Access to the display horizontal scroll bar.
</summary>
        </member>
        <member name="P:PvDotNet.DisplayEngine.VerticalScroll">
            <summary>
Access to the display vertical scroll bar.
</summary>
        </member>
        <member name="P:PvDotNet.DisplayEngine.ROI">
            <summary>
Interactive region of interest.
</summary>
        </member>
        <member name="M:PvDotNet.DisplayEngine.ClearROI">
            <summary>
Clears the interactive region of interest.
</summary>

\brief Clears (resets) the ROI

</member>
        <member name="M:PvDotNet.DisplayEngine.CreateROI">
            <summary>
Creates an interactive region of interest.
</summary>

\brief Enter mode where the mouse is used to create a new ROI

</member>
        <member name="F:PvDotNet.DisplayEngine.MouseOverPixel">
            <summary>
Mouse over pixel event.
</summary>
        </member>
        <member name="T:PvDotNet.DisplayEngine.MouseOverPixelHandler">
            <summary>
Mouse over an image pixel event delegate.
</summary>
            <param name="aX">X image coordinate, in pixels.</param>
            <param name="aY">X image coordinate, in pixels.</param>
        </member>
        <member name="F:PvDotNet.DisplayEngine.ROIChanged">
            <summary>
Region of interest changed event.
</summary>
        </member>
        <member name="T:PvDotNet.DisplayEngine.ROIChangedHandler">
            <summary>
ROI changed event delegate.
</summary>
            <param name="aROI">New region of interest.</param>
        </member>
        <member name="M:PvDotNet.DisplayEngine.OnSizeChanged(System.EventArgs)">
            <summary>
OnSizeChanged event handler.
</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:PvDotNet.DisplayEngine.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
OnPaint event handler.
</summary>
            <param name="e">Paint event arguments.</param>
        </member>
        <member name="P:PvDotNet.DisplayEngine.InternalBuffer">
            <summary>
Internal display buffer. Displaying a buffer converts it to RGB32. 
<remarks><para>If this buffer is needed for processing,
time can be saved by displaying the buffer and the accessing the display's internal buffer instead of 
explicitly converting the buffer and then displaying it.</para></remarks></summary>
        </member>
        <member name="P:PvDotNet.DisplayEngine.Converter">
            <summary>
Buffer converter used by the display. Can be accessed to configure the converter.
</summary>
        </member>
        <member name="P:PvDotNet.DisplayEngine.BackgroundColor">
            <summary>
Background color of the display.
</summary>
        </member>
        <member name="M:PvDotNet.DisplayEngine.GetTextOverlayOffsetY">
            <summary>
Gets the text overlay Y offset in the display.
</summary>
            <returns>Y offset in display pixels.</returns>
        </member>
        <member name="M:PvDotNet.DisplayEngine.SetTextOverlayOffsetY(System.Int32)">
            <summary>
Sets the offset in the display of the text overal.
</summary>
            <param name="aY">Y offset in display pixels.</param>
        </member>
        <member name="M:PvDotNet.DisplayEngine.GetTextOverlayOffsetX">
            <summary>
Gets the text overlay X offset in the display.
</summary>
            <returns>X offset in display pixels.</returns>
        </member>
        <member name="M:PvDotNet.DisplayEngine.SetTextOverlayOffsetX(System.Int32)">
            <summary>
Sets the offset in the display of the text overal.
</summary>
            <param name="aX">X offset in display pixels.</param>
        </member>
        <member name="M:PvDotNet.DisplayEngine.GetTextOverlaySize">
            <summary>
Gets the text overlay font size.
</summary>
            <returns>Text overlay font size, in points.</returns>
        </member>
        <member name="M:PvDotNet.DisplayEngine.SetTextOverlaySize(System.Int32)">
            <summary>
Sets the font size of the text overlay.
</summary>
            <param name="aSize">The font size, in points of the text overlay.</param>
            <returns>Result indicating the success (or failure of the operation).</returns>
        </member>
        <member name="M:PvDotNet.DisplayEngine.GetTextOverlayColor">
            <summary>
Gets the text overlay color.
</summary>
            <returns>Text overlay color.</returns>
        </member>
        <member name="M:PvDotNet.DisplayEngine.SetTextOverlayColor(System.Drawing.Color)">
            <summary>
Sets the text overlay color.
</summary>
            <param name="aColor">The color of the text overlay.</param>
        </member>
        <member name="M:PvDotNet.DisplayEngine.GetTextOverlay">
            <summary>
Gets the current text overlay content.
</summary>
            <returns>Text overlay content.</returns>
        </member>
        <member name="M:PvDotNet.DisplayEngine.SetTextOverlay(System.String)">
            <summary>
Sets a text overlay.
</summary>
            <param name="aText">The text to display as an overlay.</param>
        </member>
        <member name="M:PvDotNet.DisplayEngine.CenterHere(System.Int32,System.Int32)">
            <summary>
Centers the display to an image coordinate.
</summary>
            <param name="aX">X coordinate.</param>
            <param name="aY">Y coordinate.</param>
        </member>
        <member name="M:PvDotNet.DisplayEngine.ZoomOut">
            <summary>
Zooms out by one tick.
</summary>
        </member>
        <member name="M:PvDotNet.DisplayEngine.ZoomIn">
            <summary>
Zooms in by one tick.
</summary>
        </member>
        <member name="M:PvDotNet.DisplayEngine.Zoom1To1">
            <summary>
Sets the zoom factor so one image pixel equals one display pixel.
</summary>
        </member>
        <member name="M:PvDotNet.DisplayEngine.ZoomFit">
            <summary>
Sets the zoom factor so the whole image is displayed.
</summary>
        </member>
        <member name="M:PvDotNet.DisplayEngine.Clear">
            <summary>
Clears the display.
</summary>
        </member>
        <member name="M:PvDotNet.DisplayEngine.Display(PvDotNet.PvBuffer)">
            <summary>
Displays a buffer.
</summary>
            <param name="aBuffer">The buffer to display. Must contain an image.</param>
            <returns>Result indicating the success (or failure of the operation).</returns>
        </member>
        <member name="M:PvDotNet.DisplayEngine.Finalize">
            <summary>
Finalizer.
</summary>
        </member>
        <member name="M:PvDotNet.DisplayEngine.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="M:PvDotNet.DisplayEngine.#ctor">
            <summary>
Constructor.
</summary>
        </member>
        <member name="T:PvDotNet.DisplayEngine">
            <summary>
Base class (and implementation of the PvDisplayControl class.
</summary>
        </member>
        <member name="F:PvDotNet.PvVersion.BUILD">
            <summary>
Major version. D in vA.B.C.D.
</summary>
        </member>
        <member name="F:PvDotNet.PvVersion.SUB">
            <summary>
Major version. C in vA.B.C.D.
</summary>
        </member>
        <member name="F:PvDotNet.PvVersion.MINOR">
            <summary>
Major version. B in vA.B.C.D.
</summary>
        </member>
        <member name="F:PvDotNet.PvVersion.MAJOR">
            <summary>
Major version. A in vA.B.C.D.
</summary>
        </member>
        <member name="F:PvDotNet.PvVersion.VERSION">
            <summary>
Complete version string.
</summary>
        </member>
        <member name="F:PvDotNet.PvVersion.COMMENT">
            <summary>
Comment.
</summary>
        </member>
        <member name="F:PvDotNet.PvVersion.TRADEMARK">
            <summary>
Trademark string.
</summary>
        </member>
        <member name="F:PvDotNet.PvVersion.COPYRIGHT">
            <summary>
Copyright string.
</summary>
        </member>
        <member name="F:PvDotNet.PvVersion.PRODUCT">
            <summary>
Product name.
</summary>
        </member>
        <member name="F:PvDotNet.PvVersion.LICENSING_STRING">
            <summary>
Licensing string.
</summary>
        </member>
        <member name="F:PvDotNet.PvVersion.COMPANY_NAME">
            <summary>
Company name.
</summary>
        </member>
        <member name="T:PvDotNet.PvVersion">
            <summary>
Static strings providing version information about the eBUS SDK.
</summary>
        </member>
        <member name="P:PvDotNet.PvDeviceInfoUSB.Status">
            <summary>Returns the enumeration status of the USB device.</summary>
            <return>Current enumeration status.</return>
        </member>
        <member name="T:PvDotNet.PvDeviceInfoUSB">
            <summary>Information about a generic USB device.</summary>
        </member>
        <member name="T:PvDotNet.PvUSBStatus">
            <summary>
USB device status.
</summary>
        </member>
        <member name="F:PvDotNet.PvUSBStatus.Reset">
            <summary>
                <para>Resets USB device.</para>
            </summary>
        </member>
        <member name="F:PvDotNet.PvUSBStatus.Enumerating">
            <summary>
                <para>USB device is enumerating.</para>
            </summary>
        </member>
        <member name="F:PvDotNet.PvUSBStatus.InLegacyHub">
            <summary>
                <para>USB device is in legacy hub.</para>
            </summary>
        </member>
        <member name="F:PvDotNet.PvUSBStatus.HubNestedTooDeeply">
            <summary>
                <para>USB hub is nested too deeply.</para>
            </summary>
        </member>
        <member name="F:PvDotNet.PvUSBStatus.NotEnoughBandwidth">
            <summary>
                <para>USB device does not have enough bandwidth.</para>
            </summary>
        </member>
        <member name="F:PvDotNet.PvUSBStatus.NotEnoughPower">
            <summary>
                <para>USB device does not have enough power.</para>
            </summary>
        </member>
        <member name="F:PvDotNet.PvUSBStatus.CausedOvercurrent">
            <summary>
                <para>USB device is caused over current.</para>
            </summary>
        </member>
        <member name="F:PvDotNet.PvUSBStatus.GeneralFailure">
            <summary>
                <para>USB device general failure.</para>
            </summary>
        </member>
        <member name="F:PvDotNet.PvUSBStatus.FailedEnumeration">
            <summary>
                <para>USB device failed to enumerate.</para>
            </summary>
        </member>
        <member name="F:PvDotNet.PvUSBStatus.Connected">
            <summary>
                <para>USB device is connected.</para>
            </summary>
        </member>
        <member name="F:PvDotNet.PvUSBStatus.NotInitialized">
            <summary>
                <para>USB device is not initialized.</para>
            </summary>
        </member>
        <member name="M:PvDotNet.PvDeviceI2CBus.IndirectBurstRead(System.Byte,System.Byte,System.UInt32,System.Boolean,System.Boolean)">
            <summary>
Retrieve a reply from a camera (for cameras with memory offsets).
</summary>
            <param name="aSlaveAddress">The camera's I2C slave address (7-bits).</param>
            <param name="aOffset">The address offset of the slave in question.</param>
            <param name="aReadBufferSize">The size of the internal read buffer. Set to the maximum of bytes that can be received on a single read operation.</param>
            <param name="aFastMode">The I2C bus speed. Default value is True for I2C's <i>Fast mode</i> (400 Kbits/s); false for <i>Standard mode</i> (100 Kbits/s).</param>
            <param name="aUseCombinedFormat">True if a stop should be issued between the write and read sequence; false if no stop is required.</param>
            <returns>A byte array containing the bytes read from the I2C bus.</returns>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:	
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_INITIALIZED" /> if the port is not initialized. </description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /> if the port is not opened or the associated PvDevice is no longer connected. </description></item><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> if not all bytes could be written to the serial port. </description></item><item><description>TIMEOUT if no data is available after calling this method. </description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvDeviceI2CBus.BurstRead(System.Byte,System.UInt32,System.Boolean)">
            <summary>
Retrieve a reply from a camera.
</summary>
            <remarks>
                <para>There is one overload for this method with default argument parameter bool aFastMode ( The I2C bus speed. Default value is True for I2C's <i>Fast mode</i> (400 Kbits/s); false for <i>Standard mode</i> (100 Kbits/s).</para>
            </remarks>
            <param name="aSlaveAddress">The camera's I2C slave address (7-bits).</param>
            <param name="aReadBufferSize">The size of the internal read buffer. Set to the maximum of bytes that can be received on a single read operation.</param>
            <param name="aFastMode">The I2C bus speed. Default value is True for I2C's <i>Fast mode</i> (400 Kbits/s); false for <i>Standard mode</i> (100 Kbits/s).</param>
            <returns>A byte array containing the bytes read from the I2C bus.</returns>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:	
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_INITIALIZED" /> if the port is not initialized. </description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /> if the port is not opened or the associated PvDevice is no longer connected. </description></item><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> if not all bytes could be written to the serial port. </description></item><item><description>TIMEOUT if no data is available after calling this method. </description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvDeviceI2CBus.IndirectBurstWrite(System.Byte,System.Byte,System.Byte[],System.Boolean)">
            <summary>
Send a command to the camera (for cameras with memory offsets).
</summary>
            <remarks>
                <para>Before using this method, see BurstWrite.</para>
The IndirectBurstWrite method is very similar to the BurstWrite method, with the following exceptions: 
<list type="bullet"><item><description>This method includes a memory offset, <i>aOffset</i>, that lets you write to a series of memory addresses in the camera. </description></item></list></remarks>
            <param name="aSlaveAddress">The camera's I2C slave address (7-bits).</param>
            <param name="aOffset">The address offset of the slave in question.</param>
            <param name="aBytes">Data being written on the I2C bus.</param>
            <param name="aFastMode">The I2C bus speed. Default value is True for I2C's <i>Fast mode</i> (400 Kbits/s); false for <i>Standard mode</i> (100 Kbits/s).</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_INITIALIZED" /> if the port is not initialized. </description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /> if the port is not opened or the associated PvDevice is no longer connected. </description></item><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> if not all bytes could be written to the serial port. </description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvDeviceI2CBus.BurstWrite(System.Byte,System.Byte[],System.Boolean)">
            <summary>
Send a command to the camera. 
</summary>
            <remarks>
Before using BurstWrite, confirm it meets your camera's requirements: 
<list type="bullet"><item><description>If your I2C-capable camera uses a single memory location (for the entire streamed message, use BurstWrite and BurstRead. </description></item><item><description>If it uses sequential memory (storing messages in a series of bytes in memory), use IndirectBurstWrite and IndirectBurstRead. </description></item><para>The BurstWrite method sends a message, <i>aBuffer</i>, to the I2C-capable camera defined by <i>aSlaveAddress</i>.</para><para>If the camera doesn't acknowledge a byte during the burst write, BurstWrite terminates early, but returns PV_RESULT_OK.</para></list></remarks>
            <param name="aSlaveAddress">The camera's I2C slave address (7-bits).</param>
            <param name="aBytes">Data being written on the I2C bus.</param>
            <param name="aFastMode">The I2C bus speed. Default value is True for I2C's <i>Fast mode</i> (400 Kbits/s); false for <i>Standard mode</i> (100 Kbits/s).</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_INITIALIZED" /> if the port is not initialized. </description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /> if the port is not opened or the associated PvDevice is no longer connected. </description></item><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> if not all bytes could be written to the serial port. </description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvDeviceI2CBus.IsSupported(PvDotNet.PvDevice,PvDotNet.PvDeviceSerial)">
            <summary>
aDevice/aPort supported I2C?
</summary>
            <param name="aDevice">Handle to PvDevice.</param>
            <param name="aPort">PvIPengineSerial port</param>
            <returns>
true - aDevice/aPort supported I2C.
false - aDevice and aPort does not support I2C.
</returns>
        </member>
        <member name="M:PvDotNet.PvDeviceI2CBus.IsOpened">
            <summary>
Is the device opened?
</summary>
            <returns>
true - The device is opened.
false - The device is closed.
</returns>
        </member>
        <member name="M:PvDotNet.PvDeviceI2CBus.Close">
            <summary>
Close the IP serial port connection. 
</summary>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_SUPPORTED" /> if the device/port is not supported. </description></item><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /> if the device/port is invalid. </description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvDeviceI2CBus.Open(PvDotNet.PvDevice,PvDotNet.PvDeviceSerial)">
            <summary>
Open the IP serial port to connect to the camera.
</summary>
            <param name="aDevice">Handle to PvDevice object.</param>
            <param name="aPort">Serial port interface. Default is bulk interface 0</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_SUPPORTED" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvDeviceI2CBus.Finalize">
            <summary>
Finalizer.
</summary>
        </member>
        <member name="M:PvDotNet.PvDeviceI2CBus.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="M:PvDotNet.PvDeviceI2CBus.#ctor">
            <summary>
Constructor.
</summary>
        </member>
        <member name="T:PvDotNet.PvDeviceI2CBus">
            <summary>
I2C serial controller.
</summary>
            <remarks>
                <para>The PvDeviceI2CBus lets you send commands to your camera and receive the camera's replies.</para>
                <para>I2C uses the concept of a master and slave, where the master controls the clock
and initiates reads and writes. For PvDeviceI2CBus, the video interface is the I2C master. 
The I2C slave is <i>typically</i> a camera, but could be any I2C-capable device connected
to the video interface.</para>
                <para>The PvDeviceI2CBus methods manage the entire
video interface and camera communication required to send a message to the camera.
For example, the BurstWrite method involves the following transaction:
<list type="number"><item><description>PC calls BurstWrite. </description></item><item><description>PC passes entire message to the video interface via Ethernet. </description></item><item><description>BurstWrite blocks. </description></item><item><description>video interface to camera: [Start condition] <i>aSlaveAddress</i> [Write - SDA low]. </description></item><item><description>Camera to video interface: Acknowledge. </description></item><item><description>video interface to camera: [First 8 bits of <i>aBuffer</i>]. </description></item><item><description>Camera to video interface: Acknowledge. </description></item><item><description>video interface to camera: [Next 8 bits of <i>aBuffer</i>]. </description></item><item><description>Camera to video interface: Acknowledge. </description></item><item><description>... </description></item><item><description>video interface to camera: [Last 8 bits of <i>aBuffer</i>]. </description></item><item><description>Camera to video interface: Acknowledge. </description></item><item><description>video interface to camera: [Stop condition]. </description></item><item><description>video interface reports the successful transmission of the message to the PC (via Ethernet). </description></item><item><description>BurstWrite method unblocks (returns). </description></item></list></para>
                <para>For the complete hardware-level transactions for all PvDeviceI2CBus methods, see your
hardware guide.</para>
                <para>
                    <b>To send I2C-protocol serial commands to your camera:</b>
                    <list type="number">
                        <item>
                            <description>Create an I2C serial controller of the PvDeviceI2CBus class. </description>
                        </item>
                        <item>
                            <description>Send a command to the camera. Use BurstWrite. </description>
                        </item>
                        <item>
                            <description>Test to ensure the message send succeeded. Check the PvResult returned by BurstWrite. </description>
                        </item>
                        <item>
                            <description>Retrieve the camera's reply. Use BurstRead. </description>
                        </item>
                        <item>
                            <description>Test to ensure the message retrieval succeeded. Check the PvResult returned by BurstRead. </description>
                        </item>
                        <item>
                            <description>Test the <i>content</i> of the message from the camera. Use <i>aBuffer</i> and <i>aBufferSize</i> parameters and your own code. </description>
                        </item>
                    </list>
                </para>
                <para>For a simple example illustrating how to use PvDeviceI2CBus, refer to the sample entitled PvI2CSample.</para>
            </remarks>
        </member>
        <member name="E:PvDotNet.PvDisplayThread.OnBufferTextOverlay">
            <summary>
Provides a text overlay for the buffer about to be displayed.
</summary>
            <remarks>
                <para>The display thread only generate the overlay update events. What to do with the overlay
is left to the code handling this event.</para>
                <para>See delegate documentation for more information.</para>
            </remarks>
        </member>
        <member name="E:PvDotNet.PvDisplayThread.OnBufferLog">
            <summary>
When buffer logging is enabled, log entries are reported using this event.
</summary>
            <remarks>
                <para>The display thread only generate log events. How logging is performed is the responsibility
of the application using the display thread.</para>
                <para>See delegate documentation for more information.</para>
            </remarks>
        </member>
        <member name="E:PvDotNet.PvDisplayThread.OnBufferDone">
            <summary>
The display thread has finished handling a buffer.
</summary>
            <remarks>
                <para>See delegate documentation for more information.</para>
            </remarks>
        </member>
        <member name="E:PvDotNet.PvDisplayThread.OnBufferDisplay">
            <summary>
A buffer needs to be displayed.
</summary>
            <remarks>
                <para>If the acquisition frame rate is higher than the target FPS some buffers
may end up not being displayed.</para>
                <para>Additional processing may be performed before displaying the image. This
step is optional and left to the application. The display thread does not perform
image processing.</para>
                <para>If interlacing is enabled and an interlaced stream is handled by the display
thread, the final buffer being displayed is a buffer that is not directly retrieved
from the pipeline (and reported through OnBufferRetrieved). It is a buffer owned
by the display thread used for image reconstruction from received field buffers.</para>
                <para>See delegate documentation for more information.</para>
            </remarks>
        </member>
        <member name="E:PvDotNet.PvDisplayThread.OnBufferRetrieved">
            <summary>
A buffer was retrieved from the PvPipeline.
</summary>
            <remarks>
                <para>If interlacing is enabled and an interlaced stream is handled by the display
thread, the final buffer being displayed is a buffer that is not directly retrieved
from the pipeline (and reported through OnBufferRetrieved). It is a buffer owned
by the display thread used for image reconstruction from received field buffers.</para>
                <para>See delegate documentation for more information.</para>
            </remarks>
        </member>
        <member name="M:PvDotNet.PvDisplayThread.Load(System.Collections.Generic.List`1{PvDotNet.PvProperty})">
            <summary>
Restores a display thread options.
</summary>
            <remarks>
                <para>The load works on a best effort basis. Whatever can be restored will be restored.</para>
                <para>The order to properties in the aPropertyList is not important.</para>
                <para>Defined as virtual. Can override in order to load configuration
specific to specialized classes.</para>
            </remarks>
            <param name="aPropertyList">A list of name/value pairs.</param>
        </member>
        <member name="M:PvDotNet.PvDisplayThread.Save(System.Collections.Generic.List`1{PvDotNet.PvProperty})">
            <summary>
Persists the display thread configuration.
</summary>
            <remarks>
                <para>This call builds a list of properties containing pairs of names/values.</para>
                <para>Defined as virtual. Can override in order to save configuration
specific to specialized classes. Call the base implementation first.</para>
            </remarks>
            <param name="aPropertyList">A list of name/value pairs.</param>
        </member>
        <member name="M:PvDotNet.PvDisplayThread.ResetStatistics">
            <summary>
Resets the thread display statistics.
</summary>
        </member>
        <member name="P:PvDotNet.PvDisplayThread.TapGeometry">
            <summary>
Sets the tap geometry to be used to tap reconstruction.
</summary>
            <remarks>
If set to a valid tap geometry, tap reconstruction is performed before
displaying the image. Use PvTapGeometry.Unknown to disable - which is also the default.
</remarks>
        </member>
        <member name="P:PvDotNet.PvDisplayThread.DisplayChunkDataEnabled">
            <summary>
Sets if the data chunks should be displayed as a text overlay.
</summary>
            <remarks>
                <para>The specialized class must implement the right overloaded method in order
to receive text overlay updates from this class.</para>
            </remarks>
        </member>
        <member name="P:PvDotNet.PvDisplayThread.VSyncEnabled">
            <summary>
Vertical synchronization flag.
</summary>
            <remarks>
                <para>The display thread does not use this flag, it only keeps it value so it can
be read by specialized classes to request a vertical synchronization when
a buffer is displayed.</para>
                <para>This flag will only have an effect if it is used when the specialized class.
Not all display implementations support vertical synchronization.</para>
            </remarks>
        </member>
        <member name="P:PvDotNet.PvDisplayThread.TargetFPS">
            <summary>
Target displayed frames per second.
</summary>
            <remarks>
If the acquisition frame rate is higher than TargetFPS frames are dropped and not displayed.
OnBufferDisplay is only invoked on frames that need to be displayed in order to meet TargetFPS.
</remarks>
        </member>
        <member name="P:PvDotNet.PvDisplayThread.FPS">
            <summary>
Returns the effective displayed frames per second.
</summary>
        </member>
        <member name="P:PvDotNet.PvDisplayThread.Deinterlacing">
            <summary>
How interlaced fields are handled by the display thread.
</summary>
        </member>
        <member name="P:PvDotNet.PvDisplayThread.BufferLogAllEnabled">
            <summary>
If true, log events are generated for all buffers.
</summary>
        </member>
        <member name="P:PvDotNet.PvDisplayThread.BufferLogErrorEnabled">
            <summary>
If true, log events are generated for buffer errors.
</summary>
        </member>
        <member name="P:PvDotNet.PvDisplayThread.KeepPartialImagesEnabled">
            <summary>
If true, attempts to display images with missing packets or lines.
</summary>
        </member>
        <member name="M:PvDotNet.PvDisplayThread.ReleaseLatestBuffer">
            <summary>
If true, attempts to display images with missing packets or lines.
</summary>
        </member>
        <member name="M:PvDotNet.PvDisplayThread.RetrieveLatestBuffer">
            <summary>
Returns the latest buffer and blocks the pipeline while the buffer is accessed. MUST call ReleaseLatestBuffer when done.
</summary>
            <remarks>
                <para>This method should not be on each and every buffers. Use the callbacks instead. A PvBuffer managed wrapper
is created on each call to RetrieveLatestBuffer and the display thread is blocked until ReleaseLatestBuffer.</para>
                <para>A valid example of RetrieveLatestBuffer would be getting the last acquired image in order to 
perform on white balance on a RGB filter that is handled outside of the display thread.</para>
            </remarks>
            <returns>The latest buffer.</returns>
        </member>
        <member name="P:PvDotNet.PvDisplayThread.Priority">
            <summary>
Display thread priority.
</summary>
        </member>
        <member name="P:PvDotNet.PvDisplayThread.IsRunning">
            <summary>
True if the thread is running.
</summary>
        </member>
        <member name="M:PvDotNet.PvDisplayThread.WaitComplete">
            <summary>
Waits for the display thread to terminate.
</summary>
        </member>
        <member name="M:PvDotNet.PvDisplayThread.Stop(System.Boolean)">
            <summary>
Stops the display thread.
</summary>
            <param name="aWait">If true, waits for the thread to terminate. If false you can use WaitComplete.</param>
        </member>
        <member name="M:PvDotNet.PvDisplayThread.Start(PvDotNet.PvPipeline,PvDotNet.PvGenParameterArray)">
            <summary>
Starts the display thread.
</summary>
            <param name="aPipeline">PvPipeline the display thread is working from.</param>
            <param name="aParameters">Optional parameters. Specify to have the display thread manage data chunks.</param>
        </member>
        <member name="M:PvDotNet.PvDisplayThread.Finalize">
            <summary>
Finalizer.
</summary>
        </member>
        <member name="M:PvDotNet.PvDisplayThread.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="M:PvDotNet.PvDisplayThread.#ctor">
            <summary>
Constructor.
</summary>
        </member>
        <member name="T:PvDotNet.PvDisplayThread">
            <summary>
Thread taking buffers out of a PvPipeline in order to display them.
</summary>
            <remarks>
Register delegates to the events of a PvDisplayThread in order to receive notifications.
The most common use of the display thread requires to register the OnBufferDisplay
and handle buffer displaying in the handler.
</remarks>
        </member>
        <member name="T:PvDotNet.OnBufferTextOverlay">
            <summary>
PvDisplayThread buffer text overlay is updated event delegate.
</summary>
            <param name="aDisplayThread">Reference to the display thread object that invoked the delegate.</param>
            <param name="aText">Text overlay generated by the display thread handling the current buffer.</param>
        </member>
        <member name="T:PvDotNet.OnBufferLog">
            <summary>
PvDisplayThread buffer log entry was generated event delegate.
</summary>
            <param name="aDisplayThread">Reference to the display thread object that invoked the delegate.</param>
            <param name="aLog">Log entry generated by the display thread handling the current buffer.</param>
        </member>
        <member name="T:PvDotNet.OnBufferDone">
            <summary>
PvDisplayThread finished using a buffer event delegate.
</summary>
            <param name="aDisplayThread">Reference to the display thread object that invoked the delegate.</param>
            <param name="aBuffer">Reference to the buffer.</param>
        </member>
        <member name="T:PvDotNet.OnBufferDisplay">
            <summary>
PvDisplayThread buffer needs to be displayed event delegate.
</summary>
            <param name="aDisplayThread">Reference to the display thread object that invoked the delegate.</param>
            <param name="aBuffer">Reference to the buffer.</param>
        </member>
        <member name="T:PvDotNet.OnBufferRetrieved">
            <summary>
PvDisplayThread buffer was retrieved from the PvPipeline event delegate.
</summary>
            <param name="aDisplayThread">Reference to the display thread object that invoked the delegate.</param>
            <param name="aBuffer">Reference to the buffer.</param>
        </member>
        <member name="T:PvDotNet.PvDeinterlacingType">
            <summary>
Deinterlacing type. 
</summary>
        </member>
        <member name="F:PvDotNet.PvDeinterlacingType.LineDoubling">
            <summary>
Each incoming field has its lines doubled at full acquisition rate.
</summary>
        </member>
        <member name="F:PvDotNet.PvDeinterlacingType.Blending">
            <summary>
Lines of consecutive fields are blended (averaged) and then doubled at full acquisition rate.
</summary>
        </member>
        <member name="F:PvDotNet.PvDeinterlacingType.WeavingFull">
            <summary>
Incoming fields are weaved together at full acquisition rate.
</summary>
        </member>
        <member name="F:PvDotNet.PvDeinterlacingType.WeavingHalf">
            <summary>
Consecutive fields are weaved together at 1/2 their acquisition rate.
</summary>
        </member>
        <member name="F:PvDotNet.PvDeinterlacingType.Disabled">
            <summary>
No deinterlacing is performed on interlaced fields.
</summary>
        </member>
        <member name="P:PvDotNet.PvRangeFilter.Converter">
            <summary>
Reference to the internal buffer converter.
</summary>
            <remarks>
Before performing range analysis or filtering the input buffer may be converted to a different pixel format. The converter
used for this operation can be configured using this property. As an example, a RGB filter could be set or the Bayer
interpolation method could be selected.
</remarks>
        </member>
        <member name="M:PvDotNet.PvRangeFilter.Save(PvDotNet.PvConfigurationWriter)">
            <summary>
Saves the filter configuration to a configuration file.
</summary>
            <param name="aWriter">Configuration writer to which filter configuration is saved.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvRangeFilter.Load(PvDotNet.PvConfigurationReader)">
            <summary>
Loads the filter configuration from a configuration file.
</summary>
            <param name="aReader">Configuration reader from which to load the filter configuration.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /></description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvRangeFilter.Light">
            <summary>
Light threshold for the filter. Must be between 1 and 255 and larger than the dark threshold.
</summary>
        </member>
        <member name="P:PvDotNet.PvRangeFilter.Dark">
            <summary>
Dark threshold for the filter. Must be between 0 and 254 and smaller than the light threshold.
</summary>
        </member>
        <member name="P:PvDotNet.PvRangeFilter.Enabled">
            <summary>
Returns whether the filter is enabled.
</summary>
        </member>
        <member name="M:PvDotNet.PvRangeFilter.AutoConfigure">
            <summary>
Automatically configures the minimum and maximum thresholds to the lightest and darkest pixel values 
in the image using the latest available histogram information available.
</summary>
        </member>
        <member name="M:PvDotNet.PvRangeFilter.Reset">
            <summary>
Resets the filter.
</summary>
            <remarks>
Disables the filter and resets the minimum and maximum thresholds to 0 and 255.
</remarks>
        </member>
        <member name="M:PvDotNet.PvRangeFilter.GetHistogram(System.UInt32@)">
            <summary>
Retrieves histogram information for the last processed image.
</summary>
            <remarks>
Copies the histogram data into an array. The array must be large enough to hold 256 elements. 
Note: If the array is capable of holding more than 256 elements, the eBUS SDK will only fill the first 
256 elements of the array. 
</remarks>
            <param name="aMaxValue">aMaxValue The highest value stored in the array.</param>
            <returns>aHistogram Pointer to the array to copy the histogram data to.</returns>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.BUFFER_TOO_SMALL" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvRangeFilter.Process(PvDotNet.PvBuffer)">
            <summary>
Applies the range filter to an image in a buffer.
</summary>
            <remarks>
If the filter is disabled, the input buffer is returned. If the filter is enabled, 
the range filter is applied and a pointer to the buffer containing the processed
data is returned.
</remarks>
            <param name="aBuffer">Input image buffer.</param>
            <returns>The processed buffer if enabled, the input buffer if disabled.</returns>
        </member>
        <member name="M:PvDotNet.PvRangeFilter.Finalize">
            <summary>
Finalizer.
</summary>
        </member>
        <member name="M:PvDotNet.PvRangeFilter.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="M:PvDotNet.PvRangeFilter.#ctor">
            <summary>
Constructor.
</summary>
        </member>
        <member name="T:PvDotNet.PvRangeFilter">
            <summary>
Increases the contrast of displayed images and exported H.264 video by constraining the image to a minimum 
and maximum range of pixel values. Provides a histogram to analyze the dynamic range.
</summary>
        </member>
        <member name="M:PvDotNet.PvActionCommand.ResetStatistics">
            <summary>Resets the statistics counters of the action command object.</summary>
        </member>
        <member name="P:PvDotNet.PvActionCommand.ActionAckStatusNoRefTimeCount">
            <summary>Count of status No Ref Time acknowledgements received since the object was created or since ResetStatistics was last called.</summary>
        </member>
        <member name="P:PvDotNet.PvActionCommand.ActionAckStatusOverflowCount">
            <summary>Count of status Overflow acknowledgements received since the object was created or since ResetStatistics was last called.</summary>
        </member>
        <member name="P:PvDotNet.PvActionCommand.ActionAckStatusLateCount">
            <summary>Count of status Late acknowledgements received since the object was created or the last time ResetStatistics was called.</summary>
        </member>
        <member name="P:PvDotNet.PvActionCommand.ActionAckStatusOKCount">
            <summary>Count of status OK acknowledgements received since the object was created or since ResetStatistics was last called.</summary>
        </member>
        <member name="M:PvDotNet.PvActionCommand.GetAcknowledgementStatus(System.UInt32)">
            <summary>Returns the status of the acknowledgement at index aIndex for the last Send.</summary>
            <param name="aIndex">Zero-based value up to GetAcknowledgementCount.</param>
            <returns>The requested acknowledgement status.</returns>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvActionCommand.GetAcknowledgementIPAddress(System.UInt32)">
            <summary>For the last Send, returns the IP address from which the acknowledgement at aIndex was sent.</summary>
            <param name="aIndex">Zero-based value up to GetAcknowledgementCount.</param>
            <returns>The requested IP address.</returns>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /></description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvActionCommand.AcknowledgementCount">
            <summary>Returns the number of acknowledgements that have been received since the last Send.</summary>
            <remarks>
                <para>If the Send method did not request acknowledgements, this method returns 0. Acknowledgements 
received after the Send method’s aTimeout has expired are not counted.</para>
            </remarks>
            <returns>Number of acknowledgements.</returns>
        </member>
        <member name="M:PvDotNet.PvActionCommand.Resend(System.UInt32,System.UInt32,System.Boolean)">
            <summary>Resends the action command using the same request ID.</summary>
            <remarks>
                <para>An application that receives an action command with the same request ID will acknowledge it 
but not execute the action if it was previously received.</para>
                <para>Resends are not managed automatically, as different applications may have different requirements 
for resending action commands. Resends need to be explicitly managed and performed when acknowledgements 
are missing.</para>
            </remarks>
            <param name="aTimeout">Maximum time to wait for answers in ms.</param>
            <param name="aDeviceCount">If different than zero, Send can return as soon as aDeviceCount acknowledgements have been received without having to wait for aTimeout.</param>
            <param name="aRequestAcknowledgements">Asks the devices for acknowledgements of the action command.</param>
            <returns>
                <list type="bullet">
                    <item>
                        <description>
                            <see cref="F:PvDotNet.PvResultCode.OK" />
                        </description>
                    </item>
                    <item>
                        <description>
                            <see cref="F:PvDotNet.PvResultCode.NOT_INITIALIZED" /> if the command was never sent before Resend was called.</description>
                    </item>
                    <item>
                        <description>
                            <see cref="F:PvDotNet.PvResultCode.STATE_ERROR" /> if the content of the command has changed since the last Send operation. A resend cannot be performed if the command is not exactly the same.</description>
                    </item>
                    <item>
                        <description>
                            <see cref="F:PvDotNet.PvResultCode.TIMEOUT" /> if the provided timeout expired before the reception of all the acknowledgements were received.</description>
                    </item>
                </list>
            </returns>
        </member>
        <member name="M:PvDotNet.PvActionCommand.Resend(System.UInt32,System.UInt32)">
            <summary>Resends the action command using the same request ID.</summary>
            <remarks>
                <para>An application that receives an action command with the same request ID will acknowledge it 
but not execute the action if it was previously received.</para>
                <para>Resends are not managed automatically, as different applications may have different requirements 
for resending action commands. Resends need to be explicitly managed and performed when acknowledgements 
are missing.</para>
            </remarks>
            <param name="aTimeout">Maximum time to wait for answers in ms.</param>
            <param name="aDeviceCount">If different than zero, Send can return as soon as aDeviceCount acknowledgements have been received without having to wait for aTimeout.</param>
            <returns>
                <list type="bullet">
                    <item>
                        <description>
                            <see cref="F:PvDotNet.PvResultCode.OK" />
                        </description>
                    </item>
                    <item>
                        <description>
                            <see cref="F:PvDotNet.PvResultCode.NOT_INITIALIZED" /> if the command was never sent before Resend was called.</description>
                    </item>
                    <item>
                        <description>
                            <see cref="F:PvDotNet.PvResultCode.STATE_ERROR" /> if the content of the command has changed since the last Send operation. A resend cannot be performed if the command is not exactly the same.</description>
                    </item>
                    <item>
                        <description>
                            <see cref="F:PvDotNet.PvResultCode.TIMEOUT" /> if the provided timeout expired before the reception of all the acknowledgements were received.</description>
                    </item>
                </list>
            </returns>
        </member>
        <member name="M:PvDotNet.PvActionCommand.Resend(System.UInt32)">
            <summary>Resends the action command using the same request ID.</summary>
            <remarks>
                <para>An application that receives an action command with the same request ID will acknowledge it 
but not execute the action if it was previously received.</para>
                <para>Resends are not managed automatically, as different applications may have different requirements 
for resending action commands. Resends need to be explicitly managed and performed when acknowledgements 
are missing.</para>
            </remarks>
            <param name="aTimeout">Maximum time to wait for answers in ms.</param>
            <returns>
                <list type="bullet">
                    <item>
                        <description>
                            <see cref="F:PvDotNet.PvResultCode.OK" />
                        </description>
                    </item>
                    <item>
                        <description>
                            <see cref="F:PvDotNet.PvResultCode.NOT_INITIALIZED" /> if the command was never sent before Resend was called.</description>
                    </item>
                    <item>
                        <description>
                            <see cref="F:PvDotNet.PvResultCode.STATE_ERROR" /> if the content of the command has changed since the last Send operation. A resend cannot be performed if the command is not exactly the same.</description>
                    </item>
                    <item>
                        <description>
                            <see cref="F:PvDotNet.PvResultCode.TIMEOUT" /> if the provided timeout expired before the reception of all the acknowledgements were received.</description>
                    </item>
                </list>
            </returns>
        </member>
        <member name="M:PvDotNet.PvActionCommand.Send(System.UInt32,System.UInt32,System.Boolean)">
            <summary>Broadcasts the action command on all enabled network interfaces.</summary>
            <remarks>
                <para>If more than one network interface is enabled, broadcasts are sent on each network interface 
(one after the other, in the order they were added to the action command object) and the SDK 
waits (up to the amount of time specified by aTimeout) to receive acknowledgements from each 
of these interfaces.</para>
                <para>When Send is used, the request ID of the action command is automatically incremented. Use 
Resend to send the same action command without incrementing the request ID.</para>
                <para>The action command itself does not know how many devices are reached with this broadcast: all 
devices receiving the action command that are configured to react to it (combination of device key, 
group key and group mask) are expected to perform the task associated with the action.</para>
            </remarks>
            <param name="aTimeout">Maximum time to wait for answers in ms.</param>
            <param name="aDeviceCount">If different than zero, Send can return as soon as aDeviceCount acknowledgements have been received without having to wait for aTimeout.</param>
            <param name="aRequestAcknowledgements">Asks the devices for acknowledgements of the action command.</param>
            <returns>
                <list type="bullet">
                    <item>
                        <description>
                            <see cref="F:PvDotNet.PvResultCode.OK" />
                        </description>
                    </item>
                    <item>
                        <description>
                            <see cref="F:PvDotNet.PvResultCode.TIMEOUT" /> if the provided timeout expired before the reception of all the acknowledgements were received.</description>
                    </item>
                </list>
            </returns>
        </member>
        <member name="M:PvDotNet.PvActionCommand.Send(System.UInt32,System.UInt32)">
            <summary>Broadcasts the action command on all enabled network interfaces.</summary>
            <remarks>
                <para>If more than one network interface is enabled, broadcasts are sent on each network interface 
(one after the other, in the order they were added to the action command object) and the SDK 
waits (up to the amount of time specified by aTimeout) to receive acknowledgements from each 
of these interfaces.</para>
                <para>When Send is used, the request ID of the action command is automatically incremented. Use 
Resend to send the same action command without incrementing the request ID.</para>
                <para>The action command itself does not know how many devices are reached with this broadcast: all 
devices receiving the action command that are configured to react to it (combination of device key, 
group key and group mask) are expected to perform the task associated with the action.</para>
            </remarks>
            <param name="aTimeout">Maximum time to wait for answers in ms.</param>
            <param name="aDeviceCount">If different than zero, Send can return as soon as aDeviceCount acknowledgements have been received without having to wait for aTimeout.</param>
            <returns>
                <list type="bullet">
                    <item>
                        <description>
                            <see cref="F:PvDotNet.PvResultCode.OK" />
                        </description>
                    </item>
                    <item>
                        <description>
                            <see cref="F:PvDotNet.PvResultCode.TIMEOUT" /> if the provided timeout expired before the reception of all the acknowledgements were received.</description>
                    </item>
                </list>
            </returns>
        </member>
        <member name="M:PvDotNet.PvActionCommand.Send(System.UInt32)">
            <summary>Broadcasts the action command on all enabled network interfaces.</summary>
            <remarks>
                <para>If more than one network interface is enabled, broadcasts are sent on each network interface 
(one after the other, in the order they were added to the action command object) and the SDK 
waits (up to the amount of time specified by aTimeout) to receive acknowledgements from each 
of these interfaces.</para>
                <para>When Send is used, the request ID of the action command is automatically incremented. Use 
Resend to send the same action command without incrementing the request ID.</para>
                <para>The action command itself does not know how many devices are reached with this broadcast: all 
devices receiving the action command that are configured to react to it (combination of device key, 
group key and group mask) are expected to perform the task associated with the action.</para>
            </remarks>
            <param name="aTimeout">Maximum time to wait for answers in ms.</param>
            <returns>
                <list type="bullet">
                    <item>
                        <description>
                            <see cref="F:PvDotNet.PvResultCode.OK" />
                        </description>
                    </item>
                    <item>
                        <description>
                            <see cref="F:PvDotNet.PvResultCode.TIMEOUT" /> if the provided timeout expired before the reception of all the acknowledgements were received.</description>
                    </item>
                </list>
            </returns>
        </member>
        <member name="P:PvDotNet.PvActionCommand.ScheduledTime">
            <summary>Action command scheduled time.</summary>
            <remarks>
                <para>Action commands can either be performed on reception (no scheduled time enabled or provided) or they can 
be scheduled in the future. If a timestamp (device time domain) is provided, the device queues the action 
command and performs the associated task as close to the scheduled action command timestamp as possible. 
If the device receives a timestamp set in the past relative to its time domain, it is expected to execute 
the command on reception. The queue the device uses to hold future actions may be limited. If a new command 
is received and the device is not able to add it to a full queue, the sender is notified (if an acknowledgement 
of the action command was requested). The scheduled time is only used when the SetScheduledTimeEnable is True.</para>
            </remarks>
        </member>
        <member name="P:PvDotNet.PvActionCommand.ScheduledTimeEnable">
            <summary>Action command object scheduled time.</summary>
            <remarks>
                <para>Action commands can either be performed on reception (no scheduled time enabled and provided) or they 
can be scheduled in the future. This function allows the user to control when the scheduled action 
command is enabled.</para>
            </remarks>
        </member>
        <member name="P:PvDotNet.PvActionCommand.GroupMask">
            <summary>Action command group mask.</summary>
            <remarks>
                <para>A group mask can be configured for an action command. This mask is applied by the device against 
the group mask of the action command. If the resulting value is non-zero, the action is executed 
by the device. The group mask for device actions is typically configured using the GenICam 
interface of the device. The group mask is defined at the action level: different actions on a 
device can have different group masks.</para>
            </remarks>
        </member>
        <member name="P:PvDotNet.PvActionCommand.GroupKey">
            <summary>Action command group key.</summary>
            <remarks>
                <para>The group key defines a group of devices on which actions have to be executed. If a device 
supports action 1 with a group key of 0x24 and action 2 with a group key of 0x42, when an 
action command with group key 0x24 is sent, only action 1 is executed. The group key for 
device actions is typically configured using the GenICam interface of a device. The group key 
is defined at the action level: different actions on a device can have a different group keys.</para>
            </remarks>
        </member>
        <member name="P:PvDotNet.PvActionCommand.DeviceKey">
            <summary>Action command device key.</summary>
            <remarks>
                <para>The device key is a 32-bit value used to check the validity of action commands. Devices only process action 
commands if the action command’s device key matches the device’s device key– think of it as a secret password 
provided by action commands that must match the password configured on the device. The device key on the device 
is typically configured using the GenICam interface of the device. The device key is defined at the device level.</para>
            </remarks>
        </member>
        <member name="M:PvDotNet.PvActionCommand.SetInterfaceEnabled(System.UInt32,System.Boolean)">
            <summary>Enables or disables the ability to send the action command on the network interface at aIndex.</summary>
            <remarks>
                <para>If a network interface is selected to send commands and it is not active (the IP address is 0.0.0.0), the 
command is not sent on the network (and the operation does not fail).</para>
            </remarks>
            <param name="aIndex">aIndex Zero-based network interface index. See GetInterfaceCount.</param>
            <param name="aEnabled">True to enable sending the action command on the network interface at aIndex, false to disable it.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvActionCommand.GetInterfaceEnabled(System.UInt32)">
            <summary>Indicates whether action commands are sent on the network interface at aIndex.</summary>
            <param name="aIndex">aIndex Zero-based network interface index. See GetInterfaceCount.</param>
            <returns>True if action commands are sent on that network interface.</returns>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvActionCommand.GetInterfaceDescription(System.UInt32)">
            <summary>Returns a string that contains the description of the network interface. This string is provided by the operating system.</summary>
            <param name="aIndex">aIndex Zero-based network interface index. See GetInterfaceCount.</param>
            <returns>String containing the description of the network interface at aIndex.</returns>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvActionCommand.GetInterfaceIPAddress(System.UInt32)">
            <summary>Returns a string that contains the IP address of the network interface at aIndex.</summary>
            <param name="aIndex">aIndex Zero-based network interface index. See GetInterfaceCount.</param>
            <returns>String containing the IP address of the network interface at aIndex.</returns>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvActionCommand.GetInterfaceMACAddress(System.UInt32)">
            <summary>Returns a string that contains the MAC address of the network interface at aIndex.</summary>
            <param name="aIndex">aIndex Zero-based network interface index. See GetInterfaceCount.</param>
            <returns>String containing the MAC address of the network interface at aIndex.</returns>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /></description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvActionCommand.InterfaceCount">
            <summary>Returns the number of network interfaces available on the system.</summary>
            <remarks>
                <para>Used to enumerate and enable/disable the network interfaces that the action command can be sent on.</para>
            </remarks>
        </member>
        <member name="M:PvDotNet.PvActionCommand.Finalize">
            <summary>
Finalizer.
</summary>
        </member>
        <member name="M:PvDotNet.PvActionCommand.Dispose">
            <summary>
Destructor
</summary>
        </member>
        <member name="M:PvDotNet.PvActionCommand.#ctor">
            <summary>
Constructor.
</summary>
        </member>
        <member name="T:PvDotNet.PvActionCommand">
            <summary>Utility class to send action commands.</summary>
            <remarks>
                <para>PvActionCommand adds the ability to fire action commands, as defined in the GigE Vision standard.</para>
                <para>To use a PvActionCommand, you instantiate an object from the class, configure the command to send, 
send the command and then optionally retrieve statistics about the outcome of the command. It is 
possible to use the same action command object to send more than one command: to send the same command, 
call Send as many times as required. To send different commands, change the configuration of the 
command between Send calls.</para>
                <para>The eBUS SDK does not configure action commands on the device directly. Instead, the SDK assumes that 
the user is manually configuring action commands with the GenICam browser in the eBUS Player sample application, 
or is configuring action commands programmatically (assuming that the device’s GenICam interface allows the 
user to configure the device directly).</para>
            </remarks>
        </member>
        <member name="T:PvDotNet.PvActionAckStatus">
            <summary>
Action command acknowledges type. 
</summary>
        </member>
        <member name="F:PvDotNet.PvActionAckStatus.NoRefTime">
            <summary>
The device is not synchronized to a master time clock to be used as time reference.
</summary>
        </member>
        <member name="F:PvDotNet.PvActionAckStatus.Overflow">
            <summary>
The device action command queue is full and cannot take the additional action command.
</summary>
        </member>
        <member name="F:PvDotNet.PvActionAckStatus.Late">
            <summary>
The requested schedules action command was requested in a time that is already past.
</summary>
        </member>
        <member name="F:PvDotNet.PvActionAckStatus.OK">
            <summary>
Success
</summary>
        </member>
        <member name="M:PvDotNet.PvStreamInfo.GetWarnings(System.Boolean)">
            <summary>
Returns warnings string.
</summary>
            <param name="aPipelineReallocated">Boolean flag to indicate if the pipeline buffers have been reallocated.</param>
            <returns>Warnings string. which can include:
<list type="bullet"><item><description>buffers reallocated. Indicates that the buffers are not large enough to store the incoming image. If your application uses PvPipeline for streaming, 
this warning also indicates that the buffers have been automatically resized to ensure they are large enough to fit subsequent images. 
If your application uses PvPipeline, you can safely ignore this message.</description></item><item><description>resends. The GigE Vision device has received requests from the eBUS Universal Pro for Ethernet driver to resend packets. This indicates that at least one packet was lost.</description></item><item><description>missing block IDs. Indicates that there are missing blocks (images) in the stream.</description></item><item><description>pipeline dropped images. Indicates that a received block (image) was dropped in the pipeline and is no longer available for retrieval. 
This can happen when buffers are not retrieved fast enough by your application. </description></item><item><description>device dropped images. Indicates that the device has dropped blocks (images) and cannot transmit all of the images received from the sensor.</description></item><item><description>partial lines missing, full lines missing.  Indicates that frames are ending early (FVAL goes invalid before the full number of lines) 
or lines are ending early (LVAL goes invalid before the full number of pixels). 
For detailed information about why these warnings are reported, and for information about resolving them, see the Stream Control Application Note,
available at http://www.pleora.com/support-center.</description></item></list></returns>
        </member>
        <member name="M:PvDotNet.PvStreamInfo.GetErrors">
            <summary>
Returns errors string.
</summary>
            <returns>Errors string.</returns>
        </member>
        <member name="M:PvDotNet.PvStreamInfo.GetStatistics(System.UInt32)">
            <summary>
Returns statistics string.
</summary>
            <param name="aDisplayFrameRate">Display frame rate to be included in the statistics string.</param>
            <returns>Statistics string.</returns>
        </member>
        <member name="M:PvDotNet.PvStreamInfo.Finalize">
            <summary>
Finalizer.
</summary>
        </member>
        <member name="M:PvDotNet.PvStreamInfo.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="M:PvDotNet.PvStreamInfo.#ctor(PvDotNet.PvStream)">
            <summary>
Constructor.
</summary>
            <param name="aStream">Reference to the PvStream object to use to build information strings.</param>
        </member>
        <member name="T:PvDotNet.PvStreamInfo">
            <summary>
Class extracting string-based information out of PvStream statistics.
</summary>
            <remarks>
This class is used by Pleora applications like eBUSPlayer to provide information
on the stream statistics, errors and warnings.
While not a core component of the SDK this utility class can be reused in your
own application if needed.
</remarks>
        </member>
        <member name="E:PvDotNet.PvPipeline.OnBufferTooSmall">
            <summary>
PvPipeline event sink OnBufferTooSmall event.
</summary>
            <remarks>
                <para>Invoked when the pipeline retrieve a buffer from the stream object which failed
with an operation result set to BUFFER_TOO_SMALL.</para>
                <para>The user can set the delegate aReallocAll parameter to true in order to force a complete re-allocation
of the buffers performed synchronously after the notification is invoked.</para>
                <para>If OnBufferTooSmall is not handled or the delegate aReallocAll parameter is set to false, the buffer
is re-allocated before being queued in the stream object but the other buffers
are not affected until they too will fail on BUFFER_TOO_SMALL.</para>
                <para>The delegate aResetStats parameter is only considered if the delegate aReallocAll is set to true. The
statistics do not need to be reset if the buffers are not re-allocated.</para>
                <para>This callback is invoked from the pipeline thread.</para>
                <para>See delegate documentation for more information.</para>
            </remarks>
        </member>
        <member name="E:PvDotNet.PvPipeline.OnReset">
            <summary>
PvPipeline event sink OnReset event.
</summary>
            <remarks>
                <para>Invoked after the pipeline has been reset.
This callback is invoked from the same thread that called PvPipeline.Reset.</para>
                <para>See delegate documentation for more information.</para>
            </remarks>
        </member>
        <member name="E:PvDotNet.PvPipeline.OnStop">
            <summary>
PvPipeline event sink OnStop event.
</summary>
            <remarks>
                <para>Invoked right after the pipeline has been stopped.
This callback is invoked from the same thread that called PvPipeline.Stop.</para>
                <para>See delegate documentation for more information.</para>
            </remarks>
        </member>
        <member name="E:PvDotNet.PvPipeline.OnStart">
            <summary>
PvPipeline event sink OnStart event.
</summary>
            <remarks>
                <para>Invoked when the pipeline just before the pipeline starts.
This callback is invoked from the same thread that called PvPipeline.Start.</para>
                <para>See delegate documentation for more information.</para>
            </remarks>
        </member>
        <member name="E:PvDotNet.PvPipeline.OnBufferDeleted">
            <summary>
\Called whenever a PvBuffer is deleted by the pipeline.
</summary>
            <remarks>
                <para>Can be used to track memory usage or structures used to follow PvBuffer pipeline management.
This method is invoked right before the PvBuffer is deleted.</para>
                <para>See delegate documentation for more information.</para>
            </remarks>
        </member>
        <member name="E:PvDotNet.PvPipeline.OnBufferCreated">
            <summary>
Called whenever a PvBuffer is allocated by the pipeline.
</summary>
            <remarks>
                <para>Can be used to track memory usage or structures used to follow PvBuffer pipeline management.
This method is invoked right after the PvBuffer has been created but before its payload has been allocated.</para>
                <para>See delegate documentation for more information.</para>
            </remarks>
        </member>
        <member name="P:PvDotNet.PvPipeline.BufferHandlingThreadPriority">
            <summary>
Set / Get the priority of the pipeline thread.
</summary>
            <remarks>
This thread is pretty much the pipeline itself: it queues buffers in PvStream and 
retrieves them when they are ready, making them available in an output queue.

If you change the thread priorities, it may alternate the stability of the system. For this reason,
if you report a bug to Pleora, ensure to clearly mention that you change threads priorities.
</remarks>
        </member>
        <member name="M:PvDotNet.PvPipeline.Reset">
            <summary>
Reset the PvPipeline.
</summary>
        </member>
        <member name="M:PvDotNet.PvPipeline.Stop">
            <summary>
Stop the PvPipeline.
</summary>
        </member>
        <member name="M:PvDotNet.PvPipeline.Start">
            <summary>
Start the PvPipeline.
</summary>
            <returns>
The PvResult.
</returns>
        </member>
        <member name="M:PvDotNet.PvPipeline.ReleaseBuffer(PvDotNet.PvBuffer)">
            <summary>
Releases image buffer to the PvPipeline.
</summary>
            <param name="aBuffer">Handle to the PvBuffer object.</param>
            <returns>
The PvResult.
</returns>
        </member>
        <member name="M:PvDotNet.PvPipeline.RetrieveNextBuffer(PvDotNet.PvBuffer@,System.UInt32,PvDotNet.PvResult@)">
            <summary>
Get image buffers, operation result within specified time out.
</summary>
            <param name="aBuffer">Handle to the PvBuffer object.</param>
            <param name="aTimeout">Retrieve buffer time out.</param>
            <param name="aOperationResult">Operation result.</param>
            <returns>
The PvResult.
</returns>
        </member>
        <member name="M:PvDotNet.PvPipeline.RetrieveNextBuffer(PvDotNet.PvBuffer@,System.UInt32)">
            <summary>
Get image buffers within specified time out.
</summary>
            <param name="aBuffer">Handle to the PvBuffer object.</param>
            <param name="aTimeout">Retrieve buffer time out.</param>
            <returns>
The PvResult.
</returns>
        </member>
        <member name="M:PvDotNet.PvPipeline.RetrieveNextBuffer(PvDotNet.PvBuffer@)">
            <summary>
Get image buffers.
</summary>
            <param name="aBuffer">Handle to the PvBuffer object.</param>
            <returns>
The PvResult.
</returns>
        </member>
        <member name="P:PvDotNet.PvPipeline.HandleBufferTooSmall">
            <summary>
Configures whether the pipeline handles BUFFER_TOO_SMALL operation result or not.
</summary>
            <remarks>
                <para>If the pipeline is configured to handle BUFFER_TOO_SMALL operation results the buffers are automatically
re-allocated and re-queued for acquisition when this condition occurs.</para>
                <para>If the pipeline is not configured to handled BUFFER_TOO_SMALL operation results the buffers are
queued in the pipeline output queue just as any other buffer and what to do with the buffer is deferred
to the application using PvPipeline.</para>
                <para>If the pipeline handles BUFFER_TOO_SMALL operation results, the OnBufferTooSmall delegate is invoked in order 
to order to query how to handle the condition. If not implemented the default behaviour is applied. See 
documentation about the OnBufferTooSmall delegate for more information.</para>
                <para>The OnBufferTooSmall delegate is not invoked when the pipeline is not configured to handle
BUFFER_TOO_SMALL operation results.</para>
            </remarks>
        </member>
        <member name="P:PvDotNet.PvPipeline.BufferCount">
            <summary>
Returns and set buffer count.
</summary>
        </member>
        <member name="P:PvDotNet.PvPipeline.BufferSize">
            <summary>
Returns and set buffer size.
</summary>
            <remarks>
                <para>Each time a buffer is queued into the data receiver, it is re-allocated as necessary according to the following behavior:
if the buffer size is less than the require buffer size (BUFFER_TOO_SMALL) it is re-allocated. If the buffer size is more 
than four times the required buffer size, it is re-allocated in order to save memory.</para>
                <para>Originally the buffer size can be specified using SetBufferSize. The pipeline automatically adjusts the buffer size
based on incoming buffers. As buffers are returned to the pipeline and being queued by the data receiver they may be 
re-allocated as described above.</para>
            </remarks>
        </member>
        <member name="P:PvDotNet.PvPipeline.IsStarted">
            <summary>
Returns true if pipe line is started, otherwise return false.
</summary>
        </member>
        <member name="P:PvDotNet.PvPipeline.OutputQueueSize">
            <summary>
Returns the output queue size.
</summary>
        </member>
        <member name="M:PvDotNet.PvPipeline.Finalize">
            <summary>
Finalizer.
</summary>
        </member>
        <member name="M:PvDotNet.PvPipeline.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="M:PvDotNet.PvPipeline.#ctor(PvDotNet.PvStream)">
            <summary>
Constructor.
</summary>
            <param name="aStream">Handle to PvStream object.</param>
        </member>
        <member name="T:PvDotNet.PvPipeline">
            <summary>
Helper class for receiving data from a GigE Vision or USB3 Vision transmitter.
</summary>
            <remarks>
                <list type="bullet">
                    <item>
                        <description>PvPipeline manages the PvBuffer and acquisition thread.</description>
                    </item>
                    <item>
                        <description>PvPipeline partners with a PvStream or PvStreamRaw object to allocate and push buffers into the data receiver as needed.</description>
                    </item>
                    <item>
                        <description>Only applied to simple acquisition scenarios.</description>
                    </item>
                    <item>
                        <description>Only responsible of receiving images.</description>
                    </item>
                    <item>
                        <description>Buffers are silently dropped when the out-queue of the PvPipeline is full.</description>
                    </item>
                    <item>
                        <description>Does not interact with the device.</description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="T:PvDotNet.OnBufferTooSmall">
            <summary>
PvPipeline buffer too small event delegate.
</summary>
            <param name="aPipeline">Reference to the PvPipeline object that invoked the delegate.</param>
            <param name="aReallocAll">Output parameter: if set to true by the delegate handler, all buffers of the pipeline will be re-allocated immediately. If set to false, buffers are re-allocated one-by-one as they fail with BUFFER_TOO_SMALL operation result.</param>
            <param name="aResetStats">Output parameter: if true, the statistics are reset following buffers re-allocation.</param>
        </member>
        <member name="T:PvDotNet.OnReset">
            <summary>
PvPipeline reset event delegate.
</summary>
            <param name="aPipeline">Reference to the PvPipeline object that invoked the delegate.</param>
        </member>
        <member name="T:PvDotNet.OnStop">
            <summary>
PvPipeline acquisition stop event delegate.
</summary>
            <param name="aPipeline">Reference to the PvPipeline object that invoked the delegate.</param>
        </member>
        <member name="T:PvDotNet.OnStart">
            <summary>
PvPipeline acquisition start event delegate.
</summary>
            <param name="aPipeline">Reference to the PvPipeline object that invoked the delegate.</param>
        </member>
        <member name="T:PvDotNet.OnBufferDeleted">
            <summary>
PvPipeline buffer deleted event delegate.
</summary>
            <param name="aPipeline">Reference to the PvPipeline object that invoked the delegate.</param>
            <param name="aBuffer">Reference to the PvBuffer that was just deleted.</param>
        </member>
        <member name="T:PvDotNet.OnBufferCreated">
            <summary>
PvPipeline buffer created event delegate.
</summary>
            <param name="aPipeline">Reference to the PvPipeline object that invoked the delegate.</param>
            <param name="aBuffer">Reference to the PvBuffer that was just created.</param>
        </member>
        <member name="M:PvDotNet.PvNetworkAdapter.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="M:PvDotNet.PvNetworkAdapter.#ctor(PvInterface*)">
            <summary>
Constructor.
</summary>
        </member>
        <member name="P:PvDotNet.PvNetworkAdapter.IsPleoraDriverInstalled">
            <summary>Returns true if the Pleora driver is installed on this network interface.</summary>
        </member>
        <member name="P:PvDotNet.PvNetworkAdapter.Description">
            <summary>Gets the operating system provided description of the network adapter.</summary>
        </member>
        <member name="P:PvDotNet.PvNetworkAdapter.IPConfigurations">
            <summary>Returns an array containing IP configurations for the network adapter.</summary>
        </member>
        <member name="P:PvDotNet.PvNetworkAdapter.DefaultGateway">
            <summary>Gets the NIC's default gateway.</summary>
        </member>
        <member name="P:PvDotNet.PvNetworkAdapter.MACAddress">
            <summary>Gets the NIC's MAC address.</summary>
            <remark>The NIC's MAC address. The form is <i>##.##.##.##.##.##</i>, where <i>#</i> is a 0-9 or A-F.</remark>
        </member>
        <member name="T:PvDotNet.PvNetworkAdapter">
            <summary>Represents one Ethernet network adapter on a system (the PC).</summary>

To use this class, see #PvSystem.

</member>
        <member name="P:PvDotNet.PvIPConfiguration.SubnetMask">
            <summary>
Subnet mask in the a.b.c.d format, as in 255.255.255.0
</summary>
        </member>
        <member name="P:PvDotNet.PvIPConfiguration.IPAddress">
            <summary>
IP address in the a.b.c.d format, as in 192.168.138.140
</summary>
        </member>
        <member name="T:PvDotNet.PvIPConfiguration">
            <summary>
IPv4 configuration.
</summary>
        </member>
        <member name="M:PvDotNet.PvDeviceSerialPort.IsSupported(PvDotNet.PvDevice,PvDotNet.PvDeviceSerial)">
            <summary>
Tests if a specific serial port is supported on a device.
</summary>
            <remarks>
This static method can be used to probe which serial ports are supported by a specific PvDevice.
</remarks>
            <param name="aDevice">Handle to PvDevice object. The device must be connected.</param>
            <param name="aPort">PvDeviceSerial enumeration value representing the device's serial port.</param>
            <returns>True if supported.</returns>
        </member>
        <member name="P:PvDotNet.PvDeviceSerialPort.RxBufferSize">
            <summary>
Returns and sets the capacity of the receive buffer.
The receive buffer needs to be set to be big enough to buffer all incoming bytes before the user calls Read
</summary>
        </member>
        <member name="P:PvDotNet.PvDeviceSerialPort.RxBytesReady">
            <summary>
Returns the number of bytes in the read buffer.
</summary>
        </member>
        <member name="M:PvDotNet.PvDeviceSerialPort.FlushRxBuffer">
            <summary>
Empties the read buffer.
</summary>
        </member>
        <member name="M:PvDotNet.PvDeviceSerialPort.Read(System.UInt32)">
            <summary>
Reads from the serial port.
</summary>
            <param name="aTimeout">Time to wait for new bytes, in milliseconds.</param>
            <returns>
Array of bytes read from the serial port. If no bytes are available are the timeout has elapsed, null is returned.
</returns>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /> if the port is not opened or the associated PvDevice is no longer connected.</description></item><item><description>TIMEOUT if no data is available <i>aTimeout</i> milliseconds after calling this method.</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvDeviceSerialPort.Read">
            <summary>
Reads from the serial port.
</summary>
            <returns>
Array of bytes read from the serial port. If no bytes are immediately available, an empty array is returned.
</returns>
        </member>
        <member name="M:PvDotNet.PvDeviceSerialPort.GetWriteProgress(System.UInt32@,System.UInt32@)">
            <summary>
Gets the progress of an ongoing write operation.
</summary>
            <remarks>
                <para>This method can be called from a different thread than the blocking Write call in order
track or report the progress of the operation.</para>
                <para>After a successful write operation, this method returns aWritten equals to aTotal
until the begining of the next write operation.</para>
            </remarks>
            <param name="aWritten">How many bytes have been written up to now.</param>
            <param name="aTotal">Total number of bytes to write.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.STATE_ERROR" /> if no write operation has been performed yet.</description></item></list></exception> 
\return Includes:
- #PvResult::Code::OK
- #PvResult::Code::STATE_ERROR if no write operation has been performed yet.

</member>
        <member name="M:PvDotNet.PvDeviceSerialPort.Write(System.Byte[])">
            <summary>
Writes data to the serial port.
</summary>
            <param name="aBytes">Bytes to write on the serial port.</param>
            <returns>Number of bytes successfully written on the serial port.</returns>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /> if the port is not opened or the associated PvDevice is no longer connected.</description></item><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> if not all bytes could be written to the serial port.</description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvDeviceSerialPort.IsOpened">
            <summary>
True if the serial port is opened, false if not.
</summary>
        </member>
        <member name="M:PvDotNet.PvDeviceSerialPort.Close">
            <summary>
Closes the device serial port.
</summary>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /> if the device is not connected.</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvDeviceSerialPort.Open(PvDotNet.PvDevice,PvDotNet.PvDeviceSerial)">
            <summary>
Opens the serial port.
</summary>
            <remarks>
The Open method opens a serial port of a device - mainly configuring it for serial communication readiness.
</remarks>
            <param name="aDevice">Handle to a PvDevice object. The device must be connected prior to opening a serial port.
</param>
            <param name="aPort">PvDeviceSerial enumeration value representing the device's serial port to open.
</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /> if aDevice is NULL.</description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /> if the device is not connected.</description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_SUPPORTED" /> if the port is not supported by the device.</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvDeviceSerialPort.Finalize">
            <summary>
Finalizer.
</summary>
        </member>
        <member name="M:PvDotNet.PvDeviceSerialPort.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="M:PvDotNet.PvDeviceSerialPort.#ctor">
            <summary>
Constructor
</summary>
        </member>
        <member name="T:PvDotNet.PvDeviceSerialPort">
            <summary>
Provides access the a serial port on a Pleora GigE Vision or USB3 Vision device.
</summary>
            <remarks>
                <para>PvDeviceSerialPort uses a proprietary
serial communication protocol on top of the GigE Vision or USB3 Vision
protocols. It does not support non-Pleora devices.</para>
                <para>Use of the PvDeviceSerialPort class to directly access the camera head 
will interfere with the synchronization between the device and the camera 
head. Avoid accessing device features linked to the 
camera head while using the PvDeviceSerialPort class to interact with the camera head.</para>
                <para>
                    <h4>How to use this class</h4>
                </para>
To use a serial port:
<list type="number"><item><description>Connect to a device using any of the Connect method of PvDevice class.</description></item><item><description>Open a serial port to the device using Open method of PvDeviceSerialPort class.</description></item><item><description>Write to the serial port using Write method of PvSerialPort class.</description></item><item><description>Read from the serial port using Read method of PvSerialPort class.</description></item><item><description>Finally close the serial port using Close method of PvDeviceSerialPort class.</description></item></list>
To check if an device supports a specific serial port:
<list type="number"><item><description>Connect to a device using any of the Connect method of PvDevice class.</description></item><item><description>Use the IsSupported static method of PvDeviceSerialPort class.</description></item></list></remarks>
        </member>
        <member name="M:PvDotNet.PvCameraBridge.SetPoCLEnabled(PvDotNet.PvDevice,System.Boolean)">
            <summary>
Enables or disables PoCL on all connectors of a device.
</summary>
            <param name="aDevice">The device on which PoCL is enabled or disabled.</param>
            <param name="aEnabled">True to enable PoCL, false to disable it.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" />If the device is null or not connected</description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_SUPPORTED" />If the device does not support PoCL</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvCameraBridge.IsPoCLEnabled(PvDotNet.PvDevice)">
            <summary>
Static method which reports if PoCL is enabled on a device.
</summary>
            <param name="aDevice">The device on which PoCL is tested.</param>
            <remarks>
                <para>PoCL can be enabled/disabled individually on each connector. Here we report 
that PoCL is enabled if it is enabled on at least one connector.</para>
                <para>True is returned if PoCL is enabled on all availble connectors.</para>
            </remarks>
            <returns>True if PoCL is enabled on the device.</returns>
        </member>
        <member name="M:PvDotNet.PvCameraBridge.IsPoCLSupported(PvDotNet.PvDevice)">
            <summary>
Static method which reports if PoCL is supported on a device.
</summary>
            <param name="aDevice">The device on which PoCL tested as being supported.</param>
            <returns>True if PoCL is supported on the device.</returns>
        </member>
        <member name="M:PvDotNet.PvCameraBridge.ResetStatistics">
            <summary>
Resets the camera bridge statistics.
</summary>
        </member>
        <member name="P:PvDotNet.PvCameraBridge.BytesReceivedFromCamera">
            <summary>
Returns how many bytes were received from the camera through the bridge.
</summary>
        </member>
        <member name="P:PvDotNet.PvCameraBridge.BytesSentToCamera">
            <summary>
Returns how many bytes were sent to the camera through the bridge.
</summary>
        </member>
        <member name="M:PvDotNet.PvCameraBridge.Load(System.String,PvDotNet.PvConfigurationReader,System.Collections.Generic.List`1{System.String})">
            <summary>
Restores a the camera bridge.
</summary>
            <remarks>
                <para>The load works on a best effort basis. Whatever can be restored will be restored.</para>
                <para>The order to properties in the aPropertyList is not important.</para>
            </remarks>
            <param name="aPrefix">The prefix to used to identify this camera bridge in the persistence data.</param>
            <param name="aReader">Configuration reader used to read back the camera bridge state.</param>
            <param name="aErrors">A list where all persistence errors are appended.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" />.</exception>
        </member>
        <member name="M:PvDotNet.PvCameraBridge.Save(System.String,PvDotNet.PvConfigurationWriter)">
            <summary>
Persists the current display thread configuration.
</summary>
            <remarks>
                <para>This call builds a list of properties containing pairs of names/values.</para>
            </remarks>
            <param name="aPrefix">The prefix to used to identify this camera bridge in the persistence data.</param>
            <param name="aWriter">Configuration writer used to persist the camera bridge state.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" />.</exception>
        </member>
        <member name="P:PvDotNet.PvCameraBridge.GenCPXMLID">
            <summary>
If the bridge is using GenCP returns the selected XML ID.
</summary>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /> if not connected in the first place</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvCameraBridge.ConnectGenCP(System.String)">
            <summary>
Connects the camera bridge to a GenCP camera.
</summary>
            <param name="aXMLID">The XML ID to use to build the GenApi interface. If not provided, the first manifest entry is used.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /> if devices are found on the serial port assigned to the camera bridge.</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvCameraBridge.GetGenCPXMLIDs(System.Collections.Generic.List`1{System.String})">
            <summary>
Returns all available GenCP XML IDs.
</summary>
            <param name="aXMLIDs">A string list which is populated with the ID of all available GenApi XML IDs.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /> if devices are found on the serial port assigned to the camera bridge.</description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvCameraBridge.CLProtocolXMLID">
            <summary>
If the bridge is using CLProtocol returns the CLProtocol XML ID.
</summary>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /> if not connected as a CL Protocol bridge.</description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvCameraBridge.CLProtocolCameraID">
            <summary>
If the bridge is using CLProtocol returns the controller camera ID.
</summary>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /> if not connected as a CL Protocol bridge.</description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvCameraBridge.CLProtocolTemplate">
            <summary>
If the bridge is using CLProtocol returns the CLProtocol device template.
</summary>
\param [out] aTemplate String where the CLProtocol device template is copied.
<exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /> if not connected as a CL Protocol bridge.</description></item></list></exception></member>
        <member name="M:PvDotNet.PvCameraBridge.ConnectCLProtocol(System.String,System.String)">
            <summary>
Connects the camera bridge using CLProtocol.
</summary>
            <param name="aTemplate">The CLProtocol device template.</param>
            <param name="aXMLID">The XML ID to use to build the GenApi interface. If not provided, the first available is used.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /> if no devices compatible with the CLProtocol device template are found on the serial port assigned to the camera bridge.</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvCameraBridge.ProbeCLProtocol(System.String,System.String@,System.Collections.Generic.List`1{System.String})">
            <summary>
Probes for a CLProtocol camera and returns the camera ID and all its available GenApi XML IDs if found.
</summary>
            <param name="aTemplate">The CL Protocol device template. See #GetCLProtocolTemplates.</param>
            <param name="aCameraID">A string containing the CLProtocol device identifier for the camera.</param>
            <param name="aXMLIDs">A string list populated with the ID of all available GenApi XML IDs.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /> if aTemplate does not exist or no devices are found on the serial port assigned to the camera bridge.</description></item><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_DATA_FORMAT" /> if YAML parsing errors were encountered.</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvCameraBridge.GetCLProtocolTemplates(System.Collections.Generic.List`1{System.String})">
            <summary>
Lists all avaiable CLProtocol device templates.
</summary>
            <remarks>
                <para>This function can succeed and aTemplates be empty if the enumeration is successful
but no CLProtocol device templates are found.</para>
            </remarks>
            <param name="aTemplates">List of string representing all available CLProtocol device templates.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" />.</exception>
        </member>
        <member name="P:PvDotNet.PvCameraBridge.PleoraCameraFilePath">
            <summary>
If the bridge is setup from a Pleora Camera File, returns the YAML configuration file path.
</summary>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /> if not connected as a Pleora Camera File bridge.</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvCameraBridge.GetPleoraCameraFileParserErrors(System.Collections.Generic.List`1{System.String})">
            <summary>
Provides a list resulting from a failure of parsing a Pleora Camera File with #ConnectPleoraCameraFile.
</summary>
            <param name="aErrors">List of strings containing the errors reported by the parser.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /> if not connected as a Pleora Camera File bridge.</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvCameraBridge.ConnectPleoraCameraFile(System.String)">
            <summary>
Connects the camera bridge using a Pleora Camera File.
</summary>
            <remarks>
                <para>A Pleora Camera File is a YAML file made of ID, init sequence and parameter
description sectons that can be used to setup a camera bridge.</para>
            </remarks>
            <param name="aPath">Path to the Pleora Camera File.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /> if the file does not exist.</description></item><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_DATA_FORMAT" /> if YAML parsing errors were encountered.</description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvCameraBridge.Source">
            <summary>
String-based representation of the streaming source from the SourceSelector GenApi parameter.
</summary>
        </member>
        <member name="P:PvDotNet.PvCameraBridge.ParametersSyncEnabled">
            <summary>
Whether or not camera-to-grabber smart parameters synchronization is enabled.
</summary>
        </member>
        <member name="M:PvDotNet.PvCameraBridge.StopAcquisition">
            <summary>
Stops the acquisition on the camera.
</summary>
            <remarks>
                <para>Uses the GenApi interface to execute the AcquisitionStop command and set TLParamsLocked
to 0 if these parameters exist. If they do not exist the function still succeeds.</para>
            </remarks>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /> if not connected in the first place</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvCameraBridge.StartAcquisition">
            <summary>
Starts the acquisition on the camera.
</summary>
            <remarks>
                <para>Uses the GenApi interface to set TLParamsLocked and execute the AcquisitionStart
command if these parameters exist. If they do not exist the function still succeeds.</para>
                <para>Some cameras only stream if AcquisitionStart/AcquisitionStop and TLParamsLocked
are managed properly. In a generic camera bridge application it is recommended to always
call StartAcquisition and StopAcquisition on the camera bridge after starting
and before stopping acquisition on the device (grabber) itself.</para>
            </remarks>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /> if not connected in the first place</description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvCameraBridge.Stream">
            <summary>
Stream used by the camera bridge.
</summary>
            <remarks>
The stream is optional so this accessor can return null.
</remarks>
        </member>
        <member name="P:PvDotNet.PvCameraBridge.Device">
            <summary>
Device controller used by the camera bridge.
</summary>
        </member>
        <member name="P:PvDotNet.PvCameraBridge.Port">
            <summary>
Device serial port used by the camera bridge.
</summary>
        </member>
        <member name="M:PvDotNet.PvCameraBridge.Recover">
            <summary>
Deprecated.
</summary>
            <remarks>
                <para>Instead, on disconnect event use Save to store the serial bridge state. After
reconnection, use Load to bring it back.</para>
            </remarks>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_IMPLEMENTED" /> if the bridge is not started.</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvCameraBridge.Disconnect">
            <summary>
Disconnects the camera bridge.
</summary>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /></description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvCameraBridge.IsConnected">
            <summary>
Returns true if the bridge is currently connected.
</summary>
        </member>
        <member name="P:PvDotNet.PvCameraBridge.Parameters">
            <summary>
GenApi interface of the camera, null if not connected.
</summary>
        </member>
        <member name="M:PvDotNet.PvCameraBridge.Finalize">
            <summary>
Finalizer.
</summary>
        </member>
        <member name="M:PvDotNet.PvCameraBridge.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="M:PvDotNet.PvCameraBridge.#ctor(PvDotNet.PvDevice,PvDotNet.PvDeviceSerial,PvDotNet.PvStream)">
            <summary>
Constructor.
</summary>
            <param name="aDevice">Device controller (typically a frame grabber) the camera is connected to.</param>
            <param name="aPort">Device serial port the camera is connected to.</param>
            <param name="aStream">Optional stream object. Use null if a not available.</param>
        </member>
        <member name="T:PvDotNet.PvCameraBridge">
            <summary>
Used to provide a GenApi interface to a frame grabber camera.
</summary>
            <remarks>
Can be used to provide a camera bridge to:
<list type="bullet"><item><description>A camera described by a Pleora Camera file</description></item><item><description>A GenCP compliant camera</description></item><item><description>A camera that can be controlled through a CLProtocol library</description></item></list></remarks>
        </member>
        <member name="T:PvDotNet.PvCameraBridgeType">
            <summary>
Device information type.
</summary>
        </member>
        <member name="F:PvDotNet.PvCameraBridgeType.GenCP">
            <summary>
                <para>GenCP camera bridge.</para>
            </summary>
        </member>
        <member name="F:PvDotNet.PvCameraBridgeType.CLP">
            <summary>
                <para>CLProtocol Camera bridge.</para>
            </summary>
        </member>
        <member name="F:PvDotNet.PvCameraBridgeType.PCF">
            <summary>
                <para>Pleora Camera File camera bridge.</para>
            </summary>
        </member>
        <member name="F:PvDotNet.PvCameraBridgeType.Unknown">
            <summary>
                <para>Undefined camera bridge.</para>
            </summary>
        </member>
        <member name="T:PvDotNet.PvDeviceSerial">
            <summary>
Device serial port.
</summary>
        </member>
        <member name="F:PvDotNet.PvDeviceSerial.Invalid">
            <summary>
Invalid serial port
</summary>
        </member>
        <member name="F:PvDotNet.PvDeviceSerial.Bulk7">
            <summary>
Bulk7
</summary>
        </member>
        <member name="F:PvDotNet.PvDeviceSerial.Bulk6">
            <summary>
Bulk6
</summary>
        </member>
        <member name="F:PvDotNet.PvDeviceSerial.Bulk5">
            <summary>
Bulk5
</summary>
        </member>
        <member name="F:PvDotNet.PvDeviceSerial.Bulk4">
            <summary>
Bulk4
</summary>
        </member>
        <member name="F:PvDotNet.PvDeviceSerial.Bulk3">
            <summary>
Bulk3
</summary>
        </member>
        <member name="F:PvDotNet.PvDeviceSerial.Bulk2">
            <summary>
Bulk2
</summary>
        </member>
        <member name="F:PvDotNet.PvDeviceSerial.Bulk1">
            <summary>
Bulk1
</summary>
        </member>
        <member name="F:PvDotNet.PvDeviceSerial.Bulk0">
            <summary>
Bulk0
</summary>
        </member>
        <member name="F:PvDotNet.PvDeviceSerial.Serial1">
            <summary>
Non-bulk 1
</summary>
        </member>
        <member name="F:PvDotNet.PvDeviceSerial.Serial0">
            <summary>
Non-bulk 0
</summary>
        </member>
        <member name="M:PvDotNet.PvConfigurationWriter.SetErrorList(System.Collections.Generic.List`1{System.String},System.String)">
            <summary>
Sets the error list where all errors/warnings are logged.   
</summary>
            <remarks>
The Save flushes writes all configurations in the PvConfigurationWriter object (using Store) to disk.
</remarks>
            <param name="aList">A handle to a string list. The content of the list is not reset, new errors are simply added to the list.</param>
            <param name="aPrefix">A contextual prefix added to all errors as they are added to the error list.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvConfigurationWriter.SaveToString(System.String)">
            <summary>
Flush all stored configurations to a string.  
</summary>
            <remarks>
The Save flushes writes all configurations in the PvConfigurationWriter object (using Store) to a string.
</remarks>
            <param name="aString">The string where to save the configuration.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvConfigurationWriter.Save(System.String)">
            <summary>
Flush all stored configurations to disk.  
</summary>
            <remarks>
The Save flushes writes all configurations in the PvConfigurationWriter object (using Store) to disk.
</remarks>
            <param name="aFilename">The configuration file's filename and path.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvConfigurationWriter.Store(System.Collections.Generic.List`1{PvDotNet.PvProperty},System.String)">
            <summary>
Stores a property list. 
</summary>
            <remarks>
Can be used to persist a property list object. A property is name/value pair.
</remarks>
            <param name="aPropertyList">See <see cref="M:PvDotNet.PvConfigurationWriter.Store(PvDotNet.PvDevice,System.String)" />, aDevice parameter.</param>
            <param name="aName">See <see cref="M:PvDotNet.PvConfigurationWriter.Store(PvDotNet.PvDevice,System.String)" />.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvConfigurationWriter.Store(System.Collections.Generic.List`1{PvDotNet.PvProperty})">
            <summary>
Stores a property list. 
</summary>
            <remarks>
Can be used to persist a property list object. A property is name/value pair.
</remarks>
            <param name="aPropertyList">See <see cref="M:PvDotNet.PvConfigurationWriter.Store(PvDotNet.PvDevice,System.String)" />, aDevice parameter</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvConfigurationWriter.Store(PvDotNet.PvGenParameterArray,System.String)">
            <summary>
Store a <see cref="T:PvDotNet.PvGenParameterArray" />.
</summary>
            <remarks>
Can be used to persist application information other than <see cref="T:PvDotNet.PvDevice" /> or <see cref="T:PvDotNet.PvStream" /> status in a single configuration file.
</remarks>
            <param name="aGenParameterArray">See <see cref="M:PvDotNet.PvConfigurationWriter.Store(PvDotNet.PvDevice,System.String)" />, aDevice parameter.</param>
            <param name="aName">See <see cref="M:PvDotNet.PvConfigurationWriter.Store(PvDotNet.PvDevice,System.String)" />.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvConfigurationWriter.Store(PvDotNet.PvGenParameterArray)">
            <summary>
Store a <see cref="T:PvDotNet.PvGenParameterArray" />.
</summary>
            <remarks>
Can be used to persist application information other than <see cref="T:PvDotNet.PvDevice" /> or <see cref="T:PvDotNet.PvStream" /> status in a single configuration file.
</remarks>
            <param name="aGenParameterArray">See <see cref="M:PvDotNet.PvConfigurationWriter.Store(PvDotNet.PvDevice,System.String)" />, aDevice parameter.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvConfigurationWriter.Store(System.String,System.String)">
            <summary>
Store a custom string.
</summary>
            <remarks>
Can be used to persist application information other than <see cref="T:PvDotNet.PvDevice" /> or <see cref="T:PvDotNet.PvStream" /> status in a single configuration file.
</remarks>
            <param name="aString">See <see cref="M:PvDotNet.PvConfigurationWriter.Store(PvDotNet.PvDevice,System.String)" />, aDevice parameter.</param>
            <param name="aName">See <see cref="M:PvDotNet.PvConfigurationWriter.Store(PvDotNet.PvDevice,System.String)" />.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvConfigurationWriter.Store(PvDotNet.PvStream,System.String)">
            <summary>
Store a <see cref="T:PvDotNet.PvStream" /> configuration.
</summary>
            <remarks>
To use this method, see Store(PvDevice^, String).
</remarks>
            <param name="aStream">See Store(PvDevice^, String^).</param>
            <param name="aName">See Store(String^, String^).</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvConfigurationWriter.Store(PvDotNet.PvStream)">
            <summary>
Store a <see cref="T:PvDotNet.PvStream" /> configuration.
</summary>
            <remarks>
To use this method, see Store(PvDevice^, String).
</remarks>
            <param name="aStream">See <see cref="M:PvDotNet.PvConfigurationWriter.Store(PvDotNet.PvDevice,System.String)" />.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvConfigurationWriter.Store(PvDotNet.PvDevice,System.String)">
            <summary>
Store a <see cref="T:PvDotNet.PvDevice" /> configuration.
</summary>
            <remarks>
                <para>The Store family of methods add a configuration to the PvConfigurationWriter object.</para>
                <para>You must call <see cref="M:PvDotNet.PvConfigurationWriter.Save(System.String)" /> to flush your configurations to disk.</para>
                <para>The Store methods use a (<i>ConfigurationType</i>, <i>ConfigurationName</i>) parameter format.</para>
                <para>The <i>ConfigurationType</i> is the object (<see cref="T:PvDotNet.PvDevice" />, <see cref="T:PvDotNet.PvStream" />, or <see cref="T:System.String" />); </para>
                <para>the <i>ConfigurationName</i> is an arbitrary identifying name for the <i>configuration</i>.</para>
            </remarks>
            <param name="aDevice">The configuration type; the object whose information will be stored.
                      Other Store methods have similar behavior, but different data types 
                      (<see cref="T:PvDotNet.PvStream" /> or <see cref="T:System.String" />).</param>
            <param name="aName">The configuration name; an arbitrary identifying name for this
                      configuration (since you set it, it may differ from the value
                      returned by methods such as PvDeviceInfo.GetUserDefinedName).</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvConfigurationWriter.Store(PvDotNet.PvDevice)">
            <summary>
Store a <see cref="T:PvDotNet.PvDevice" /> configuration.
</summary>
            <remarks>
 To use this method, see Store(PvDevice^, String).
</remarks>
            <param name="aDevice">Handle to <see cref="T:PvDotNet.PvDevice" /> configuration.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvConfigurationWriter.Finalize">
            <summary>
Finalizer.
</summary>
        </member>
        <member name="M:PvDotNet.PvConfigurationWriter.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="M:PvDotNet.PvConfigurationWriter.#ctor">
            <summary>
Constructor.
</summary>
        </member>
        <member name="T:PvDotNet.PvConfigurationWriter">
            <summary>
Save the state of the system. 
</summary>
            <remarks>
You can save:
<list type="bullet"><item><description>The GigE Vision or USB3 Vision device's state (all parameters that can be streamed).</description></item><item><description>The SDK's state (stream information and information needed to connect to a GigE Vision or USB3 Vision device).</description></item><item><description>Your own custom strings and property lists.</description></item></list><para><b>To save your state information:</b></para><para>1. Create a configuration writer. Use <see cref="T:PvDotNet.PvConfigurationWriter" />.</para><para>2. Store state information in the configuration writer.</para><list type="bullet"><item><description>For device controllers (PvDevice objects), use Store(PvDevice, String).</description></item><item><description>For stream channel receivers (PvStream objects), use Store(PvStream, String).</description></item></list><para>3. Optionally, store your own state information. Use Store(String, String).</para><para>4. Optionally, repeat the two previous steps.</para><para>5. Save the stored information to disk. Use <see cref="M:PvDotNet.PvConfigurationWriter.Save(System.String)" />.</para></remarks>
        </member>
        <member name="M:PvDotNet.PvConfigurationReader.SetErrorList(System.Collections.Generic.List`1{System.String},System.String)">
            <summary>
Sets the error list where all errors/warnings are logged.
</summary>
            <param name="aList">A handle to a string list. The content of the list is not reset, new errors are simply added to the list.</param>
            <param name="aPrefix">A contextual prefix added to all errors as they are added to the error list.</param>
        </member>
        <member name="M:PvDotNet.PvConfigurationReader.Restore(System.UInt32,System.Collections.Generic.List`1{PvDotNet.PvProperty})">
            <summary>
Restores a property list from a configuration file.
</summary>
            <param name="aIndex">Index of the property list in the configuration file.</param>
            <param name="aPropertyList">Property list the configuration file property list is restored into.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /> (the GenICam parameter array values were not found in the file).</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvConfigurationReader.Restore(System.String,System.Collections.Generic.List`1{PvDotNet.PvProperty})">
            <summary>
Restores a property list from a configuration file.
</summary>
            <param name="aKey">String key of the property list in the configuration file.</param>
            <param name="aPropertyList">Property list the configuration file property list is restored into.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /> (the GenICam parameter array values were not found in the file).</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvConfigurationReader.GetPropertyListName(System.UInt32)">
            <summary>
Returns the name of a property list from its index.  
</summary>
            <param name="aIndex">See <see cref="M:PvDotNet.PvConfigurationReader.GetDeviceName(System.UInt32)" />.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /></description></item></list></exception>
            <returns>See <see cref="M:PvDotNet.PvConfigurationReader.GetDeviceName(System.UInt32)" />.</returns>
        </member>
        <member name="P:PvDotNet.PvConfigurationReader.PropertyListCount">
            <summary>
Returns the number of PvPropertyList objects saved in the configuration file.
</summary>
        </member>
        <member name="M:PvDotNet.PvConfigurationReader.Restore(System.UInt32,PvDotNet.PvGenParameterArray)">
            <summary>
Restores the content of a GenICam parameter array from a configuration file.
</summary>
            <param name="aIndex">Index of the GenICam parameter array values in the configuration file.</param>
            <param name="aParameterArray">GenICam parameter array to restore the values into.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> (something went wrong in the restore process, see PvResult description).</description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /> (the GenICam parameter array values were not found in the file).</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvConfigurationReader.Restore(System.String,PvDotNet.PvGenParameterArray)">
            <summary>
Restores the content of a GenICam parameter array from a configuration file.
</summary>
            <param name="aKey">String key of the GenICam parameter array values in the configuration file.</param>
            <param name="aParameterArray">GenICam parameter array to restore the values into.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> (something went wrong in the restore process, see PvResult description).</description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /> (the GenICam parameter array values were not found in the file).</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvConfigurationReader.GetGenParameterArrayName(System.UInt32)">
            <summary>
Returns the name of a GenICam parameter array from its index.
</summary>
            <param name="aIndex">See GetDeviceName.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /></description></item></list></exception>
            <returns>See <see cref="M:PvDotNet.PvConfigurationReader.GetDeviceName(System.UInt32)" />.</returns>
        </member>
        <member name="P:PvDotNet.PvConfigurationReader.GenParameterArrayCount">
            <summary>
Returns the number of parameter array store in the configuration file.
</summary>
        </member>
        <member name="M:PvDotNet.PvConfigurationReader.Restore(System.UInt32,System.String@)">
            <summary>
Restores a configuration string.
</summary>
            <param name="aIndex">Index of the string in the configuration file.</param>
            <param name="aValue">String the value is restored into.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /> (the string wasn't found in the file).</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvConfigurationReader.Restore(System.String,System.String@)">
            <summary>
Restores a configuration string.
</summary>
            <param name="aKey">String key of the string in the configuration file.</param>
            <param name="aValue">String the value is restored into.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /> (the string wasn't found in the file).</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvConfigurationReader.GetStringName(System.UInt32)">
            <summary>
Get the custom-state string name (PvString).
</summary>
            <para>See GetDeviceName.</para>
            <param name="aIndex">See GetDeviceName.</param>
            <returns>See GetDeviceName.</returns>
        </member>
        <member name="P:PvDotNet.PvConfigurationReader.StringCount">
            <summary>
Returns the number of custom-state strings in the configuration file.
</summary>
        </member>
        <member name="M:PvDotNet.PvConfigurationReader.Restore(System.UInt32,PvDotNet.PvStream)">
            <summary>
Apply a configuration to a PvStream.
</summary>
            <param name="aIndex">Index of the stream configuration in the configuration file.</param>
            <param name="aStream">Stream to restore the configuration to.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /> (the stream configuration wasn't found in the file).</description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /> (the stream was not already opened and could not be opened).</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvConfigurationReader.Restore(System.String,PvDotNet.PvStream)">
            <summary>
Restores a configuration to a PvStream.
</summary>
            <param name="aName">String-based key of the stream configuration in the configuration file.</param>
            <param name="aStream">Stream to restore the configuration to.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /> (the stream configuration wasn't found in the file).</description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /> (the stream was not already opened and could not be opened).</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvConfigurationReader.GetStreamName(System.UInt32)">
            <summary>
Get the configuration name PvStream.
</summary>
            <param name="aIndex">See GetDeviceName.</param>
            <returns>See GetDeviceName.</returns>
        </member>
        <member name="P:PvDotNet.PvConfigurationReader.StreamCount">
            <summary>
Returns the number of stream configuration in this PvConfigurationReader.
</summary>
            <remarks>
                <para>See GetDeviceCount.</para>
            </remarks>
        </member>
        <member name="M:PvDotNet.PvConfigurationReader.Restore(System.UInt32,PvDotNet.PvDevice)">
            <summary>
Restores a configuration to a PvDevice.
</summary>
            <param name="aIndex">The configuration's index number.</param>
            <param name="aDevice">The device to restore the configuration to.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /> (the device configuration wasn't found in the file).</description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /> (the PvDevice was not connected and could not be connected).</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvConfigurationReader.Restore(System.String,PvDotNet.PvDevice)">
            <summary>
Restores a configuration to a PvDevice.
</summary>
            <param name="aName">The configuration name.</param>
            <param name="aDevice">The device to restore the configuration to.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /> (the device configuration wasn't found in the file).</description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /> (the PvDevice was not connected and could not be connected).</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvConfigurationReader.GetDeviceName(System.UInt32)">
            <summary>
Get the configuration name PvDevice.
</summary>
            <remarks>
The Get*Name methods let you determine the name of the 
configuration before calling the Restore methods.
</remarks>
            <param name="aIndex">The index within the list of the devices; a value between 0 and GetDeviceCount-1.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /></description></item></list></exception>
            <returns>The configuration's name.</returns>
        </member>
        <member name="P:PvDotNet.PvConfigurationReader.DeviceCount">
            <summary>
Returns the number of PvDevice configurations available.
</summary>
            <remarks>
 This family of properties returns the number of configurations in a configuration file.
 The properties include:
<list type="bullet"><item><description>DeviceCount </description></item><item><description>StreamCount </description></item><item><description>StringCount </description></item></list></remarks>
        </member>
        <member name="M:PvDotNet.PvConfigurationReader.LoadFromString(System.String)">
            <summary>
Loads an XML (pvcfg) from a string.
</summary>
            <remarks>
The Load method loads a configuration file from a string into the PvConfigurationReader object's
internal memory.
</remarks>
            <param name="aString">The configuration string.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvConfigurationReader.Load(System.String)">
            <summary>
Loads an XML (pvcfg) file.
</summary>
            <remarks>
The Load method loads a configuration file from disk into the PvConfigurationReader object's
internal memory. To apply a configuration state, Use the following methods:
<list type="bullet"><item><description><see cref="M:PvDotNet.PvConfigurationReader.Restore(System.UInt32,PvDotNet.PvDevice)" /></description></item><item><description><see cref="M:PvDotNet.PvConfigurationReader.Restore(System.UInt32,PvDotNet.PvStream)" /></description></item></list></remarks>
            <param name="aFilename">The configuration file's name and path.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.CANNOT_OPEN_FILE" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvConfigurationReader.Finalize">
            <summary>
Finalizer.
</summary>
        </member>
        <member name="M:PvDotNet.PvConfigurationReader.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="M:PvDotNet.PvConfigurationReader.#ctor">
            <summary>
Constructor.
</summary>
        </member>
        <member name="T:PvDotNet.PvConfigurationReader">
            <summary>
Restore the state of the system.
</summary>
            <remarks>
                <para>
                    <b>To load your device controller (PvDevice object) or stream controller (PvStream object) state from disk:</b>
                </para>
1. Create a configuration reader.
<para>2. Load the file from disk. Use <see cref="M:PvDotNet.PvConfigurationReader.Load(System.String)" />.</para>
3. Returns the number of configurations. Use the following properties: 
<list type="bullet"><item><description><see cref="P:PvDotNet.PvConfigurationReader.DeviceCount" /></description></item><item><description><see cref="P:PvDotNet.PvConfigurationReader.StreamCount" /></description></item><item><description><see cref="P:PvDotNet.PvConfigurationReader.StringCount" /></description></item></list>
4. Optionally, test for the name of a configuration. Use the following methods:
<list type="bullet"><item><description><see cref="M:PvDotNet.PvConfigurationReader.GetDeviceName(System.UInt32)" /></description></item><item><description><see cref="M:PvDotNet.PvConfigurationReader.GetStreamName(System.UInt32)" /></description></item><item><description><see cref="M:PvDotNet.PvConfigurationReader.GetStringName(System.UInt32)" /></description></item></list>
5. Apply a configuration to an object. Use the following methods:
<list type="bullet"><item><description><see cref="M:PvDotNet.PvConfigurationReader.Restore(System.UInt32,PvDotNet.PvDevice)" /></description></item><item><description><see cref="M:PvDotNet.PvConfigurationReader.Restore(System.UInt32,PvDotNet.PvStream)" /></description></item></list><para><b>Note:</b></para><para>If the GigE Vision or USB3 Vision device controller (PvDeviceGEV or PvDeviceU3V object) isn't connected to the device, it attempts to connect (as if calling PvDevice.Connect). 
If already connected, the settings are applied without changing the IP address and related information. The same applies to a PvStreamGEV or PvStreamU3V that is already opened.
</para></remarks>
        </member>
        <member name="M:PvDotNet.PvDeviceU3V.Connect(System.String)">
            <summary>
Connect to a USB3 Vision device.
</summary>
            <remark>
The Connect method connects to a USB3 Vision device found using a PvSystem or PvDeviceFinderWnd object.
Only one device can be connected to at a time.
</remark>
            <param name="aInfo">The USB3 Vision device's 12 hex digits GUID.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.OK" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.NO_LICENSE" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.GENICAM_XML_ERROR" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvDeviceU3V.Connect(PvDotNet.PvDeviceInfo)">
            <summary>
Connect to a USB3 Vision device.
</summary>
            <remark>
The Connect method connects to a USB3 Vision device found using a PvSystem or PvDeviceFinderWnd object.
Only one device can be connected to at a time.
</remark>
            <param name="aDeviceInfo">The USB3 Vision device's connectivity information; a <see cref="T:PvDotNet.PvDeviceInfo" /> object.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.OK" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.NO_LICENSE" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.GENICAM_XML_ERROR" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvDeviceU3V.Finalize">
            <summary>
Finalizer.
</summary>
        </member>
        <member name="M:PvDotNet.PvDeviceU3V.Dispose">
            <summary>
Destructor
</summary>
        </member>
        <member name="M:PvDotNet.PvDeviceU3V.#ctor">
            <summary>
Constructor
</summary>
        </member>
        <member name="T:PvDotNet.PvDeviceU3V">
            <summary>
Connect, configure and control a USB3 Vision device
</summary>
        </member>
        <member name="M:PvDotNet.PvDeviceInfoGEV.Dispose">
            <summary>
Destructors
</summary>
        </member>
        <member name="M:PvDotNet.PvDeviceInfoGEV.#ctor(PvDeviceInfo*)">
            <summary>
Constructor
</summary>
        </member>
        <member name="P:PvDotNet.PvDeviceInfoGEV.GEVVersion">
            <summary>Get the GigE Vision device's network protocol version.</summary>
            <remark>
The high 16 bits contain the major version and The low 16 bits the minor version.
</remark>
            <return>The GigE Vision device's network protocol version.</return>
        </member>
        <member name="P:PvDotNet.PvDeviceInfoGEV.SubnetMask">
            <summary>Get the GigE Vision device's subnet mask.</summary>
            <return>The GigE Vision device's subnet mask; the <b>GevCurrentSubnetMask</b> feature. For the form, see <see cref="P:PvDotNet.PvDeviceInfoGEV.IPAddress" />.</return>
        </member>
        <member name="P:PvDotNet.PvDeviceInfoGEV.DefaultGateway">
            <summary>Get the GigE Vision device's default gateway.</summary>
            <return>The GigE Vision device's default gateway; the <b>GevCurrentDefaultGateway</b> feature. For the form, see <see cref="P:PvDotNet.PvDeviceInfoGEV.IPAddress" />.</return>
        </member>
        <member name="P:PvDotNet.PvDeviceInfoGEV.IPAddress">
            <summary>Get the GigE Vision device's current IP address.</summary>
            <return>The GigE Vision device's current IP address; the <b>GevCurrentIPAddress</b> feature. The form is <i>a</i>.<i>b</i>.<i>c</i>.<i>d</i>, 
        where <i>a</i> through <i>d</i> are decimal numbers ranging from 0 to 255.</return>
        </member>
        <member name="P:PvDotNet.PvDeviceInfoGEV.MACAddress">
            <summary>Get the GigE Vision device's MAC address.</summary>
            <return>The GigE Vision device's MAC address, in the form <i>aa</i>:<i>bb</i>:<i>cc</i>:<i>dd</i>:<i>ee</i>:<i>ff</i>, 
        where <i>aa</i> through <i>ff</i> are lowercase hexadecimal numbers ranging from 0x00 to 0xff.</return>
        </member>
        <member name="T:PvDotNet.PvDeviceInfoGEV">
            <summary>Information identifying a GigE Vision device.</summary>
        </member>
        <member name="M:PvDotNet.PvUSBHostController.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="M:PvDotNet.PvUSBHostController.#ctor(PvInterface*)">
            <summary>
Constructor.
</summary>
        </member>
        <member name="P:PvDotNet.PvUSBHostController.Speed">
            <summary>Gets the Speed of the USB host controller.</summary>

Even if a USB host controller supports super speed it does not guarantee a device
will be connected as super speed. Bad cables or hubs not supporting super speed
could force the controller and device to end up being connected at a slower speed.

</member>
        <member name="P:PvDotNet.PvUSBHostController.Revision">
            <summary>Gets the Revision of the USB host controller.</summary>
        </member>
        <member name="P:PvDotNet.PvUSBHostController.SubsystemID">
            <summary>Gets the Subsystem ID of the USB host controller.</summary>
        </member>
        <member name="P:PvDotNet.PvUSBHostController.DeviceID">
            <summary>Gets the Device ID of the USB host controller.</summary>
        </member>
        <member name="P:PvDotNet.PvUSBHostController.VendorID">
            <summary>Gets the Vendor ID of the USB host controller.</summary>
        </member>
        <member name="T:PvDotNet.PvUSBHostController">
            <summary>Represents one USB host controller on a system (the PC).</summary>

To use this class, see #PvSystem.

</member>
        <member name="T:PvDotNet.PvUSBSpeed">
            <summary>
USB speed.
</summary>
        </member>
        <member name="F:PvDotNet.PvUSBSpeed.Super">
            <summary>
                <para>USB super speed.</para>
            </summary>
        </member>
        <member name="F:PvDotNet.PvUSBSpeed.High">
            <summary>
                <para>USB high speed.</para>
            </summary>
        </member>
        <member name="F:PvDotNet.PvUSBSpeed.Full">
            <summary>
                <para>USB full speed.</para>
            </summary>
        </member>
        <member name="F:PvDotNet.PvUSBSpeed.Low">
            <summary>
                <para>USB low speed.</para>
            </summary>
        </member>
        <member name="F:PvDotNet.PvUSBSpeed.Unknown">
            <summary>
                <para>Unknown USB speed.</para>
            </summary>
        </member>
        <member name="M:PvDotNet.PvStreamGEV.IsDriverInstalled(System.String,System.String)">
            <summary>
Test if the specified GigE Vision device is currently reachable through an eBUS driver
</summary>
            <param name="aIPAddress">The GigE Vision transmitter's IP address.</param>
            <param name="aLocalIPAddress">Deprecated, ignored.</param>
            <returns>True if the device is reachable through an eBUS driver; otherwise, false.</returns>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvStreamGEV.IsDriverInstalled(System.String)">
            <summary>
Test if the specified GigE Vision device is currently reachable through an eBUS driver
</summary>
            <param name="aIPAddress">The GigE Vision transmitter's IP address.</param>
            <returns>True if the device is reachable through an eBUS driver; otherwise, false.</returns>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /></description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvStreamGEV.UserModeDataReceiverThreadPriority">
            <summary>
Set / Get the priority of the thread used to run the data receiver user mode
</summary>
            <remarks>
Only applicable if using a user-mode data receiver. The thread priority of a 
driver-based data receiver cannot be controlled. This thread receives and processes 
all packets received from the device.
If you change the thread priorities, it may alternate the stability of the system. For this reason,
if you report a bug to Pleora, ensure to clearly mention that you change threads priorities.
</remarks>
        </member>
        <member name="P:PvDotNet.PvStreamGEV.MulticastIPAddress">
            <summary>Get the stream's MulticastIPAddress property.</summary>
        </member>
        <member name="P:PvDotNet.PvStreamGEV.LocalIPAddress">
            <summary>Get the stream's LocalIPAddress property.</summary>
        </member>
        <member name="P:PvDotNet.PvStreamGEV.LocalPort">
            <summary>Get the stream's DataPort property.</summary>
        </member>
        <member name="M:PvDotNet.PvStreamGEV.FlushPacketQueue">
            <summary>Flushes all non-processed UDP packets from the data receiver.</summary>
            <remark>
Should be called before resuming streaming after a pause
to ensure that old packets are not processed
as new incoming data.
</remark>
            <exception cref="T:PvDotNet.PvException">The following PvException result code will be produced:
<list type="bullet"><item><description>OK</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvStreamGEV.Open(System.String,System.String,System.UInt16,System.UInt16,System.String,System.UInt32)">
            <summary>
Begin receiving blocks (images or raw data) multicasted from a GigE Vision transmitter.
</summary>
            <remarks>
                <para>Note that this overload of Open is for receiving blocks that are multicasted from a GigE Vision transmitter to a given multicast group.
To receive unicasted data, refer to the other group of overloads of the Open method.</para>
                <para>Multicasting is the delivery of data to a group of receivers simultaneously in a single transmission.</para>
                <para>The following example illustrates how to multicast data from one transmitter to a given set of receivers:
<list type="bullet"><item><description>Connect receivers and transmitter to an IGMP compliant switch.</description></item><item><description>The GigE Vision transmitter begins transmitting to a multicast group (i.e. 239.192.1.1:1042).</description></item><item><description>The GigE Vision transmitter has a control channel listening for device discovery requests and packet resend requests on a given IP address (i.e. 169.254.1.1).</description></item><item><description>Receiver applications discover the device and subscribe to the multicast group (call Open( "169.254.1.1", "239.192.1.1", 1042 )) </description></item></list></para>
                <para>Why does the GigE Vision device address (aIPAddress) need to be specified?
In this example, the data is transmitted using the GVSP protocol to a multicast group (239.192.1.1:1042).
The receiving application contacts the device (IP address 169.254.1.1) using the GVCP protocol to ensure that it is reachable.
In addition to this, packet resend requests are directed from receiver to GigE Vision device using the GVCP control channel.
This is by design as per the GigEVision standard.</para>
                <para>Multicasting uses the IGMP (Internet Group Management Protocol) and requires an IGMP-compliant switch.
The switch maintains a list of subscribed peers associated with a given multicast group.
Multicast group IP addresses take the form <tt>239.192.xx.yy</tt>. 
It is also possible to use multicasting with a non-IGMP compliant switch or network. In that case, the multicast stream is simply
broadcasted to every connected entity on the network. It can be OK in controlled environment, but use with caution!
To learn more about IGMPv3, see RFC 3376 at www.ietf.org.</para>
                <para>For a complete illustration of how to use this method to receive data multicasted from a GigE Vision transmitter, refer to the following two samples:
<list type="bullet"><item><description>MulticastMaster - Connects to a GigE Vision device as a controler and tells it to begin streaming to a multicast address.</description></item><item><description>MulticastSlave - Illustrates the use of multicast version of Open by receiving the data the GigE Vision device is transmitting.</description></item></list></para>
            </remarks>
            <param name="aInfo">The GigE Vision transmitter's IP address.</param>
            <param name="aMulticastAddr">The multicast IP address to which the receiver subscribes and the GigE Vision transmitter sends data. (Set the streaming channel destination address (SCDA) on your GigE Vision transmitter accordingly by calling PvDevice::SetStreamDestination.)</param>
            <param name="aDataPort">The multicast port to which the receiver subscribes and the GigE Vision transmitter sends data. (Set the streaming channel port (SCP) on your GigE Vision transmitter accordingly by calling PvDevice::SetStreamDestination.)</param>
            <param name="aChannelID">The GigE Vision transmitter's streaming channel (default 0).</param>
            <param name="aLocalIPAddress">Deprecated, ignored.</param>
            <param name="aBuffersCapacity">The maximum number of buffers that can be stored simultaneously in the data receiver.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.BAD_VERSION" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvStreamGEV.Open(PvDotNet.PvDeviceInfo,System.String,System.UInt16,System.UInt16,System.String,System.UInt32)">
            <summary>
Begin receiving blocks (images or raw data) multicasted from a GigE Vision transmitter.
</summary>
            <remarks>
                <para>Note that this overload of Open is for receiving blocks that are multicasted from a GigE Vision transmitter to a given multicast group.
To receive unicasted data, refer to the other group of overloads of the Open method.</para>
                <para>Multicasting is the delivery of data to a group of receivers simultaneously in a single transmission.</para>
                <para>The following example illustrates how to multicast data from one transmitter to a given set of receivers:
<list type="bullet"><item><description>Connect receivers and transmitter to an IGMP compliant switch.</description></item><item><description>The GigE Vision transmitter begins transmitting to a multicast group (i.e. 239.192.1.1:1042).</description></item><item><description>The GigE Vision transmitter has a control channel listening for device discovery requests and packet resend requests on a given IP address (i.e. 169.254.1.1).</description></item><item><description>Receiver applications discover the device and subscribe to the multicast group (call Open( "169.254.1.1", "239.192.1.1", 1042 )) </description></item></list></para>
                <para>Why does the GigE Vision device address (aIPAddress) need to be specified?
In this example, the data is transmitted using the GVSP protocol to a multicast group (239.192.1.1:1042).
The receiving application contacts the device (IP address 169.254.1.1) using the GVCP protocol to ensure that it is reachable.
In addition to this, packet resend requests are directed from receiver to GigE Vision device using the GVCP control channel.
This is by design as per the GigEVision standard.</para>
                <para>Multicasting uses the IGMP (Internet Group Management Protocol) and requires an IGMP-compliant switch.
The switch maintains a list of subscribed peers associated with a given multicast group.
Multicast group IP addresses take the form <tt>239.192.xx.yy</tt>. 
It is also possible to use multicasting with a non-IGMP compliant switch or network. In that case, the multicast stream is simply
broadcasted to every connected entity on the network. It can be OK in controlled environment, but use with caution!
To learn more about IGMPv3, see RFC 3376 at www.ietf.org.</para>
                <para>For a complete illustration of how to use this method to receive data multicasted from a GigE Vision transmitter, refer to the following two samples:
<list type="bullet"><item><description>MulticastMaster - Connects to a GigE Vision device as a controler and tells it to begin streaming to a multicast address.</description></item><item><description>MulticastSlave - Illustrates the use of multicast version of Open by receiving the data the GigE Vision device is transmitting.</description></item></list></para>
            </remarks>
            <param name="aDeviceInfo">Device info object from a device finder.</param>
            <param name="aMulticastAddr">The multicast IP address to which the receiver subscribes and the GigE Vision transmitter sends data. (Set the streaming channel destination address (SCDA) on your GigE Vision transmitter accordingly by calling PvDevice::SetStreamDestination.)</param>
            <param name="aDataPort">The multicast port to which the receiver subscribes and the GigE Vision transmitter sends data. (Set the streaming channel port (SCP) on your GigE Vision transmitter accordingly by calling PvDevice::SetStreamDestination.)</param>
            <param name="aChannelID">The GigE Vision transmitter's streaming channel (default 0).</param>
            <param name="aLocalIPAddress">Deprecated, ignored.</param>
            <param name="aBuffersCapacity">The maximum number of buffers that can be stored simultaneously in the data receiver.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.BAD_VERSION" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvStreamGEV.Open(System.String,System.String,System.UInt16)">
            <summary>
Begin receiving blocks (images or raw data) multicasted from a GigE Vision transmitter.
</summary>
            <remarks>
                <para>Note that this overload of Open is for receiving blocks that are multicasted from a GigE Vision transmitter to a given multicast group.
To receive unicasted data, refer to the other group of overloads of the Open method.</para>
                <para>Multicasting is the delivery of data to a group of receivers simultaneously in a single transmission.</para>
                <para>The following example illustrates how to multicast data from one transmitter to a given set of receivers:
<list type="bullet"><item><description>Connect receivers and transmitter to an IGMP compliant switch.</description></item><item><description>The GigE Vision transmitter begins transmitting to a multicast group (i.e. 239.192.1.1:1042).</description></item><item><description>The GigE Vision transmitter has a control channel listening for device discovery requests and packet resend requests on a given IP address (i.e. 169.254.1.1).</description></item><item><description>Receiver applications discover the device and subscribe to the multicast group (call Open( "169.254.1.1", "239.192.1.1", 1042 )) </description></item></list></para>
                <para>Why does the GigE Vision device address (aIPAddress) need to be specified?
In this example, the data is transmitted using the GVSP protocol to a multicast group (239.192.1.1:1042).
The receiving application contacts the device (IP address 169.254.1.1) using the GVCP protocol to ensure that it is reachable.
In addition to this, packet resend requests are directed from receiver to GigE Vision device using the GVCP control channel.
This is by design as per the GigEVision standard.</para>
                <para>Multicasting uses the IGMP (Internet Group Management Protocol) and requires an IGMP-compliant switch.
The switch maintains a list of subscribed peers associated with a given multicast group.
Multicast group IP addresses take the form <tt>239.192.xx.yy</tt>. 
It is also possible to use multicasting with a non-IGMP compliant switch or network. In that case, the multicast stream is simply
broadcasted to every connected entity on the network. It can be OK in controlled environment, but use with caution!
To learn more about IGMPv3, see RFC 3376 at www.ietf.org.</para>
                <para>For a complete illustration of how to use this method to receive data multicasted from a GigE Vision transmitter, refer to the following two samples:
<list type="bullet"><item><description>MulticastMaster - Connects to a GigE Vision device as a controler and tells it to begin streaming to a multicast address.</description></item><item><description>MulticastSlave - Illustrates the use of multicast version of Open by receiving the data the GigE Vision device is transmitting.</description></item></list></para>
            </remarks>
            <param name="aInfo">The GigE Vision transmitter's IP address.</param>
            <param name="aMulticastAddr">The multicast IP address to which the receiver subscribes and the GigE Vision transmitter sends data. (Set the streaming channel destination address (SCDA) on your GigE Vision transmitter accordingly by calling PvDevice.StreamDestination.)</param>
            <param name="aDataPort">The multicast port to which the receiver subscribes and the GigE Vision transmitter sends data. (Set the streaming channel port (SCP) on your GigE Vision transmitter accordingly by calling PvDevice.StreamDestination.)</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.BAD_VERSION" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvStreamGEV.Open(PvDotNet.PvDeviceInfo,System.String,System.UInt16)">
            <summary>
Begin receiving blocks (images or raw data) multicasted from a GigE Vision transmitter.
</summary>
            <remarks>
                <para>Note that this overload of Open is for receiving blocks that are multicasted from a GigE Vision transmitter to a given multicast group.
To receive unicasted data, refer to the other group of overloads of the Open method.</para>
                <para>Multicasting is the delivery of data to a group of receivers simultaneously in a single transmission.</para>
                <para>The following example illustrates how to multicast data from one transmitter to a given set of receivers:
<list type="bullet"><item><description>Connect receivers and transmitter to an IGMP compliant switch.</description></item><item><description>The GigE Vision transmitter begins transmitting to a multicast group (i.e. 239.192.1.1:1042).</description></item><item><description>The GigE Vision transmitter has a control channel listening for device discovery requests and packet resend requests on a given IP address (i.e. 169.254.1.1).</description></item><item><description>Receiver applications discover the device and subscribe to the multicast group (call Open( "169.254.1.1", "239.192.1.1", 1042 )) </description></item></list></para>
                <para>Why does the GigE Vision device address (aIPAddress) need to be specified?
In this example, the data is transmitted using the GVSP protocol to a multicast group (239.192.1.1:1042).
The receiving application contacts the device (IP address 169.254.1.1) using the GVCP protocol to ensure that it is reachable.
In addition to this, packet resend requests are directed from receiver to GigE Vision device using the GVCP control channel.
This is by design as per the GigEVision standard.</para>
                <para>Multicasting uses the IGMP (Internet Group Management Protocol) and requires an IGMP-compliant switch.
The switch maintains a list of subscribed peers associated with a given multicast group.
Multicast group IP addresses take the form <tt>239.192.xx.yy</tt>. 
It is also possible to use multicasting with a non-IGMP compliant switch or network. In that case, the multicast stream is simply
broadcasted to every connected entity on the network. It can be OK in controlled environment, but use with caution!
To learn more about IGMPv3, see RFC 3376 at www.ietf.org.</para>
                <para>For a complete illustration of how to use this method to receive data multicasted from a GigE Vision transmitter, refer to the following two samples:
<list type="bullet"><item><description>MulticastMaster - Connects to a GigE Vision device as a controler and tells it to begin streaming to a multicast address.</description></item><item><description>MulticastSlave - Illustrates the use of multicast version of Open by receiving the data the GigE Vision device is transmitting.</description></item></list></para>
            </remarks>
            <param name="aDeviceInfo">Device info object from a device finder.</param>
            <param name="aMulticastAddr">The multicast IP address to which the receiver subscribes and the GigE Vision transmitter sends data. (Set the streaming channel destination address (SCDA) on your GigE Vision transmitter accordingly by calling PvDevice.StreamDestination.)</param>
            <param name="aDataPort">The multicast port to which the receiver subscribes and the GigE Vision transmitter sends data. (Set the streaming channel port (SCP) on your GigE Vision transmitter accordingly by calling PvDevice.StreamDestination.)</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.BAD_VERSION" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvStreamGEV.Open(System.String,System.UInt16,System.UInt16,System.String,System.UInt32)">
            <summary>
Begin receiving blocks (images or raw data) unicasted from a GigE Vision transmitter.
</summary>
            <remarks>
Note that this overload of Open is for receiving blocks that are unicasted from a GigE Vision transmitter to an interface on the same subnet.
To receive multicasted data, refer to the other group of overloads of the Open method.
</remarks>
            <param name="aInfo">The GigE Vision transmitter's IP address.</param>
            <param name="aLocalPort">Deprecated, ignored.</param>
            <param name="aChannelID">The GigE Vision transmitter's streaming channel (default 0).</param>
            <param name="aLocalIPAddress">The local IP address upon which to begin receiving incoming data. An empty string (default) indicates that the local IP address will be assigned automatically. Call GetLocalIPAddress afterwards to obtain the local IP address that was assigned by the system. Set the streaming channel port number (SCP) on your GigE Vision transmitter accordingly by calling PvDevice.StreamDestination.</param>
            <param name="aBuffersCapacity">The maximum number of buffers that can be stored simultaneously in the data receiver.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.BAD_VERSION" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvStreamGEV.Open(PvDotNet.PvDeviceInfo,System.UInt16,System.UInt16,System.String,System.UInt32)">
            <summary>
Begin receiving blocks (images or raw data) unicasted from a GigE Vision transmitter.
</summary>
            <remarks>
Note that this overload of Open is for receiving blocks that are unicasted from a GigE Vision transmitter to an interface on the same subnet.
To receive multicasted data, refer to the other group of overloads of the Open method.
</remarks>
            <param name="aDeviceInfo">Device info object from a device finder.</param>
            <param name="aLocalPort">The local port upon which to begin receiving incoming data. A value of 0 (default) indicates that the local port will be assigned automatically. Call GetLocalPort afterwards to obtain the port number that was assigned by the system. Set the streaming channel destination address (SCDA) on your GigE Vision transmitter accordingly by calling PvDevice.StreamDestination.</param>
            <param name="aChannelID">The GigE Vision transmitter's streaming channel (default 0).</param>
            <param name="aLocalIPAddress">Deprecated, ignored.</param>
            <param name="aBuffersCapacity">The maximum number of buffers that can be stored simultaneously in the data receiver.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.BAD_VERSION" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvStreamGEV.Open(System.String)">
            <summary>
Begin receiving blocks (images or raw data) unicasted from a GigE Vision transmitter.
</summary>
            <remarks>
Note that this overload of Open is for receiving blocks that are unicasted from a GigE Vision transmitter to an interface on the same subnet.
To receive multicasted data, refer to the other group of overloads of the Open method.
</remarks>
            <param name="aInfo">The GigE Vision transmitter's IP address.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.BAD_VERSION" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvStreamGEV.Open(PvDotNet.PvDeviceInfo)">
            <summary>Opens a stream object from a device info object.</summary>
            <param name="aDeviceInfo">Device info object from a device finder.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.BAD_VERSION" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvStreamGEV.Finalize">
            <summary>
Finalizer.
</summary>
        </member>
        <member name="M:PvDotNet.PvStreamGEV.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="M:PvDotNet.PvStreamGEV.#ctor">
            <summary>
Constructor.
</summary>
        </member>
        <member name="T:PvDotNet.PvStreamGEV">
            <summary>Receive data from a GigE Vision.</summary>
            <remark>
This provides a means of opening a connection to the data receiver and obtaining data from it.
</remark>
        </member>
        <member name="M:PvDotNet.PvDevicePleoraProtocol.SetIPConfiguration(System.String,System.String,System.String,System.String)">
            <summary>Sets the Pleora Protocol device's IP address.</summary>
            <remark>
                <para>This static method lets you configure the Pleora Protocol device's IP address.</para>
            </remark>
            <param name="aMACAddress">The Pleora Protocol device's MAC address.</param>
            <param name="aIP">The Pleora Protocol device's new IP address.</param>
            <param name="aSubnetMask">The Pleora Protocol device's new subnet mask.</param>
            <param name="aGateway">The Pleora Protocol device's new gateway.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.OK" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /></description></item></list></exception>
        </member>
        <member name="T:PvDotNet.PvDevicePleoraProtocol">
            <summary>
Simply allows changing the IP configuration of a Pleora Protocol device.
</summary>
        </member>
        <member name="M:PvDotNet.PvDevice.#ctor">
            <summary>
Constructor.
</summary>
        </member>
        <member name="P:PvDotNet.PvDevice.UniqueID">
            <summary>Returns a unique string identifier for the device object.</summary>
        </member>
        <member name="P:PvDotNet.PvDevice.PayloadSize">
            <summary>Returns the payload size the device is currently configured to stream with.</summary>
            <remarks>
                <para>This method attempts to read the GenICam PayloadSize parameter of the device. If the operation fails
the payload size is computed from width, height and pixel format as a fall back. If even this fails,
a value that is still valid to allocate buffers is finally returned.</para>
            </remarks>
        </member>
        <member name="M:PvDotNet.PvDevice.StreamDisable(System.UInt32)">
            <summary>Disables streaming on the device.</summary>
            <remark>
                <para> For GigE Vision devices, this takes care of resetting the TLParamsLocked so that changes
to streaming related parameters are possible again.</para>
                <para>For USB3 Vision devices, this takes care of the TLParamsLocked and sets the streaming 
enable bit on the device.</para>
                <para>StreamDisable should be called after the AcquisitionStop GenICam command has been executed
and all images have been received.</para>
            </remark>
            <param name="aChannel">The channel on which to disable streaming.</param>
            <returns>
                <list type="bullet">
                    <item>
                        <description>OK</description>
                    </item>
                    <item>
                        <description>NOT_CONNECTED</description>
                    </item>
                    <item>
                        <description>GENERIC_ERROR</description>
                    </item>
                    <item>
                        <description>INVALID_PARAMETER</description>
                    </item>
                </list>
            </returns>
        </member>
        <member name="M:PvDotNet.PvDevice.StreamDisable">
            <summary>Disables streaming on the device.</summary>
            <remark>
                <param>See the <see cref="M:PvDotNet.PvDevice.StreamDisable(System.UInt32)" /> method to disable streaming on the device with specified channel.</param>
                <para> For GigE Vision devices, this takes care of resetting the TLParamsLocked so that changes
to streaming related parameters are possible again.</para>
                <para>For USB3 Vision devices, this takes care of the TLParamsLocked and sets the streaming 
enable bit on the device.</para>
                <para>StreamDisable should be called after the AcquisitionStop GenICam command has been executed
and all images have been received.</para>
            </remark>
            <returns>
                <list type="bullet">
                    <item>
                        <description>OK</description>
                    </item>
                    <item>
                        <description>NOT_CONNECTED</description>
                    </item>
                    <item>
                        <description>GENERIC_ERROR</description>
                    </item>
                    <item>
                        <description>INVALID_PARAMETER</description>
                    </item>
                </list>
            </returns>
        </member>
        <member name="M:PvDotNet.PvDevice.StreamEnable(System.UInt32)">
            <summary>Enables streaming on the device.</summary>
            <remark>
                <param>Method to enable streaming on the device with specified channel.</param>
                <para>For GigE Vision devices, this takes care of resetting the TLParamsLocked so that changes
to streaming related parameters are possible again.</para>
                <para>For USB3 Vision devices, this takes care of the TLParamsLocked and sets the streaming 
enable bit on the device.</para>
                <para>StreamDisable should be called after the AcquisitionStop GenICam command has been executed
and all images have been received.</para>
            </remark>
            <param name="aChannel">The channel on which to enable streaming.</param>
            <returns>
                <list type="bullet">
                    <item>
                        <description>OK</description>
                    </item>
                    <item>
                        <description>NOT_CONNECTED</description>
                    </item>
                    <item>
                        <description>GENERIC_ERROR</description>
                    </item>
                    <item>
                        <description>INVALID_PARAMETER</description>
                    </item>
                </list>
            </returns>
        </member>
        <member name="M:PvDotNet.PvDevice.StreamEnable">
            <summary>Enables streaming on the device.</summary>
            <remark>
                <param>See the <see cref="M:PvDotNet.PvDevice.StreamEnable(System.UInt32)" /> method to enable streaming on the device with specified channel.</param>
                <para>For GigE Vision devices, this takes care of setting the TLParamsLocked so that changes
to streaming related parameters are prevent in the GenICam interface of the device.</para>
                <para>For USB3 Vision devices, this takes care of the TLParamsLocked, configures the driver
for streaming and sets the streaming enable bit on the device.</para>
                <para>After calling StreamEnable, the user must still execute the AcquisitionStart GenICam command
of the device to instruct the device to begin acquisition.</para>
            </remark>
            <returns>
                <list type="bullet">
                    <item>
                        <description>OK</description>
                    </item>
                    <item>
                        <description>NOT_CONNECTED</description>
                    </item>
                    <item>
                        <description>GENERIC_ERROR</description>
                    </item>
                    <item>
                        <description>INVALID_PARAMETER</description>
                    </item>
                </list>
            </returns>
        </member>
        <member name="E:PvDotNet.PvDevice.OnCmdLinkWriteSafe">
            <summary>
Callback invoked after a port write, safe version.
</summary>
            <remarks>
                <para>Used to report write activity  on the GenApi iPort implementation of the GVCP 
command link of the PvDevice.</para>
                <para>The callback is invoked AFTER the write operation. The content of aBuffer
represents the data that was written to the device.</para>
                <para>This callback is only invoked on a successful read operation.</para>
                <para>If the delegate aLength parameter is 4 bytes, that data is represented as a 4 byte value formatted as big-endian.
If data is more that 4 bytes, it is presented as a stream of bytes requiring proper interpretation.</para>
                <para>See delegate documentation for more information.</para>
            </remarks>
        </member>
        <member name="E:PvDotNet.PvDevice.OnCmdLinkWrite">
            <summary>
Callback invoked after a port write, unsafe version.
</summary>
            <remarks>
See safe version of this method for more information. When possible, it is recommended to
use the safe version of this event.
</remarks>
        </member>
        <member name="E:PvDotNet.PvDevice.OnCmdLinkReadSafe">
            <summary>
Callback invoked after a port read, safe version.
</summary>
            <remarks>
                <para>Used to report read activity  on the GenApi iPort implementation of the GVCP 
command link of the PvDevice.</para>
                <para>The callback is invoked AFTER the read operation so the content of aBuffer
contains the data that was read from the device.</para>
                <para>This callback is only invoked on a successful read operation.</para>
                <para>If the delegate aLength parameter is 4 bytes, that data is represented as a 4 byte value formatted as big-endian.
If data is more that 4 bytes, it is presented as a stream of bytes requiring proper interpretation.</para>
                <para>See delegate documentation for more information.</para>
            </remarks>
        </member>
        <member name="E:PvDotNet.PvDevice.OnCmdLinkRead">
            <summary>
Callback invoked after a port read, unsafe version.
</summary>
            <remarks>
See safe version of this method for more information. When possible, it is recommended to
use the safe version of this event.
</remarks>
        </member>
        <member name="E:PvDotNet.PvDevice.OnEventGenICam">
            <summary>
Messaging channel GenICam event notification.
</summary>
            <remarks>
                <para>This OnEvent handler lets users access the event as
mapped through the GenApi interface of the device.</para>
                <para>Unlike the other OnEvent that provides a pointer to the raw event data,
the data is provided as a list of GenICam parameters that have been invalidated
when the event has been attached to the GenApi node map of the device.</para>
                <para>If events with no data or events with data not mapped in the GenICam interface
of the device are received, this callback is still invoked by the parameter
list containing is not provided, it is simply set to NULL.</para>
                <para>See delegate documentation for more information.</para>
            </remarks>
        </member>
        <member name="E:PvDotNet.PvDevice.OnEventSafe">
            <summary>
Messaging channel raw event notification - safe version.
</summary>
            <remarks>
                <para>If the delegate aData parameter is not NULL, it is as received on the wire in the device's endianess.
All other parameters are corrected for the host's endianess.</para>
                <para>The OnEvent handler lets users access the raw event before
it is forwarded to the GenICam layer.</para>
                <para>It is highly recommended to always use the OnEventGenICam when possible. Use of raw events assume a 
good knowledge of the device implementation like event ID and data mapping.</para>
                <para>See delegate documentation for more information.</para>
            </remarks>
        </member>
        <member name="E:PvDotNet.PvDevice.OnEvent">
            <summary>
Messaging channel raw event notification - unsafe version.
</summary>
            <remarks>
See safe version of this method for more information. When possible, it is recommended to
use the safe version of this event.
</remarks>
        </member>
        <member name="E:PvDotNet.PvDevice.OnLinkReconnected">
            <summary>
Callback that is invoked just after PvDevice automatically reconnects with the device.
</summary>
            <remarks>
                <para>See delegate documentation for more information.</para>
                <para>This callback is invoked when the PvDevice is configured for automatic reconnection
and it was able to reconnect the device. However, it is now recommended to not use this mode:
disconnect the device on OnLinkDisconnected and simply try reconnecting with Connect yourself. </para>
            </remarks>
        </member>
        <member name="E:PvDotNet.PvDevice.OnLinkDisconnected">
            <summary>
Notification that the PvDevice unexpectedly lost contact with the device.
</summary>
            <remarks>
                <para>See delegate documentation for more information.</para>
            </remarks>
        </member>
        <member name="P:PvDotNet.PvDevice.InterruptQueueThreadPriority">
            <summary>
Set/Get the priority of the interrupt queue thread
</summary>
            <remarks>
                <para>This thread is simply used to fire/invoke the OnLinkDisconnected and OnLinkReconnected PvDeviceEventSink events.</para>
                <para>This thread takes all messages queued for deferred processing by the interrupt link thread and 
fires all GenApi and PvDeviceEventSink callback. All callbacks are fired/run in the context of this thread.</para>
            </remarks>
        </member>
        <member name="P:PvDotNet.PvDevice.InterruptLinkThreadPriority">
            <summary>
Set / Get the priority of the interrupt link thread
</summary>
            <remarks>
Interrupt link thread receives messaging channel packets from the device, sends acknowledge 
back and queues the message in the interrupt queue. Process and callbacks are not done from this thread.
This thread takes all messages queued for deferred processing by the interrupt link thread and 
fires all GenApi and PvDeviceEventSink callback. All callbacks are fired/run in the context of this thread.
</remarks>
        </member>
        <member name="P:PvDotNet.PvDevice.HeartbeatThreadPriority">
            <summary>
Set/Get the priority of the heartbeat thread
</summary>
            <remarks>
                <para>The heartbeat thread priority is critical to most applications.
This thread must never starve against any other system thread to the risk of losing the device connection.</para>
                <para>This thread takes all messages queued for deferred processing by the interrupt link thread and 
fires all GenApi and PvDeviceEventSink callback. All callbacks are fired/run in the context of this thread.</para>
            </remarks>
        </member>
        <member name="M:PvDotNet.PvDevice.WaitForMessagingChannelIdle(System.UInt32)">
            <summary>
Waits for the messaging channel to become idle.
</summary>
            <remarks>
This method returns once the host-side messaging channel in-queue is empty
or aTimeout (milliseconds) has elapsed.
</remarks>
            <param name="aTimeout">Maximum time to wait, in milliseconds.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /></description></item><item><description>TIMEOUT </description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvDevice.WriteMemory(System.UInt32,System.Byte*,System.UInt32)">
            <summary>
Writes bytes starting at a specific register address on the device.
</summary>
            <remarks>
                <para>See warnings about accessing the register map directly in WriteRegister.</para>
                <para>Not all GigE Vision devices are supporting the write memory operation. When using
this method on a device not supporting write memory operations, the write is 
broken down in as many write register commands as required.</para>
            </remarks>
            <param name="aAddress">Start address of the write memory operation (mod 4).</param>
            <param name="aSource">Buffer holding the data to write to the device.</param>
            <param name="aByteCount">Bytes to write to the device (mod 4, non 0, max 536)</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /></description></item><item><description>TIMEOUT </description></item><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.NETWORK_ERROR" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvDevice.ReadMemory(System.UInt32,System.Byte*,System.UInt32)">
            <summary>
Reads bytes starting at a specific register address on the device.
</summary>
            <remarks>
See warnings about accessing the register map directly in WriteRegister.
</remarks>
            <param name="aAddress">Start address of the read memory operation (mod 4).</param>
            <param name="aDestination">Buffer where to write data read from the device.</param>
            <param name="aByteCount">Bytes to read from the device (mod 4, non 0, max 536)</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /></description></item><item><description>TIMEOUT </description></item><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.NETWORK_ERROR" /></description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvDevice.CommunicationParameters">
            <summary>
Get the parameters used to define how PvDevice connects to and communicates with the device.
</summary>
            <remarks>
For a listing of all the available parameters, refer to Communication Parameters for either GigE Vision or USB3 Vision devices.
</remarks>
            <returns>The parameters used to define how PvDevice connects to and communicates with the device.</returns>
        </member>
        <member name="P:PvDotNet.PvDevice.Parameters">
            <summary>
The parameters used to control the device to which you are connected
</summary>
            <remarks>
Each device provides its own GenICam XML file with parameters describing its behaviour referred to as features.
The PvGenParameterArray object returned by this method provides an interface to these features.
</remarks>
        </member>
        <member name="P:PvDotNet.PvDevice.DefaultGenICamXMLFilename">
            <summary>
Returns a good default filename to use with DumpGenICamXML.
</summary>
            <remarks>
                <para>The filename is built from the URL that was used in order to locate
the GenICam XML file of the device.</para>
            </remarks>
        </member>
        <member name="M:PvDotNet.PvDevice.DumpGenICamXML(System.String)">
            <summary>
Save the device's GenICam XML file to disk.
</summary>
            <remark>
                <para>If the XML is stored in a zip file on the device, the zip file containing the XML 
is saved on the disk.</para>
            </remark>
            <param name="aFilename">The file's name.</param>
        </member>
        <member name="P:PvDotNet.PvDevice.IsPleoraPowered">
            <summary>
True if this PvDevice is currently connected to a device, false otherwise.
</summary>
            <summary>Test if this <see cref="T:PvDotNet.PvDevice" /> is currently connected to a Pleora powered GigE Vision or USB3 Vision device.</summary>
            <remark>True if this <see cref="T:PvDotNet.PvDevice" /> is currently connected to a Pleora powered GigE Vision or USB3 Vision device, false otherwise.</remark>
        </member>
        <member name="P:PvDotNet.PvDevice.IsConnected">
            <summary>
True if this PvDevice is currently connected to a device, false otherwise.
</summary>
        </member>
        <member name="M:PvDotNet.PvDevice.Disconnect">
            <summary>
Disconnect the PvDevice object from the device to which it is currently connected.
</summary>
        </member>
        <member name="M:PvDotNet.PvDevice.Connect(System.String)">
            <summary>
Connect to a GigE Vision or USB3 Vision device.
</summary>
            <remarks>
1. If you know the GigE Vision device's IP address, MAC address or DeviceUserID, you can use this method to connect to it.
2. If you know the USB3 Vision device's GUID or DeviceUserID, you can use this method to connect it.
3. If aInfo contains an IP address, the connection attempt connecting a GigE Vision device is direct.
<list type="bullet"><item><description>An internal <see cref="T:PvDotNet.PvSystem" /> is used to find all reachable GigE Vision devices.</description></item><item><description>Found devices are browsed, looking for a match on the MAC address.</description></item><item><description>If the device is found, connection is attempted.</description></item></list>
4. If aInfo contains a USB3 Vision GUID:
<list type="bullet"><item><description>All USB3 Vision devices are enumerated.</description></item><item><description>Found devices are browsed, looking for a match on the GUID.</description></item><item><description>If the device is found, connection is attempted.</description></item></list>
5. If aInfo contains a device user ID:
<list type="bullet"><item><description>All GigE Vision and USB3 Vision are enumerated.</description></item><item><description>Found devices are browsed, looking for a match on device user ID.</description></item><item><description>If the device is found, connection is attempted.</description></item></list></remarks>
            <param name="aInfo">Information that uniquely identifies the GigE Vision device. You may use one of the following:
<list type="bullet"><item><description>GigE Vision device's MAC address. Use the form 00:11:22:33:44:5F.</description></item><item><description>GigE Vision device's IP Address. Use the form 192.168.1.114 </description></item><item><description>GigE Vision or USB3 Vision device's DeviceUserID.</description></item><item><description>USB3 Vision GUID.</description></item></list></param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.NETWORK_ERROR" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.TIMEOUT" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.THREAD_ERROR" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.GENICAM_XML_ERROR" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_SUPPORTED" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.CANT_READ_MANIFEST" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvDevice.Connect(PvDotNet.PvDeviceInfo)">
            <summary>
Connect to a GigE Vision or USB3 Vision device.
</summary>
            <remarks>
The <see cref="M:PvDotNet.PvDevice.Connect(System.String)" /> method connects to a GigE Vision or USB3 Vision device found using a <see cref="T:PvDotNet.PvSystem" /> or PvDeviceFinderWnd object.
Only one device can be connected to at a time.
</remarks>
            <param name="aDeviceInfo">The device's network connectivity information; a PvDeviceInfo object.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.NETWORK_ERROR" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.TIMEOUT" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.THREAD_ERROR" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.GENICAM_XML_ERROR" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_SUPPORTED" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.CANT_READ_MANIFEST" /></description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvDevice.Type">
            <summary>
Get the device type.
</summary>
        </member>
        <member name="M:PvDotNet.PvDevice.CreateAndConnect(System.String)">
            <summary>Dynamically allocates a PvDevice of the right type.</summary>
            <remark>
This static method takes a generic PvDeviceInfo, creates the right type of PvDevice (PvDeviceGEV
or PvDeviceU3V) and connects it.
</remark>
            <param name="aInfo">String identifying the device. See <see cref="M:PvDotNet.PvDevice.Connect(System.String)" /> for more information.</param>
            <returns>A handle to the new object on success, nullptr on failure. See aResult for more information on the failure.</returns>
        </member>
        <member name="M:PvDotNet.PvDevice.CreateAndConnect(PvDotNet.PvDeviceInfo)">
            <summary>
Dynamically allocates a PvDevice of the right type.
</summary>
            <remark>
This static method takes a generic PvDeviceInfo, creates the right type of PvDevice (PvDeviceGEV
or PvDeviceU3V) and connects it.
</remark>
            <param name="aDeviceInfo">Pointer to the device information used to connect the device.</param>
            <returns>A handle to the new object on success, nullptr on failure. See aResult for more information on the failure.</returns>
        </member>
        <member name="M:PvDotNet.PvDevice.Finalize">
            <summary>
Finalizer.
</summary>
        </member>
        <member name="M:PvDotNet.PvDevice.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="T:PvDotNet.PvDevice">
            <summary>
Connect, configure and control a GigE Vision or USB3 Vision device. This class cannot be instantiated,
use PvDeviceGEV to control a GigE Vision device and PvDeviceU3V to control a USB3 Vision device.
</summary>
        </member>
        <member name="T:PvDotNet.OnCmdLinkWriteSafe">
            <summary>
PvDevice command link write event delegate. Safe version - using a managed byte array.
</summary>
            <param name="aDevice">Reference to the device object that invoked this callback.</param>
            <param name="aBuffer">Bytes array contaning the data to be written to the device.</param>
            <param name="aAddress">Address of the data written to the device.</param>
        </member>
        <member name="T:PvDotNet.OnCmdLinkWrite">
            <summary>
PvDevice command link write event delegate. Unsafe version - using direct data pointer.
</summary>
            <param name="aDevice">Reference to the device object that invoked this callback.</param>
            <param name="aBuffer">Pointer to the data that was written.</param>
            <param name="aAddress">Address of the data written to the device.</param>
            <param name="aLength">Length of the data, in bytes.</param>
        </member>
        <member name="T:PvDotNet.OnCmdLinkReadSafe">
            <summary>
PvDevice command link read event delegate. Safe version - using a managed byte array.
</summary>
            <param name="aDevice">Reference to the device object that invoked this callback.</param>
            <param name="aBuffer">Bytes array containing the data read from the device.</param>
            <param name="aAddress">Address of the data read on the device.</param>
        </member>
        <member name="T:PvDotNet.OnCmdLinkRead">
            <summary>
PvDevice command link read event delegate. Unsafe version - using direct data pointer.
</summary>
            <param name="aDevice">Reference to the device object that invoked this callback.</param>
            <param name="aBuffer">Pointer to the data read.</param>
            <param name="aAddress">Address of the data read on the device.</param>
            <param name="aLength">Length of the data, in bytes.</param>
        </member>
        <member name="T:PvDotNet.OnEventGenICam">
            <summary>
PvDevice messaging channel (interrupt) GenICam event delegate.
</summary>
            <param name="aDevice">Reference to the device object that invoked this callback.</param>
            <param name="aEventID">Event ID. Some standard GigE Vision or USB3 Vision event IDs are defined but usually device dependent.</param>
            <param name="aChannel">Streaming channel associated with the event, if any. 0xFFFF is used if the event is not associated to a streaming channel.</param>
            <param name="aBlockID">Streaming block ID associated with the event, if any. Can be used to pair one or more than one event with a block received from a device. 0 is used if the event is not associated to a block.</param>
            <param name="aTimestamp">Timestamp of the event on the time domain of the device. Time unit is defined by the device. 0 if timestamps are not supported by the device that generated the event.</param>
            <param name="aData">List containing all parameters invalidated by this event. Can be null if the event carried no data or the data was does not not invalidate any GenICam parameters of the device.</param>
        </member>
        <member name="T:PvDotNet.OnEventSafe">
            <summary>
PvDevice Messaging channel (interrupt) raw event delegate. Safe version - using a managed byte array.
</summary>
            <param name="aDevice">Reference to the device object that invoked this callback.</param>
            <param name="aEventID">Event ID. Some standard GigE Vision or USB3 Vision event IDs are defined but usually device dependent.</param>
            <param name="aChannel">Streaming channel associated with the event, if any. 0xFFFF is used if the event is not associated to a streaming channel.</param>
            <param name="aBlockID">Streaming block ID associated with the event, if any. Can be used to pair one or more than one event with a block received from a device. 0 is used if the event is not associated to a block.</param>
            <param name="aTimestamp">Timestamp of the event on the time domain of the device. Time unit is defined by the device. 0 if timestamps are not supported by the device that generated the event.</param>
            <param name="aData">Byte array of the Event Data, if applicable.</param>
        </member>
        <member name="T:PvDotNet.OnEvent">
            <summary>
Messaging channel (interrupt) raw event delegate. Unsafe version - using direct data pointer.
</summary>
            <param name="aDevice">Reference to the device object that invoked this callback.</param>
            <param name="aEventID">Event ID. Some standard GigE Vision or USB3 Vision event IDs are defined but usually device dependent.</param>
            <param name="aChannel">Streaming channel associated with the event, if any. 0xFFFF is used if the event is not associated to a streaming channel.</param>
            <param name="aBlockID">Streaming block ID associated with the event, if any. Can be used to pair one or more than one event with a block received from a device. 0 is used if the event is not associated to a block.</param>
            <param name="aTimestamp">Timestamp of the event on the time domain of the device. Time unit is defined by the device. 0 if timestamps are not supported by the device that generated the event.</param>
            <param name="aData">Reference to Event Data, if applicable.</param>
            <param name="aDataLength">Data length, in bytes.</param>
        </member>
        <member name="T:PvDotNet.OnLinkReconnectedHandler">
            <summary>
Deprecated, no longer used.
</summary>
            <remarks>
                <para>PvDevice no longer attempts automatic reconnection. After receiving an OnLinkDisconnected notification,
it is recommend to properly complete disconnection at the application level and then either attempting 
reconnection until it  succeeds or trying find the device in a loop with PvSystem::FindDevice until it 
succeeds and then finally reconnecting PvDevice, re-opening PvStream, etc.</para>
            </remarks>
            <param name="aDevice">Reference to the device object that invoked this callback.</param>
        </member>
        <member name="T:PvDotNet.OnLinkDisconnectedHandler">
            <summary>
PvDevice disconnected event delegate.
</summary>
            <remarks>
                <para>Device recovery (or reconnection) must be performed at the application level. After a 
OnLinkDisconnect callback, the current session should be cleaned up (disconnecting or deleting
your PvDevice controller, closing your PvStream, etc.) and you should start polling with FindDevice
from PvSystem to see when the device is available again. When the device is available, reconnect 
and restore any previously known good application configuration.</para>
                <para>For a complete working example of how to initiate recovery and continue streaming in the event 
of a connection loss, refer to the C++ ConnectionRecovery sample.</para>
            </remarks>
            <param name="aDevice">Reference to the device object that invoked this callback.</param>
        </member>
        <member name="M:PvDotNet.PvInterface.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="M:PvDotNet.PvInterface.#ctor(PvInterface*)">
            <summary>
Constructor.
</summary>
        </member>
        <member name="M:PvDotNet.PvInterface.ToString">
            <summary>
Gets the NIC's ID.
</summary>
            <returns>The NIC's ID.</returns>
        </member>
        <member name="M:PvDotNet.PvInterface.GetDeviceInfo(System.UInt32)">
            <summary>
Gets information identifying a device.
</summary>
            <remarks>
                <para>Returns information identifying a device discovered on this interface (network adapter or USB host controller).
This information can be used to connect and control the device.</para>
            </remarks>
            <param name="aIndex">The device's array position. The zero-based
                    parameter accepts 0 through <see cref="P:PvDotNet.PvInterface.DeviceCount" />-1. </param>
            <returns>Information identifying a device; a <see cref="T:PvDotNet.PvDeviceInfo" /> object. 
         If <i>aIndex</i> is out of bounds, the return is NULL.</returns>.
</member>
        <member name="P:PvDotNet.PvInterface.DeviceCount">
            <summary>
Gets the number of found devices on this <see cref="T:PvDotNet.PvInterface" />. 
</summary>
        </member>
        <member name="P:PvDotNet.PvInterface.CompareID">
            <summary>
Get a string that can be used to sort interfaces.
</summary>
            <remarks>
                <para>The content of the compare ID is not garanteed to be represent anything or to be
constant between revisions of the eBUS SDK.</para>
                <para>It should only be used to opaquely, uniquely compare other interface sorting IDs
to allow consistent sorting and ordering of interfaces, typically in a user 
interface context.</para>
            </remarks>
        </member>
        <member name="P:PvDotNet.PvInterface.UniqueID">
            <summary>
Get a string uniquely identifying the interface.
</summary>
            <remarks>
                <para>The content of the unique ID is not garanteed to be represent anything or to be
constant between revisions of the eBUS SDK. It should only be used to opaquely,
uniquely match other interface unique IDs from within the same application
life cycle.</para>
                <para>Do not assume the unique ID will be using a MAC address for network adapters or 
anything specifc for USB host controllers.</para>
                <para>If you need the MAC address of a network adapter, use PvNetworkAdapter.MACAddress.</para>
                <para>If you need specific information about a USB host controller, use the PvUSBHostController class.</para>
            </remarks>
        </member>
        <member name="P:PvDotNet.PvInterface.DisplayID">
            <summary>
Gets a string identifying the interface for display purpose.
</summary>
        </member>
        <member name="P:PvDotNet.PvInterface.Name">
            <summary>
Get the description of the NIC, as reported by the OS. 
</summary>
        </member>
        <member name="P:PvDotNet.PvInterface.Type">
            <summary>
Gets the NIC's driver type. Type of interface (eBUS, regular NIC, ...).
</summary>
        </member>
        <member name="T:PvDotNet.PvInterface">
            <summary>
Represents one interface (network adapter or USB host controller) on a system (the PC).
</summary>
            <remarks>
                <para>To use this class, see <see cref="T:PvDotNet.PvSystem" />.</para>
            </remarks>
        </member>
        <member name="T:PvDotNet.PvInterfaceType">
            <summary>
The type of driver that would be leveraged for streaming data on this interface. 
</summary>
        </member>
        <member name="F:PvDotNet.PvInterfaceType.NetworkAdapter">
            <summary>
Network interface type. 
</summary>
        </member>
        <member name="F:PvDotNet.PvInterfaceType.USBHostController">
            <summary>
USB host controller type. 
</summary>
        </member>
        <member name="T:PvDotNet.PvDeviceType">
            <summary>
Device type. 
</summary>
        </member>
        <member name="F:PvDotNet.PvDeviceType.DeviceU3V">
            <summary>
                <para>U3V device type.</para>
            </summary>
        </member>
        <member name="F:PvDotNet.PvDeviceType.DeviceGEV">
            <summary>
                <para>GEV device type.</para>
            </summary>
        </member>
        <member name="F:PvDotNet.PvDeviceType.Unknown">
            <summary>
                <para>Unknown device type.</para>
            </summary>
        </member>
        <member name="E:PvDotNet.PvAcquisitionStateManager.OnAcquisitionStateChanged">
            <summary>
Callback invoked after a acquisition state has changed.
</summary>
            <remarks>
                <para>See delegate documentation for more information.</para>
            </remarks>
        </member>
        <member name="P:PvDotNet.PvAcquisitionStateManager.Source">
            <summary>
Returns the source address.
</summary>
        </member>
        <member name="P:PvDotNet.PvAcquisitionStateManager.State">
            <summary>
Returns the state of the acquisition.
</summary>
        </member>
        <member name="M:PvDotNet.PvAcquisitionStateManager.Stop">
            <summary>
Stops the acquisition.
</summary>
            <remarks>
                <list type="number">
                    <item>
                        <description>Sends the AcquisitionStop command.</description>
                    </item>
                    <item>
                        <description>Releases TLParamsLocked.</description>
                    </item>
                </list>
            </remarks>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /> if the PvDevice is not valid or there are issues with some of the GenICam parameters.</description></item><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> can be propagated up if issues are encountered accessing the parameters of the device GenICam interface.</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvAcquisitionStateManager.Start">
            <summary>
Starts the acquisition.
</summary>
            <remarks>
                <list type="number">
                    <item>
                        <description>Selects the right source (if applicable) </description>
                    </item>
                    <item>
                        <description>Retrieves AcquisitionMode to configure the number of buffers to receive, allowing automatic unlock/stop if applicable.</description>
                    </item>
                    <item>
                        <description>Issue AcquisitionStart command to the device.</description>
                    </item>
                </list>
            </remarks>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /> if the PvDevice is not valid or there are issues with some of the GenICam parameters.</description></item><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> if TLParamsLocked is already set.</description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_IMPLEMENTED" /> if some critical GenICam parameters not implemented in the device GenICam interface.</description></item><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> can be propagated up if issues are encountered accessing the parameters of the device GenICam interface.</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvAcquisitionStateManager.Finalize">
            <summary>
Finalizer.
</summary>
        </member>
        <member name="M:PvDotNet.PvAcquisitionStateManager.Dispose">
            <summary>
Destructor
</summary>
        </member>
        <member name="M:PvDotNet.PvAcquisitionStateManager.#ctor(PvDotNet.PvDevice,PvDotNet.PvStream,System.UInt32)">
            <summary>
Constructor
</summary>
            <param name="aDevice">Reference to PvDevice acquisition controller.</param>
            <param name="aStream">Reference to PvStream receiving buffers. Optional.</param>
            <param name="aSource">Index of the source in SourceSelector to use. Optional.</param>
        </member>
        <member name="M:PvDotNet.PvAcquisitionStateManager.#ctor(PvDotNet.PvDevice,PvDotNet.PvStream)">
            <summary>
Constructor
</summary>
            <param name="aDevice">Reference to PvDevice acquisition controller.</param>
            <param name="aStream">Reference to PvStream receiving buffers. Optional.</param>
        </member>
        <member name="M:PvDotNet.PvAcquisitionStateManager.#ctor(PvDotNet.PvDevice)">
            <summary>
Constructor
</summary>
            <param name="aDevice">Reference to PvDevice acquisition controller.</param>
        </member>
        <member name="T:PvDotNet.PvAcquisitionStateManager">
            <summary>
Acquisition state manager, advanced TLParamsLocked manager.
</summary>
            <remarks>
                <para>Contains logic to manage the TLParamsLocked GenICam parameter of a PvDevice
over various acquisition modes.</para>
                <para>A PvDevice is provided to the constructor of this class. A PvStream is also 
usually provided. The Start and Stop methods are invoked to start and stop
the acquisition. If a stream is not provided, the acquisition state has 
to be reset manually for some acquisition mode as incoming buffers
cannot be reported/counted.</para>
                <para>It takes control of issuing Start/Stop methods to the AcquisitionStart and
AcquisitionStop GenICam commands of a device. It also counts frames (when applicable)
to automatically release TLParamsLocked when all the buffers have been accounted
for. It is possible to cancel the operation pre-emptively by calling Stop - if the
user wants to cancel the operation or the user knows some buffers were lost and will
never come.</para>
            </remarks>
        </member>
        <member name="T:PvDotNet.OnAcquisitionStateChanged">
            <summary>
PvAcquisitionStateManager acquisition state changed event delegate.
</summary>
            <param name="aDevice">Reference to the device controlled by the acquisition state manager.</param>
            <param name="aStream">Reference to the PvStream object.</param>
            <param name="aSource">Source for which the acquisition state changed.</param>
            <param name="aState">New acquisition state.</param>
        </member>
        <member name="T:PvDotNet.PvAcquisitionState">
            <summary>
To indicate the state of the acquisition.
</summary>
        </member>
        <member name="F:PvDotNet.PvAcquisitionState.Unlocked">
            <summary>
Acquisition state is unlocked - not streaming.
</summary>
        </member>
        <member name="F:PvDotNet.PvAcquisitionState.Locked">
            <summary>
Acquisition state is locked - streaming.
</summary>
        </member>
        <member name="F:PvDotNet.PvAcquisitionState.Unknown">
            <summary>
Unknown state of acquisition.
</summary>
        </member>
        <member name="P:PvDotNet.PvBufferWriter.Converter">
            <summary>
Returns a reference to the internal buffer converter.
</summary>
            <remarks>
                <para> When writing the buffer to a file requires a conversion, it is 
performed automatically by the PvBufferWriter. The converter
used for this operation can be configured using this method.
As an example, a RGB filter could be set or the Bayer
interpolation method could be selected.</para>
            </remarks>
        </member>
        <member name="M:PvDotNet.PvBufferWriter.Store(PvDotNet.PvBuffer,System.String,PvDotNet.PvBufferFormatType,System.UInt32@)">
            <summary>
Saves a  <see cref="T:PvDotNet.PvBuffer" /> to disk.
</summary>
            <remarks>
This method lets you save an image buffer (<see cref="T:PvDotNet.PvBuffer" /> object) to disk in a variety of formats.
If a conversion to color is required, it happens automatically within the <see cref="M:PvDotNet.PvBufferWriter.Store(PvDotNet.PvBuffer,System.String,PvDotNet.PvBufferFormatType,System.UInt32@)" /> method. If no
conversion to the required color format is available, Store fails.	
</remarks>
            <param name="aBuffer">The image to save.</param>
            <param name="aFilename">The filename, including extension. The format uses the same standard as the C fopen function. 
                        In C/C++, valid filenames include "myfile.raw", "..\\myfile.bmp", 
                        "C:\\myfile.bmp". </param>
            <param name="aType">The format of the image; a PvBufferFormatType enumeration.</param>
            <param name="aBytesWritten">A close approximation of how many bytes were written to the file.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /> (e.g. invalid PvBufferFormatType).</description></item><item><description><see cref="F:PvDotNet.PvResultCode.CANNOT_OPEN_FILE" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_DATA_FORMAT" />(The buffer can't be converted to the specified type).</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvBufferWriter.Finalize">
            <summary>
Finalizer.
</summary>
        </member>
        <member name="M:PvDotNet.PvBufferWriter.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="M:PvDotNet.PvBufferWriter.#ctor">
            <summary>
Constructor.
</summary>
        </member>
        <member name="T:PvDotNet.PvBufferWriter">
            <summary>
Saves the contents of a <see cref="T:PvDotNet.PvBuffer" /> object to a raw data file or bitmap.
</summary>
            <remarks>
                <para>
                    <b>To save an image buffer to disk:</b>
                </para>
                <list type="number">
                    <item>
                        <description>Acquire an image. See <see cref="T:PvDotNet.PvBuffer" />.</description>
                    </item>
                    <item>
                        <description>Create an image save. Use PvBufferWriter.PvBufferWriter.</description>
                    </item>
                    <item>
                        <description>Save the image to disk. Use <see cref="M:PvDotNet.PvBufferWriter.Store(PvDotNet.PvBuffer,System.String,PvDotNet.PvBufferFormatType,System.UInt32@)" />.</description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="P:PvDotNet.PvBufferConverter.ConversionThreadsPriority">
            <summary>
Set / Get the priority of the threads doing the conversion.
</summary>
            <remarks>
By default one conversion thread is created for each processing core of the system. 
We only allow setting priority for the threads of one converter object as a group.

If you change the thread priorities, it may affect the stability of the system. When communicating with your Pleora representative, 
ensure you tell them that you have changed the thread priority.
</remarks>
        </member>
        <member name="M:PvDotNet.PvBufferConverter.SetRGBFilter(PvDotNet.PvBufferConverterRGBFilter)">
            <summary>
Assigns a RGB filter to be used during conversion.
</summary>
            <remarks>
The configuration of the filter is copied to the internal converter's RGB filter. Changing aFilter
after calling this method has no effect on the RGB filtering performed during conversion.
</remarks>
            <param name="aFilter">The RGB filter to be used during conversion.</param>
        </member>
        <member name="M:PvDotNet.PvBufferConverter.ResetRGBFilter">
            <summary>
Resets the RGB filter used for conversion (if any).
</summary>
        </member>
        <member name="P:PvDotNet.PvBufferConverter.BayerFilter">
            <summary>
Gets and sets current optional Bayer filtering; filter's type is a PvBayerFilterType enumeration.
</summary>
        </member>
        <member name="M:PvDotNet.PvBufferConverter.Convert(PvDotNet.PvBuffer,PvDotNet.PvBuffer,System.Boolean,System.Boolean)">
            <summary>
Convert a buffer from one format to another.
</summary>
            <param name="aSource">The original image/buffer.</param>
            <param name="aDestination">The new image/buffer.</param>
            <param name="aReallocIfNeeded"> Depending on the conversion, the memory footprint
                                of the new image may be greater than aDestination
                                current size. By setting this parameter to true, the 
                                buffer is re-allocated if aDestination is too small.
                                If aDestination memory buffer is not owned by the 
                                <see cref="T:PvDotNet.PvBuffer" /> and is too small, Convert fails.</param>
            <param name="aFlipY">If true, while converting the image is flipped on its Y axis.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description>INVALID_DATA_FORMAT.</description></item><item><description>GENERIC_ERROR.</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvBufferConverter.Convert(PvDotNet.PvBuffer,PvDotNet.PvBuffer,System.Boolean)">
            <summary>
Convert a buffer from one format to another.
</summary>
            <param name="aSource">The original image/buffer.</param>
            <param name="aDestination">The new image/buffer.</param>
            <param name="aReallocIfNeeded"> Depending on the conversion, the memory footprint
                                of the new image may be greater than aDestination
                                current size. By setting this parameter to true, the 
                                buffer is re-allocated if aDestination is too small.
                                If aDestination memory buffer is not owned by the 
                                <see cref="T:PvDotNet.PvBuffer" /> and is too small, Convert fails.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description>INVALID_DATA_FORMAT.</description></item><item><description>GENERIC_ERROR.</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvBufferConverter.Convert(PvDotNet.PvBuffer,PvDotNet.PvBuffer)">
            <summary>
Convert a buffer from one format to another. 
</summary>
            <remarks>
There is one overload for this method, refer to the other overload method:
<see cref="M:PvDotNet.PvBufferConverter.Convert(PvDotNet.PvBuffer,PvDotNet.PvBuffer,System.Boolean)" />.
</remarks>
            <param name="aSource">The original image/buffer.</param>
            <param name="aDestination">The new image/buffer.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description>INVALID_DATA_FORMAT./&gt; </description></item><item><description>GENERIC_ERROR./&gt; </description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvBufferConverter.IsConversionSupported(PvDotNet.PvPixelType,PvDotNet.PvPixelType)">
            <summary>
Test if a pixel type can be converted to another type.
</summary>
            <remarks>
                <para>Converting from one pixel type to another isn't a trivial mathematical calculation - all conversions require specialized, dedicated algorithms.</para>
                <para>The IsConversionSupported method tests if the Convert function has an available conversion algorithm.</para>
            </remarks>
            <param name="aSource">The original pixel type. For available pixel types, see PvPixelType.h.</param>
            <param name="aDestination">The new pixel type. See <i>aSource</i>.</param>
            <returns>True if Convert has an available conversion algorithm; otherwise, false.</returns>
        </member>
        <member name="M:PvDotNet.PvBufferConverter.Finalize">
            <summary>
Finalizer.
</summary>
        </member>
        <member name="M:PvDotNet.PvBufferConverter.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="M:PvDotNet.PvBufferConverter.#ctor(System.Int32)">
            <summary>
Constructor.
</summary>
            <param name="aMaxNumberOfThreads"> Maximum number of threads the buffer converter
is allowed to use in order to speed up conversion.
If 0 or smaller than 0, one thread per processor
is assumed. Threads have no specific processor
affinity.</param>
        </member>
        <member name="M:PvDotNet.PvBufferConverter.#ctor">
            <summary>
Constructor.
</summary>
        </member>
        <member name="T:PvDotNet.PvBufferConverter">
            <summary>
Used to convert a PvBuffer to another pixel type.
</summary>
            <remarks>
                <para>
                    <b>To change an image's format:</b>
                </para>
                <list type="number">
                    <item>
                        <description>Acquire an image. See PvStream.RetrieveBuffer.</description>
                    </item>
                    <item>
                        <description>Create an image-format converter (<see cref="T:PvDotNet.PvBufferConverter" /> object). PvBufferConverter.PvBufferConverter.</description>
                    </item>
                    <item>
                        <description>Test if you can convert your image to your preferred pixel type. Use <see cref="M:PvDotNet.PvBufferConverter.IsConversionSupported(PvDotNet.PvPixelType,PvDotNet.PvPixelType)" />.
   For your source pixel type, use PvBuffer.GetPixelType; for your destination, select an enumeration from
   PvPixelType.h.</description>
                    </item>
                    <item>
                        <description>Create a destination buffer. See <see cref="T:PvDotNet.PvBuffer" /> (you define the destination image's pixel type during this step).</description>
                    </item>
                    <item>
                        <description>Optionally, configure options like Bayer filtering, use <see cref="P:PvDotNet.PvBufferConverter.BayerFilter" />.</description>
                    </item>
                    <item>
                        <description>Convert the image to the new pixel type. Use <see cref="M:PvDotNet.PvBufferConverter.Convert(PvDotNet.PvBuffer,PvDotNet.PvBuffer)" />.</description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="T:PvDotNet.PvBayerFilterType">
            <summary>
Filter settings for the PvBufferConverter.BayerFilter property.  
</summary>
        </member>
        <member name="F:PvDotNet.PvBayerFilterType.Filter3X3">
            <summary>
3x3 kernel considered when converting from Bayer.
</summary>
        </member>
        <member name="F:PvDotNet.PvBayerFilterType.FilterSimple">
            <summary>
2x2 nearest neighbor used when converting from Bayer. 
</summary>
        </member>
        <member name="M:PvDotNet.PvBufferConverterRGBFilter.Reset">
            <summary>
Reset the RGB filter configuration.
</summary>
            <remarks>
                <para>This method resets the RGB filter configuration (#PvBufferConverterRGBFilter) to its default values.</para>
                <para>Gains are set to 1; offsets, to 0. After a reset, applying the filter doesn't change the image.</para>
            </remarks>
        </member>
        <member name="M:PvDotNet.PvBufferConverterRGBFilter.WhiteBalance(PvDotNet.PvBuffer)">
            <summary>
Calculate white-balance gains.
</summary>
            <remarks>
                <para>The WhiteBalance method receives an image and calculates
appropriate gains to white-balance the image.</para>
                <para>Internally, the #WhiteBalance method uses the following procedure:
<list type="bullet"><item><description>Calculate the average colors in the image: Bavg, Gavg, Ravg.</description></item><item><description>Select the maximum of the three averages: Max = max (Bavg, Gavg, Ravg).</description></item><item><description>Set the new gains, where Bgain = Max / Bavg, Ggain = Max / Gavg and Rgain = Max / Ravg</description></item></list></para>
                <para>The WhiteBalance method produces the best results for images that have an even mix of dark and light tones,
and an even mix of colors.</para>
            </remarks>
            <param name="aBuffer">The sample image; the image upon which to base the white-balance settings.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description>INVALID_PARAMETER.</description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvBufferConverterRGBFilter.OffsetB">
            <summary>
B offset (addition) of the RGB filter
</summary>
        </member>
        <member name="P:PvDotNet.PvBufferConverterRGBFilter.OffsetG">
            <summary>
G offset (addition) of the RGB filter
</summary>
        </member>
        <member name="P:PvDotNet.PvBufferConverterRGBFilter.OffsetR">
            <summary>
R offset (addition) of the RGB filter
</summary>
        </member>
        <member name="P:PvDotNet.PvBufferConverterRGBFilter.GainB">
            <summary>
B gain (multiplier) of the RGB filter
</summary>
        </member>
        <member name="P:PvDotNet.PvBufferConverterRGBFilter.GainG">
            <summary>
G gain (multiplier) of the RGB filter
</summary>
        </member>
        <member name="P:PvDotNet.PvBufferConverterRGBFilter.GainR">
            <summary>
R gain (multiplier) of the RGB filter
</summary>
        </member>
        <member name="M:PvDotNet.PvBufferConverterRGBFilter.Finalize">
            <summary>
Finalizer.
</summary>
        </member>
        <member name="M:PvDotNet.PvBufferConverterRGBFilter.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="M:PvDotNet.PvBufferConverterRGBFilter.#ctor">
            <summary>
Constructor.
</summary>
        </member>
        <member name="T:PvDotNet.PvBufferConverterRGBFilter">
            <summary>
Contains a RGB filter configuration that can be used with a PvBufferConverter.
</summary>
            <remarks>
                <para>To configure an RGB filter (manual):
<list type="bullet"><item><description>Create an RGB filter controller.</description></item><item><description>Set the filter's values. Use SetGain* and SetOffset* methods.</description></item></list></para>
                <para>To configure a white balance filter (automatic):
<list type="bullet"><item><description>Create an RGB filter object.</description></item><item><description>Calculate and apply white-balance settings. Use WhiteBalance.</description></item></list></para>
            </remarks>
        </member>
        <member name="T:PvDotNet.PvBufferFormatType">
            <summary>
Format type of the buffer.
</summary>
        </member>
        <member name="F:PvDotNet.PvBufferFormatType.TIFF">
            <summary>
TIFF type
</summary>
        </member>
        <member name="F:PvDotNet.PvBufferFormatType.Raw">
            <summary>
Raw type
</summary>
        </member>
        <member name="F:PvDotNet.PvBufferFormatType.BMP">
            <summary>
Bitmap type
</summary>
        </member>
        <member name="P:PvDotNet.PvVirtualDeviceGEV.DevicePortThreadPriority">
            <summary>Get/Set the priority of the thread used for GigE Vision control channel.</summary>
            <remark>
This thread listening for the virtual device on the GigE Vision control channel.
Handles read register, device discoveries, etc.
If you change the thread priorities, it may alternate the stability of the system. For this reason,
if you report a bug to Pleora, ensure to clearly mention that you change threads priorities.
</remark>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.OK" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.THREAD_ERROR" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvVirtualDeviceGEV.StopListening">
            <summary>Stop responding to GVCP traffic and close the connection.</summary>
        </member>
        <member name="M:PvDotNet.PvVirtualDeviceGEV.StartListening(System.String)">
            <summary>Begin responding to GVCP traffic on the specified network interface.</summary>
            <remark>
A PvVirtualDeviceGEV object listens for traffic on one socket at a time. To listen for GVCP traffic on more than one network interface, instantiate another PvVirtualDevice object.
</remark>
            <param name="aIPAddress">IP address of the network interface with which the virtual device will begin responding to GVCP traffic.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.OK" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvVirtualDeviceGEV.AddTransmitterGEV(PvDotNet.PvTransmitterGEV)">
            <summary>Add the GVSP transmitter that will issue the resend requests.</summary>
            <remark>
The order of addition will enforce the stream index.
Must be set before calling the <see cref="M:PvDotNet.PvVirtualDeviceGEV.StartListening(System.String)" /> function.
</remark>
            <param name="aTransmitterGEV">The transmitter to be added to the virtual device.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.OK" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.BUSY" /></description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvVirtualDeviceGEV.ModelName">
            <summary> Get/Set model name.</summary>
            <remark>
Only first 32 bytes will be used.
Must be set before calling the #StartListening function.
</remark>
        </member>
        <member name="P:PvDotNet.PvVirtualDeviceGEV.ManufacturerName">
            <summary> Get/Set manufacturer name.</summary>
            <remark>
Only first 32 bytes will be used.
Must be set before calling the #StartListening function.
</remark>
        </member>
        <member name="P:PvDotNet.PvVirtualDeviceGEV.SerialNumber">
            <summary> Get/Set the serial number.</summary>
            <remark>
Only 15 bytes will be used.
Must be set before calling the #StartListening function.
</remark>
        </member>
        <member name="P:PvDotNet.PvVirtualDeviceGEV.DeviceVersion">
            <summary> Get/Set the device version.</summary>
            <remark>
Only the first 32 bytes will be used.
Must be set before calling the #StartListening function.
</remark>
        </member>
        <member name="M:PvDotNet.PvVirtualDeviceGEV.GetGVCPCapabilityPacketResendCommandSupported">
            <summary> Get the current configuration for the packet resend command support. Returns true if resend is supported. Returns false otherwise.</summary>
            <returns>True if resend command is supported and false otherwise.</returns>
        </member>
        <member name="M:PvDotNet.PvVirtualDeviceGEV.SetGVCPCapabilityPacketResendCommandSupported(System.Boolean)">
            <summary> Configure the virtual GigE Vision device to support the packet resend command.</summary>
            <remark>
This parameter can only be used for virtual GigE Vision devices that use version 2.0 (or later) of the GigE Vision standard.
By default, the native ID types for the GigE Vision standard are always used.
Must be set before calling the #StartListening function.
</remark>
            <param name="aValue"> True to support packet resend commands.</param>
            <returns>
                <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description>OK, if successful.</description></item><item><description>BUSY, virtual device is listening.</description></item></list></exception>
            </returns>
        </member>
        <member name="M:PvDotNet.PvVirtualDeviceGEV.GetGEVSpecificationVersion(System.UInt16@,System.UInt16@)">
            <summary> Get the current version of the GigE Vision standard that is being used by the virtual GigE Vision device.</summary>
            <param name="aMajor">Returned major version number of the GigE Vision standard.</param>
            <param name="aMinor">Returned minor version number of the GigE Vision standard.</param>
            <returns>Major and minor version number on success.</returns>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description>OK, if successful.</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvVirtualDeviceGEV.SetGEVSpecificationVersion(System.UInt16,System.UInt16)">
            <summary> Set the version of the GigE Vision standard for the virtual GigE Vision device to use.</summary>
            <remark>
By default, version 2.0 of the standard is used. This version of the standard provides access to the
latest features, including extended chunk data.
Must be set before calling the #StartListening function.
</remark>
            <param name="aMajor">Major version number of the GigE Vision standard.</param>
            <param name="aMinor">Minor version number of the GigE Vision standard.</param>
            <returns>
                <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description>OK, if successful.</description></item><item><description>INVALID_PARAMETER, major number or minor number is not correct.</description></item><item><description>BUSY, virtual device is listening.</description></item></list></exception>
            </returns>
        </member>
        <member name="M:PvDotNet.PvVirtualDeviceGEV.Finalize">
            <summary>
Finalizer.
</summary>
        </member>
        <member name="M:PvDotNet.PvVirtualDeviceGEV.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="M:PvDotNet.PvVirtualDeviceGEV.#ctor">
            <summary>
Constructor.
</summary>
        </member>
        <member name="T:PvDotNet.PvVirtualDeviceGEV">
            <summary>Virtual GigE Vision device.</summary>
            <remark>
Used to provide basic GigE Vision device capabilities such as device discovery.
Can complement the PvTransmitterGEV class by allowing one to open a data receiver connection to it using <see cref="T:PvDotNet.PvStream" />.

Proper use of the PvVirtualDeviceGEV class is demonstrated in all transmitter samples.
</remark>
        </member>
        <member name="P:PvDotNet.PvStream.Parameters">
            <summary>Get the parameters defining how data is received from a GigE Vision transmitter.</summary>
            <returns>The parameters defining how data is received from a GigE Vision transmitter.</returns>
        </member>
        <member name="P:PvDotNet.PvStream.IsOpen">
            <summary>Test if the stream is open.</summary>
            <returns>True if the CreateAndOpen method has been called (without a subsequent <see cref="M:PvDotNet.PvStream.Close" /> call); otherwise, false.</returns>
        </member>
        <member name="P:PvDotNet.PvStream.Channel">
            <summary>Get the stream's Channel property.</summary>
            <returns>The stream's Channel property.</returns>
        </member>
        <member name="M:PvDotNet.PvStream.RetrieveBuffer(PvDotNet.PvBuffer@,PvDotNet.PvResult@)">
            <summary>Attempt to retrieve a queued buffer.</summary>
            <remarks>
                <para>To use this method, see also QueueBuffer.</para>
                <para>The RetrieveBuffer method blocks until one of the following occurs:</para>
                <list>
                    <item>
                        <description>The buffer is filled with a block (image or raw data).</description>
                    </item>
                    <item>
                        <description>The retrieve buffer operation times out: it exceeds aTimeout.</description>
                    </item>
                    <item>
                        <description>The acquisition fails (by being aborted, data receiver timeout as defined by ImageTimeout property, etc.)</description>
                    </item>
                </list>
                <para>Once the method returns, you can determine the ultimate success of the image acquisition by 
testing the aOperationResult parameter. For example, RetrieveBuffer may return PvResult::Code::OK,
even if the operation was aborted by a call to AbortQueuedBuffers or Close.</para>
                <para>In this case, aOperationResult would be PvResult::Code::ABORTED.</para>
                <para>The return value contains the RetrieveBuffer operation results and aOperationResult contains
the actual result (or failure) of the data receiver on this buffer. This method can
succeed in providing you the oldest buffer but the result of the operation may still be 
a failure - if acquisition was aborted, incomplete, etc.</para>
            </remarks>
            <param name="aBuffer">The buffer that holds the image.</param>
            <param name="aOperationResult">A pointer to the result of the acquisition operation on aBuffer, see PvBuffer::GetOperationResult.</param>
            <returns>
                <list type="bullet">
                    <item>
                        <description>
                            <see cref="F:PvDotNet.PvResultCode.OK" /> if the buffer has been properly queued.</description>
                    </item>
                    <item>
                        <description>
                            <see cref="F:PvDotNet.PvResultCode.TIMEOUT" /> if the buffer could not be queued. See PvResult::GetDescription for more information.</description>
                    </item>
                    <item>
                        <description>
                            <see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /> if the stream is not connected to a transmitter.</description>
                    </item>
                    <item>
                        <description>
                            <see cref="F:PvDotNet.PvResultCode.NO_MORE_ITEM" /> if no buffers queued.</description>
                    </item>
                    <item>
                        <description>
                            <see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" />
                        </description>
                    </item>
                    <item>
                        <description>
                            <see cref="F:PvDotNet.PvResultCode.NO_MORE_ENTRY" />
                        </description>
                    </item>
                    <item>
                        <description>
                            <see cref="F:PvDotNet.PvResultCode.BUSY" />
                        </description>
                    </item>
                </list>
            </returns>
        </member>
        <member name="M:PvDotNet.PvStream.RetrieveBuffer(PvDotNet.PvBuffer@,PvDotNet.PvResult@,System.UInt32)">
            <summary>Attempt to retrieve a queued buffer.</summary>
            <remarks>
                <para>To use this method, see also QueueBuffer.</para>
                <para>The RetrieveBuffer method blocks until one of the following occurs:</para>
                <list>
                    <item>
                        <description>The buffer is filled with a block (image or raw data).</description>
                    </item>
                    <item>
                        <description>The retrieve buffer operation times out: it exceeds aTimeout.</description>
                    </item>
                    <item>
                        <description>The acquisition fails (by being aborted, data receiver timeout as defined by ImageTimeout property, etc.)</description>
                    </item>
                </list>
                <para>Once the method returns, you can determine the ultimate success of the image acquisition by 
testing the aOperationResult parameter. For example, RetrieveBuffer may return PvResult::Code::OK,
even if the operation was aborted by a call to AbortQueuedBuffers or Close.</para>
                <para>In this case, aOperationResult would be PvResult::Code::ABORTED.</para>
                <para>The return value contains the RetrieveBuffer operation results and aOperationResult contains
the actual result (or failure) of the data receiver on this buffer. This method can
succeed in providing you the oldest buffer but the result of the operation may still be 
a failure - if acquisition was aborted, incomplete, etc.</para>
            </remarks>
            <param name="aBuffer">The buffer that holds the image.</param>
            <param name="aOperationResult">A pointer to the result of the acquisition operation on aBuffer, see PvBuffer::GetOperationResult.</param>
            <param name="aTimeout">The maximum time, in ms, to wait for a buffer to be returned by the data receiver.</param>
            <returns>
                <list type="bullet">
                    <item>
                        <description>
                            <see cref="F:PvDotNet.PvResultCode.OK" /> if the buffer has been properly queued.</description>
                    </item>
                    <item>
                        <description>
                            <see cref="F:PvDotNet.PvResultCode.TIMEOUT" /> if the buffer could not be queued. See PvResult::GetDescription for more information.</description>
                    </item>
                    <item>
                        <description>
                            <see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /> if the stream is not connected to a transmitter.</description>
                    </item>
                    <item>
                        <description>
                            <see cref="F:PvDotNet.PvResultCode.NO_MORE_ITEM" /> if no buffers queued.</description>
                    </item>
                    <item>
                        <description>
                            <see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" />
                        </description>
                    </item>
                    <item>
                        <description>
                            <see cref="F:PvDotNet.PvResultCode.NO_MORE_ENTRY" />
                        </description>
                    </item>
                    <item>
                        <description>
                            <see cref="F:PvDotNet.PvResultCode.BUSY" />
                        </description>
                    </item>
                </list>
            </returns>
        </member>
        <member name="M:PvDotNet.PvStream.QueueBuffer(PvDotNet.PvBuffer)">
            <summary>Queue a buffer to receive a block.</summary>
            <remarks>
                <para>The <see cref="M:PvDotNet.PvStream.QueueBuffer(PvDotNet.PvBuffer)" /> method queues in a buffer (<see cref="T:PvDotNet.PvBuffer" /> object) to a stream (<see cref="T:PvDotNet.PvStream" /> object) so it
can be filled by the data receiver.</para>
                <para>For each buffer you remove (using RetrieveBuffer), you should queue another (using <see cref="M:PvDotNet.PvStream.QueueBuffer(PvDotNet.PvBuffer)" />).</para>
                <para>The maximum number of buffers that can be queued at a given time can be obtained by calling <see cref="P:PvDotNet.PvStream.QueuedBufferMaximum" />.</para>
                <para>To reduce the risk of missing incoming data, it is recommended that several blocks remain queued and ready to go at any given time.</para>
                <para>Generally it is recommended that a larger number of buffers remain queued for higher frame rates. </para>
                <para>Larger block sizes with blocks being streamed at a lower frame rate can afford to allocate fewer buffers to optimize memory usage and reduce potential latency.</para>
                <para>Once the stream fills the buffer with a block, retrieve the buffer by calling RetrieveBuffer.</para>
            </remarks>
            <param name="aBuffer">A handle to the buffer to be filled.</param>
            <returns>
                <list type="bullet">
                    <item>
                        <description>
                            <see cref="F:PvDotNet.PvResultCode.PENDING" /> if the buffer has been properly queued.</description>
                    </item>
                    <item>
                        <description>
                            <see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> if the buffer could not be queued. See PvResult::GetDescription for more information</description>
                    </item>
                    <item>
                        <description>
                            <see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" />
                        </description>
                    </item>
                    <item>
                        <description>
                            <see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" />
                        </description>
                    </item>
                    <item>
                        <description>
                            <see cref="F:PvDotNet.PvResultCode.NO_MORE_ENTRY" />
                        </description>
                    </item>
                    <item>
                        <description>
                            <see cref="F:PvDotNet.PvResultCode.NOT_ENOUGH_MEMORY" />
                        </description>
                    </item>
                </list>
            </returns>
        </member>
        <member name="M:PvDotNet.PvStream.AbortQueuedBuffers">
            <summary>Abort all pending block requests.</summary>
Once you have aborted pending block requests, they still need to be de-queued. Use RetrieveBuffer.
<exception cref="T:PvDotNet.PvException">The following PvException result code will be produced:
<list type="bullet"><item><description>NOT_CONNECTED</description></item></list></exception></member>
        <member name="M:PvDotNet.PvStream.Close">
            <summary>Close the stream channel receiver.</summary>
            <exception cref="T:PvDotNet.PvException">The following PvException result code will be produced:
<list type="bullet"><item><description>NOT_CONNECTED</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvStream.Open(System.String)">
            <summary>Opens a stream object from a string containing connection info identifying a device.</summary>
            <param name="aInfo">String containing connection info identifying a device.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_ENOUGH_MEMORY" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.BAD_VERSION" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.CANNOT_OPEN_FILE" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_SUPPORTED" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvStream.Open(PvDotNet.PvDeviceInfo)">
            <summary>Opens a stream object from a device info object.</summary>
            <param name="aDeviceInfo">Device info object from a device finder.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_ENOUGH_MEMORY" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.BAD_VERSION" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.CANNOT_OPEN_FILE" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_SUPPORTED" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvStream.CreateAndOpen(System.String)">
            <summary>Dynamically allocates a PvStream of the right type.</summary>
            <remarks>
This static method takes a string and creates the right type of PvStream (PvStreamGEV
or PvStreamU3V) and connects it. Objects allocated with CreateAndOpen should be freed with PvStream::Free.
</remarks>
            <param name="aInfo">Information that uniquely identifies the device. You may use one of the following:
GigE Vision device's IP Address. Use the form <tt>192.168.1.114</tt>.
USB3 Vision GUID.</param>
            <returns>A pointer to the new object on success, NULL on failure.</returns>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_ENOUGH_MEMORY" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.BAD_VERSION" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.CANNOT_OPEN_FILE" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_SUPPORTED" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvStream.CreateAndOpen(PvDotNet.PvDeviceInfo)">
            <summary>Dynamically allocates a PvStream of the right type.</summary>
            <remarks>
This static method takes a string and creates the right type of PvStream (PvStreamGEV
or PvStreamU3V) and connects it. Objects allocated with CreateAndOpen should be freed with PvStream::Free.
</remarks>
            <param name="aDeviceInfo">Device info parameter retrieved from device finder.</param>
            <returns>A pointer to the new object on success, NULL on failure.</returns>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_ENOUGH_MEMORY" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.BAD_VERSION" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.CANNOT_OPEN_FILE" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_SUPPORTED" /></description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvStream.Type">
            <summary>Returns whether the object is a GigE Vision or USB3 Vision stream receiver.</summary>
            <returns>Specific object type.</returns>
        </member>
        <member name="P:PvDotNet.PvStream.QueuedBufferMaximum">
            <summary>Get the maximum number of buffers (<see cref="T:PvDotNet.PvBuffer" /> objects) that can be queued at a time.</summary>
            <returns>Maximum number of buffers (<see cref="T:PvDotNet.PvBuffer" /> objects).</returns>
        </member>
        <member name="P:PvDotNet.PvStream.QueuedBufferCount">
            <summary>Get the number of buffers (<see cref="T:PvDotNet.PvBuffer" /> objects) waiting to be filled with images by the data receiver.</summary>
            <remarks>
Every call to <see cref="M:PvDotNet.PvStream.QueueBuffer(PvDotNet.PvBuffer)" /> increases the count by one; every call to RetrieveBuffer reduces the count by one.
</remarks>
            <returns>The number of buffers (<see cref="T:PvDotNet.PvBuffer" /> objects).</returns>
        </member>
        <member name="M:PvDotNet.PvStream.Finalize">
            <summary>
Finalizer.
</summary>
        </member>
        <member name="M:PvDotNet.PvStream.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="T:PvDotNet.PvStream">
            <summary>
Receives data from a GigE Vision or USB3 Vision transmitter.
</summary>
            <remarks>
This provides a means of opening a connection to the data receiver and obtaining data from it.
</remarks>
        </member>
        <member name="T:PvDotNet.PvStreamType">
            <summary>
Stream type. 
</summary>
        </member>
        <member name="F:PvDotNet.PvStreamType.U3V">
            <summary>
                <para>U3V stream type.</para>
            </summary>
        </member>
        <member name="F:PvDotNet.PvStreamType.GEV">
            <summary>
                <para>GEV stream type.</para>
            </summary>
        </member>
        <member name="F:PvDotNet.PvStreamType.Unknown">
            <summary>
                <para>Unknown stream type.</para>
            </summary>
        </member>
        <member name="M:PvDotNet.PvGenParameterArray.Poll">
            <summary>
Invalidates nodes having reach their defined polling time since last update.
</summary>
            <remarks>
                <para>Goes through all parameters having polling times defined and invalidates those that need to 
be invalidated based on the last time they were invalidated.</para>
            </remarks>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" />If an error happened within GenApi. The exception message contains more information about the error.</description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvGenParameterArray.AccessMode">
            <summary>
Returns the access mode of the port of the GenICam node map.
</summary>
        </member>
        <member name="M:PvDotNet.PvGenParameterArray.DetachDataChunks">
            <summary>
Detach previously attached data chunks.
</summary>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" />If an error happened within GenApi. The exception message contains more information about the error.</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvGenParameterArray.AttachDataChunks(PvDotNet.PvBuffer)">
            <summary>
Attaches a payload containing data chunks to a GenICam node map.
</summary>
            <remarks>
                <para>Takes the content of a PvBuffer and attempts to parse the chunks from the end of the buffer. Chunk IDs
from the buffer matching chunk IDs in the node map are available through the node map once the buffer
is attached.</para>
                <para>Using GenICam instead of the PvBuffer raw chunk methods access allows to access the chunks as structured
data, as long as the chunks are described in the GenICam XML file of the device.</para>
            </remarks>
            <param name="aBuffer">Pointer to the a PvBuffer containing data chunks</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" />The buffer is not attached or allocated or has invalid size.</description></item><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" />If an error happened within GenApi. The exception message contains more information about the error.</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvGenParameterArray.ExecuteCommand(System.String)">
            <summary>
Help method used to directly execute a command parameter of this parameter array.
</summary>
            <param name="aName">Name of the parameter to execute.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /> if the parameter does not exist or is not the right type.</description></item><item><description>Any other error code from PvGenCommand.Execute </description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvGenParameterArray.GetFloatRange(System.String,System.Double@,System.Double@)">
            <summary>
Helper method used to directly retrieve the range of a float parameter.
</summary>
            <param name="aName">Name of the parameter.</param>
            <param name="aMin">Minimum.</param>
            <param name="aMax">Maximum.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /> if the parameter does not exist or is not the right type </description></item><item><description>Any other error code from PvGenFloat.Min or PvGenFloat.Max</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvGenParameterArray.GetIntegerRange(System.String,System.Int64@,System.Int64@)">
            <summary>
Helper method used to directly retrieve the range of an integer parameter.
</summary>
            <param name="aName">Name of the parameter.</param>
            <param name="aMin">Minimum.</param>
            <param name="aMax">Maximum.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /> if the parameter does not exist or is not the right type </description></item><item><description>Any other error code from PvGenInteger.Min or PvGenInteger.Max</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvGenParameterArray.SetStringValue(System.String,System.String)">
            <summary>
Help method used to directly write a string parameter value of this parameter array.
</summary>
            <param name="aName">Name of the parameter to write the value to.</param>
            <param name="aValue">Value written to the parameter.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /> if the parameter does not exist or is not the right type.</description></item><item><description>Any other error code from PvGenString.Value </description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvGenParameterArray.GetStringValue(System.String)">
            <summary>
Helper method used to directly read a string parameter value of this parameter array.
</summary>
            <param name="aName">Name of the parameter to read the value from.</param>
            <returns>String parameter handle from the parameter array.</returns>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /> if the parameter does not exist or is not the right type.</description></item><item><description>Any other error code from PvGenString.Value </description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvGenParameterArray.SetBooleanValue(System.String,System.Boolean)">
            <summary>
Help method used to directly write a Boolean parameter value of this parameter array.
</summary>
            <param name="aName">Name of the parameter to read the value from.</param>
            <param name="aValue">Value written to the parameter.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /> if the parameter does not exist or is not the right type.</description></item><item><description>Any other error code from PvGenBoolean.Value </description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvGenParameterArray.GetBooleanValue(System.String)">
            <summary>
Help method used to directly read a Boolean parameter value of this parameter array.
</summary>
            <param name="aName">Name of the parameter to read the value from.</param>
            <returns>Value written to the parameter.</returns>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /> if the parameter does not exist or is not the right type.</description></item><item><description>Any other error code from PvGenBoolean.Value </description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvGenParameterArray.SetEnumValue(System.String,System.Int64)">
            <summary>
Help method used to directly write an enumeration parameter value (as an integer) of this parameter array.
</summary>
            <param name="aName">Name of the parameter to write the value to.</param>
            <param name="aValue">Value written to the parameter.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /> if the parameter does not exist or is not the right type.</description></item><item><description>Any other error code from PvGenEnum.Value </description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvGenParameterArray.SetEnumValue(System.String,System.String)">
            <summary>
Help method used to directly write an enumeration parameter value (as a string) of this parameter array.
</summary>
            <param name="aName">Name of the parameter to write the value to.</param>
            <param name="aValue">Value written to the parameter.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /> if the parameter does not exist or is not the right type.</description></item><item><description>Any other error code from PvGenEnum.Value </description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvGenParameterArray.GetEnumValueAsInt(System.String)">
            <summary>
Helper method used to directly read an enumeration parameter value (as an integer) of this parameter array.
</summary>
            <param name="aName">Name of the parameter to read the value from.</param>
            <returns>Value read from the parameter, integer representation.</returns>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /> if the parameter does not exist or is not the right type.</description></item><item><description>Any other error code from PvGenEnum.Value </description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvGenParameterArray.GetEnumValueAsString(System.String)">
            <summary>
Helper method used to directly read an enumeration parameter value (as a string) of this parameter array.
</summary>
            <param name="aName">Name of the parameter to read the value from.</param>
            <returns>Value read from the parameter, string representation.</returns>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /> if the parameter does not exist or is not the right type.</description></item><item><description>Any other error code from PvGenEnum.Value </description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvGenParameterArray.SetFloatValue(System.String,System.Double)">
            <summary>
Help method used to directly write a float parameter value of this parameter array.
</summary>
            <param name="aName">Name of the parameter to write the value to.</param>
            <param name="aValue">Value written to the parameter.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /> if the parameter does not exist or is not the right type.</description></item><item><description>Any other error code from PvGenFloat.Value </description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvGenParameterArray.GetFloatValue(System.String)">
            <summary>
Helper method used to directly read a float parameter value of this parameter array.
</summary>
            <param name="aName">Name of the parameter to read the value from.</param>
            <returns>Value read from the parameter.</returns>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /> if the parameter does not exist or is not the right type.</description></item><item><description>Any other error code from PvGenFloat.Value </description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvGenParameterArray.SetIntegerValue(System.String,System.Int64)">
            <summary>
Help method used to directly write an integer parameter value of this parameter array.
</summary>
            <param name="aName">Name of the parameter to write the value to.</param>
            <param name="aValue">Value written to the parameter.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /> if the parameter does not exist or is not the right type.</description></item><item><description>Any other error code from PvGenInteger.Value </description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvGenParameterArray.GetIntegerValue(System.String)">
            <summary>
Help method used to directly read an integer parameter value of this parameter array.
</summary>
            <param name="aName">Name of the parameter to read the value from.</param>
            <returns>Value read from the parameter.</returns>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /> if the parameter does not exist or is not the right type </description></item><item><description>Any other code from PvGenInteger.Value </description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvGenParameterArray.GetRegister(System.String)">
            <summary>
Help method returning a PvGenParameter casted as a PvGenRegister.
</summary>
            <remarks>
                <para>Returns NULL if the parameter does not exist in the node map or the
parameter is not a register.</para>
            </remarks>
            <param name="aName">Name of the parameter.</param>
            <returns>PvGenRegister parameter handle from the parameter array.</returns>
        </member>
        <member name="M:PvDotNet.PvGenParameterArray.GetString(System.String)">
            <summary>
Help method returning a PvGenParameter casted as a PvGenString.
</summary>
            <remarks>
                <para>Returns NULL if the parameter does not exist in the node map or the
parameter is not a string.</para>
            </remarks>
            <param name="aName">Name of the parameter.</param>
            <returns>PvGenString parameter handle from the parameter array.</returns>
        </member>
        <member name="M:PvDotNet.PvGenParameterArray.GetCommand(System.String)">
            <summary>
Help method returning a PvGenParameter casted as a PvGenCommand.
</summary>
            <remarks>
                <para>Returns NULL if the parameter does not exist in the node map or the
parameter is not a command.</para>
            </remarks>
            <param name="aName">Name of the parameter.</param>
            <returns>PvGenCommand parameter handle from the parameter array.</returns>
        </member>
        <member name="M:PvDotNet.PvGenParameterArray.GetBoolean(System.String)">
            <summary>
Help method returning a PvGenParameter casted as a PvGenBoolean.
</summary>
            <remarks>
                <para>Returns NULL if the parameter does not exist in the node map or the
parameter is not a Boolean.</para>
            </remarks>
            <param name="aName">Name of the parameter.</param>
            <returns> PvGenEnum parameter handle from the parameter array.</returns>
        </member>
        <member name="M:PvDotNet.PvGenParameterArray.GetEnum(System.String)">
            <summary>
Help method returning a PvGenParameter casted as a PvGenEnum.
</summary>
            <remarks>
                <para>Returns NULL if the parameter does not exist in the node map or the
parameter is not an enumeration.</para>
            </remarks>
            <param name="aName">Name of the parameter.</param>
            <returns> PvGenEnum parameter handle from the parameter array.</returns>
        </member>
        <member name="M:PvDotNet.PvGenParameterArray.GetFloat(System.String)">
            <summary>
Help method returning a PvGenParameter casted as a PvGenFloat.
</summary>
            <remarks>
                <para>Returns NULL if the parameter does not exist in the node map or the
parameter is not a float.</para>
            </remarks>
            <param name="aName">Name of the parameter.</param>
            <returns> PvGenFloat parameter handle from the parameter array.</returns>
        </member>
        <member name="M:PvDotNet.PvGenParameterArray.GetInteger(System.String)">
            <summary>
Help method returning a PvGenParameter casted as a PvGenInteger.
</summary>
            <remarks>
                <para>Returns NULL if the parameter does not exist in the node map or the
parameter is not an integer.</para>
            </remarks>
            <param name="aName">Name of the parameter.</param>
            <returns> PvGenInteger parameter handle from the parameter array.</returns>
        </member>
        <member name="M:PvDotNet.PvGenParameterArray.InvalidateCache">
            <summary>
Invalidates the cache of the GenICam parameter array.
</summary>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> (Use <see cref="P:PvDotNet.PvResult.Description" /> to get more information).</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvGenParameterArray.GetCategory(System.String)">
            <summary>
Get a category (<see cref="T:PvDotNet.PvGenCategory" /> object) from the array (using category name).  
</summary>
            <param name="aName">The category's name. See <see cref="P:PvDotNet.PvGenCategory.Name" />.</param>
            <returns>The category (<see cref="T:PvDotNet.PvGenCategory" /> object) , or NULL if the name does not match any categories in the array.</returns>
        </member>
        <member name="M:PvDotNet.PvGenParameterArray.GetCategory(System.UInt32)">
            <summary>
Get a category (<see cref="T:PvDotNet.PvGenCategory" /> object)  from the array (using array position).  
</summary>
            <param name="aIndex">The category's position in the array. The valid range for <i>aIndex</i>
                    is:  0 =&lt; <i>aIndex</i> &lt; <see cref="P:PvDotNet.PvGenParameterArray.CategoryCount" />.</param>
            <returns>The category (<see cref="T:PvDotNet.PvGenCategory" /> object) , or NULL if the index is out of bounds.</returns>
        </member>
        <member name="P:PvDotNet.PvGenParameterArray.CategoryCount">
            <summary>
Get the number of categories (<see cref="T:PvDotNet.PvGenCategory" /> object) in the array.  
</summary>
        </member>
        <member name="M:PvDotNet.PvGenParameterArray.op_Subscript(System.String)">
            <summary>
Get a parameter (<see cref="T:PvDotNet.PvGenParameter" /> object)  from the array (using parameter name).  
</summary>
            <param name="aName">The parameter's name. <see cref="P:PvDotNet.PvGenParameter.Name" />.</param>
            <returns>The parameter (<see cref="T:PvDotNet.PvGenParameter" /> object), or NULL if the name does not match any parameters in the array.</returns>
        </member>
        <member name="M:PvDotNet.PvGenParameterArray.op_Subscript(System.UInt32)">
            <summary>
Get a parameter (<see cref="T:PvDotNet.PvGenParameter" /> object)  from the array (using parameter name).  
</summary>
            <param name="aIndex">The parameter's position in the array. The valid range for <i>aIndex</i>
                    is:  0 =&lt; <i>aIndex</i> &lt; <see cref="P:PvDotNet.PvGenParameterArray.Count" />.</param>
            <returns>The parameter (<see cref="T:PvDotNet.PvGenParameter" /> object), or NULL if the index is out of bounds.</returns>
        </member>
        <member name="M:PvDotNet.PvGenParameterArray.Get(System.String)">
            <summary>
Get the number of parameters (<see cref="T:PvDotNet.PvGenParameter" /> object)  from the array (using parameter name).  
</summary>
            <param name="aName">The parameter's name. <see cref="P:PvDotNet.PvGenParameter.Name" />.</param>
            <returns>The parameter (<see cref="T:PvDotNet.PvGenParameter" /> object), or NULL if the name does not match any parameters in the array.</returns>
        </member>
        <member name="M:PvDotNet.PvGenParameterArray.Get(System.UInt32)">
            <summary>
Get the number of parameters (<see cref="T:PvDotNet.PvGenParameter" /> object)  from the array (using parameter name).
</summary>
            <param name="aIndex">The parameter's position in the array. The valid range for <i>aIndex</i>
                  is:  0 =&lt; <i>aIndex</i> &lt; <see cref="P:PvDotNet.PvGenParameterArray.Count" />.</param>
            <returns>The parameter (<see cref="T:PvDotNet.PvGenParameter" /> object), or NULL if the index is out of bounds.</returns>
        </member>
        <member name="P:PvDotNet.PvGenParameterArray.Count">
            <summary>
Get the number of parameters (<see cref="T:PvDotNet.PvGenParameter" /> object) in the array. 
</summary>
        </member>
        <member name="M:PvDotNet.PvGenParameterArray.Finalize">
            <summary>
Finalizer.
</summary>
        </member>
        <member name="M:PvDotNet.PvGenParameterArray.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="T:PvDotNet.PvGenParameterArray">
            <summary>
GenICam feature array.
</summary>
            <remarks>
                <para>
                    <h3 id="controlling">Controlling features (programmatically)</h3>
                </para>
                <para>
                    <b>To control features:</b>
                </para>
                <para>1- Get the list of features. Use one of the following:</para>
                <list type="bullet">
                    <item>
                        <description>PvDevice.Parameters (Parameters used to control the GigE Vision device to which you are connected).</description>
                    </item>
                    <item>
                        <description>PvDevice.CommunicationParameters (Parameters used to define how PvDevice connects to and communicates with the device - see Device Communication Parameters for either GigE Vision or USB3 Vision devices.</description>
                    </item>
                    <item>
                        <description>PvStream.Parameters (Parameters used to define how PvStream receives data from a GigE Vision transmitter - see Stream Parameters for either GigE Vision or USB3 Vision device..</description>
                    </item>
                </list>
                <para>2- Get a feature. Use <see cref="M:PvDotNet.PvGenParameterArray.Get(System.UInt32)" />.</para>
                <para>3- Get the feature's type. Use <see cref="M:System.Object.GetType" />.</para>
                <para>4- Optionally:
<list type="bullet"><item><description>Get/Set the feature's value. Use the Value attribute for the feature's type (e.g. PvGenInteger.Value, etc).</description></item><item><description>If the feature is a command, activate it. Use PvGenCommand.Execute.</description></item></list></para>
                <para>
                    <h3 id="controllingGUI">Controlling features (using a GUI)</h3>
                </para>
                <para>
                    <b>To control features (using a GUI):</b> see PvGenBrowserWnd</para>
                <para>
                    <h3>Running code when a feature's value changes</h3>
                </para>
                <para>In some cases, you may want to know when a feature value or attribute changes without using CPU-intensive polling
to regularly check (and re-check) the feature's value.</para>
            </remarks>
        </member>
        <member name="T:PvDotNet.PvGenAccessMode">
            <summary>
GenICam access mode.
</summary>
        </member>
        <member name="F:PvDotNet.PvGenAccessMode.Undefined">
            <summary>
Undefined mode.
</summary>
        </member>
        <member name="F:PvDotNet.PvGenAccessMode.NotAvailable">
            <summary>
Not available mode.
</summary>
        </member>
        <member name="F:PvDotNet.PvGenAccessMode.NotImplemented">
            <summary>
Not implemented mode.
</summary>
        </member>
        <member name="F:PvDotNet.PvGenAccessMode.WriteOnly">
            <summary>
Write only mode.
</summary>
        </member>
        <member name="F:PvDotNet.PvGenAccessMode.ReadWrite">
            <summary>
Read write mode.
</summary>
        </member>
        <member name="F:PvDotNet.PvGenAccessMode.ReadOnly">
            <summary>
Read only mode.
</summary>
        </member>
        <member name="P:PvDotNet.PvGenCategory.IsImplemented">
            <summary>
Test if the category is implemented. 
</summary>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> if the operation fails. Use <see cref="P:PvDotNet.PvResult.Description" /> for more information.</description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvGenCategory.Visibility">
            <summary>
Gets the visibility setting.
</summary>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> if the operation fails. Use <see cref="P:PvDotNet.PvResult.Description" /> for more information.</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvGenCategory.IsVisible(PvDotNet.PvGenVisibility)">
            <summary>
Test if the category is visible at the specified visibility level. 
</summary>
            <param name="aCurrentVisibility">Visibility level.</param>
            <returns>True if the specified visibility level is visible, otherwise false.</returns>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> if the operation fails. Use <see cref="P:PvDotNet.PvResult.Description" /> for more information.</description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvGenCategory.NameSpace">
            <summary>
Gets the category's namespace.
</summary>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> (Use <see cref="P:PvDotNet.PvGenCategory.Description" /> to get more information).</description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvGenCategory.DisplayName">
            <summary>
Gets the category's display name.
</summary>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> (Use <see cref="P:PvDotNet.PvGenCategory.Description" /> to get more information).</description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvGenCategory.Description">
            <summary>
Gets the category's tool tip.
</summary>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> (Use <see cref="P:PvDotNet.PvGenCategory.Description" /> to get more information).</description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvGenCategory.ToolTip">
            <summary>
Gets the category's description.
</summary>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> (Use <see cref="P:PvDotNet.PvGenCategory.Description" /> to get more information).</description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvGenCategory.Name">
            <summary>
Gets the category's name.
</summary>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> (Use <see cref="P:PvDotNet.PvGenCategory.Description" /> to get more information).</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvGenCategory.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="T:PvDotNet.PvGenCategory">
            <summary>
GenICam category.
</summary>
            <remarks>
                <para>In group: GenICam features.</para>
            </remarks>
        </member>
        <member name="P:PvDotNet.PvGenRegister.Length">
            <summary>
Returns the length of the register mapped with this feature. 		
</summary>
        </member>
        <member name="M:PvDotNet.PvGenRegister.Get(System.Byte*,System.Int64)">
            <summary>
Reads from the register. 		
</summary>
            <remarks>
                <para>Partial (less than <see cref="P:PvDotNet.PvGenRegister.Length" />) reads are supported at the GenICam level, but the behavior is defined by the device.</para>
            </remarks>
            <param name="aBuffer">Data read from the register.</param>
            <param name="aLength">Length of the buffer, in bytes.</param>
        </member>
        <member name="M:PvDotNet.PvGenRegister.Set(System.Byte*,System.Int64)">
            <summary>
Write to the register.  		
</summary>
            <remarks>
                <para>Partial (less than <see cref="P:PvDotNet.PvGenRegister.Length" />) reads are supported at the GenICam level, but the behavior is defined by the device.</para>
                <para>GigE Vision enforces a mod-4 (can be divided by 4 bytes) length restriction on all read/write operations.</para>
            </remarks>
            <param name="aBuffer">Data write to the register.</param>
            <param name="aLength">Length of the buffer, in bytes.</param>
        </member>
        <member name="M:PvDotNet.PvGenRegister.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="T:PvDotNet.PvGenRegister">
            <summary>
GenICam feature: Register or IRegister. 
</summary>
            <remarks>
To use this class, see <see cref="T:PvDotNet.PvGenParameter" />.
A feature providing direct access to a section of the device's register map. 
</remarks>
        </member>
        <member name="P:PvDotNet.PvGenString.MaxLength">
            <summary>
Get the maximum length of the string.
</summary>
        </member>
        <member name="M:PvDotNet.PvGenString.TryGetValue(System.String@)">
            <summary>
Feature value accessor. On failure returns a PvResult instead of raising an exception.	
</summary>
            <param name="aValue">Output that on success will contain the parameter value.</param>
            <returns>Result of the operation.
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> (Use <see cref="P:PvDotNet.PvResult.Description" /> to get more information).</description></item></list></returns>
        </member>
        <member name="P:PvDotNet.PvGenString.Value">
            <summary>
Get and set the feature's value.
</summary>
        </member>
        <member name="M:PvDotNet.PvGenString.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="T:PvDotNet.PvGenString">
            <summary>
GenICam feature: String. 
</summary>
            <remarks>
To use this class, <see cref="T:PvDotNet.PvGenParameter" />. 
</remarks>
        </member>
        <member name="P:PvDotNet.PvGenCommand.IsDone">
            <summary>
Query whether the command is executed. True if the command has completed its execution, false otherwise.
</summary>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> (Use <see cref="P:PvDotNet.PvGenParameter.Description" /> to get more information).</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvGenCommand.Execute">
            <summary>
Activate the feature.
</summary>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> (Use <see cref="P:PvDotNet.PvGenParameter.Description" /> to get more information).</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvGenCommand.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="T:PvDotNet.PvGenCommand">
            <summary>
GenICam feature: Command. A feature that can only be activated.
</summary>
            <remarks>
                <para>In group: GenICam features.</para>
                <para> To use this class, see <see cref="T:PvDotNet.PvGenParameter" />.</para>
            </remarks>
        </member>
        <member name="M:PvDotNet.PvGenBoolean.TryGetValue(System.Boolean@)">
            <summary>
Feature value accessor. On failure returns a PvResult instead of raising an exception.	
</summary>
            <param name="aValue">Output that on success will contain the parameter value.</param>
            <returns>Result of the operation.
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> (Use PvResult.Description to get more information).</description></item></list></returns>
        </member>
        <member name="P:PvDotNet.PvGenBoolean.Value">
            <summary>
Gets and sets the feature's value.
</summary>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> (Use <see cref="P:PvDotNet.PvGenParameter.Description" /> to get more information).</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvGenBoolean.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="T:PvDotNet.PvGenBoolean">
            <summary>
GenICam feature: Boolean. A feature that can either be true or false.
</summary>
            <remarks>
                <para>In group: GenICam features.</para>
            </remarks>
        </member>
        <member name="M:PvDotNet.PvGenEnum.GetEnumerator2">
            <summary>
Get an enumerator that iterates through a collection.
</summary>
            <returns>An enumerator that iterates through a collection.</returns>
        </member>
        <member name="M:PvDotNet.PvGenEnum.GetEnumerator">
            <summary>
Gets an enumerator.
</summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="M:PvDotNet.PvGenEnum.TryGetEntryByValue(System.Int64,PvDotNet.PvGenEnumEntry@)">
            <summary>
Gets an enumeration entry (by value). On failure returns a PvResult instead of raising an exception.	
</summary>
            <param name="aValue">The enumeration entry's value (PvGenEnum.Value).</param>
            <param name="aEntry">Output that on success will contain a reference to the enumeration entry.</param>
            <returns>Result of the operation.
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> (Use PvResult.Description to get more information).</description></item></list></returns>
        </member>
        <member name="M:PvDotNet.PvGenEnum.GetEntryByValue(System.Int64)">
            <summary>
Gets an enumeration entry (by value).
</summary>
            <param name="aValue">The enumeration entry's value (PvGenEnum.Value).</param>
            <returns>The enumeration entry <see cref="T:PvDotNet.PvGenEnumEntry" /></returns>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:    
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> (Use <see cref="P:PvDotNet.PvGenParameter.Description" /> to get more information).</description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvGenEnum.GetEntryByIndex(System.Int64)">
            <summary>
Gets an enumeration entry (by list position).
</summary>
            <param name="aIndex">The enumeration entry's position in the list. The 
                     enumerator (<see cref="T:PvDotNet.PvGenEnum" /> object) has a list that ranges
                     from 0 to PvGenEnum.EntriesCount.</param>
            <returns>The enumeration entry <see cref="T:PvDotNet.PvGenEnumEntry" /></returns>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> (Use <see cref="P:PvDotNet.PvGenParameter.Description" /> to get more information).</description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvGenEnum.GetEntryByName(System.String)">
            <summary>
Gets an enumeration entry (by name).
</summary>
            <param name="aEntryName">The enumeration entry's name (PvGenEnumEntry.Name).</param>
            <returns>The enumeration entry <see cref="T:PvDotNet.PvGenEnumEntry" /></returns>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> (Use <see cref="P:PvDotNet.PvGenParameter.Description" /> to get more information).</description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvGenEnum.EntriesCount">
            <summary>
Gets and sets the feature's value as a string.
</summary>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> (Use <see cref="P:PvDotNet.PvGenParameter.Description" /> to get more information).</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvGenEnum.TryGetValueString(System.String@)">
            <summary>
Feature value accessor. On failure returns a PvResult instead of raising an exception.	
</summary>
            <param name="aValue">Output that on success will contain the parameter value.</param>
            <returns>Result of the operation.
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> (Use PvResult.Description to get more information).</description></item></list></returns>
        </member>
        <member name="M:PvDotNet.PvGenEnum.TryGetValueInt(System.Int64@)">
            <summary>
Feature value accessor. On failure returns a PvResult instead of raising an exception.	
</summary>
            <param name="aValue">Output that on success will contain the parameter value.</param>
            <returns>Result of the operation.
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> (Use PvResult.Description to get more information).</description></item></list></returns>
        </member>
        <member name="P:PvDotNet.PvGenEnum.ValueString">
            <summary>
Gets and sets the number of enumeration entries.
</summary>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> (Use <see cref="P:PvDotNet.PvGenParameter.Description" /> to get more information).</description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvGenEnum.ValueInt">
            <summary>
Gets and sets the feature's value as an integer.
</summary>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> (Use <see cref="P:PvDotNet.PvGenParameter.Description" /> to get more information).</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvGenEnum.Finalize">
            <summary>
Finalizer.
</summary>
        </member>
        <member name="M:PvDotNet.PvGenEnum.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="T:PvDotNet.PvGenEnum">
            <summary>
GenICam feature: Enumeration. A feature that can take one of many defined values.
</summary>
            <remarks>
                <para>In group: GenICam features.</para>
                <para>PvGenEnum is a list of selectable values. In a UI, PvGenEnum objects are
typically represented as dropdown lists.</para>
                <para>Each list entry is a <see cref="T:PvDotNet.PvGenEnumEntry" /> object.</para>
                <para>Thus, the enumeration list might be represented as:</para>
                <table>
                    <tr>
                        <th>List position</th>
                        <th>Entry value</th>
                        <th>Entry name</th>
                    </tr>
                    <tr>
                        <td>0</td>
                        <td>5</td>
                        <td>Orange</td>
                    </tr>
                    <tr>
                        <td>1</td>
                        <td>4</td>
                        <td>Apple</td>
                    </tr>
                    <tr>
                        <td>2</td>
                        <td>99</td>
                        <td>Watermelon</td>
                    </tr>
                </table>
                <para>However, the UI presents only a selection of entry names (Orange, etc.); the list
position and entry values are hidden. The entry names are always unique.</para>
                <para>Enumerations can't be set to any arbitrary value; they can only be set
to a value of an entry on the list. </para>
                <para>If a user selected Orange, you could set the new value in the following ways:</para>
                <list type="bullet">
                    <item>
                        <description>Set the entry value directly with <see cref="P:PvDotNet.PvGenEnum.ValueInt" /> = 5.</description>
                    </item>
                    <item>
                        <description>Set the entry value by the name with <see cref="P:PvDotNet.PvGenEnum.ValueString" /> = "Orange".</description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="M:PvDotNet.AbstractEnumerator`1.GetEnumerator2">
            <summary>
Get an enumerator that iterates through a collection.
</summary>
            <returns>An enumerator that iterates through a collection.</returns>
        </member>
        <member name="M:PvDotNet.AbstractEnumerator`1.GetEnumerator">
            <summary>
Gets an enumerator.
</summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="M:PvDotNet.AbstractEnumerator`1.#ctor">
            <summary>
Constructor
</summary>
        </member>
        <member name="T:PvDotNet.AbstractEnumerator`1">
            <summary>
Abstract class to iterate over a non-generic collection.
</summary>
            <typeparam name="T">A generic class.</typeparam>
        </member>
        <member name="P:PvDotNet.PvGenEnumEntry.IsAvailable">
            <summary>
 Test if the enumeration entry is currently available. See PvGenParameter.IsAvailable.
</summary>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> (Use <see cref="P:PvDotNet.PvGenEnumEntry.Description" /> to get more information).</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvGenEnumEntry.IsVisible(PvDotNet.PvGenVisibility)">
            <summary>
Test if the parameter is visible at the specified visibility level.
</summary>
            <param name="aVisibility">Visibility level.</param>
            <returns>See <see cref="P:PvDotNet.PvGenEnumEntry.Description" />.</returns>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> (Use <see cref="P:PvDotNet.PvGenEnumEntry.Description" /> to get more information).</description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvGenEnumEntry.Visibility">
            <summary>
Gets the enumeration entry's current visibility level..
</summary>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> (Use <see cref="P:PvDotNet.PvGenEnumEntry.Description" /> to get more information).</description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvGenEnumEntry.NameSpace">
            <summary>
Gets the enum entry's namespace.
</summary>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> (Use <see cref="P:PvDotNet.PvGenEnumEntry.Description" /> to get more information).</description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvGenEnumEntry.DisplayName">
            <summary>
Gets the enum entry's display name.
</summary>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> (Use <see cref="P:PvDotNet.PvGenEnumEntry.Description" /> to get more information).</description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvGenEnumEntry.Description">
            <summary>
Gets a longer description of the enum entry.
</summary>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> (Use <see cref="P:PvDotNet.PvGenEnumEntry.Description" /> to get more information).</description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvGenEnumEntry.ToolTip">
            <summary>
Gets a short description of the enum entry.
</summary>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> (Use <see cref="P:PvDotNet.PvGenEnumEntry.Description" /> to get more information).</description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvGenEnumEntry.ValueString">
            <summary>
Gets the enumeration entry's name.
</summary>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> (Use <see cref="P:PvDotNet.PvGenEnumEntry.Description" /> to get more information).</description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvGenEnumEntry.ValueInt">
            <summary>
Gets the enumeration entry's value.
</summary>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> (Use <see cref="P:PvDotNet.PvGenEnumEntry.Description" /> to get more information).</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvGenEnumEntry.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="T:PvDotNet.PvGenEnumEntry">
            <summary>
GenICam feature: Enumeration entry.
</summary>
            <remarks>
                <para>In group: GenICam features.</para>
                <para>To use PvGenEnumEntry, see PvGenEnum.</para>
            </remarks>
        </member>
        <member name="P:PvDotNet.PvGenFloat.Unit">
            <summary>
Gets the feature's measurement unit.
</summary>
            <remakrs>
The Unit property returns a string with the units for the feature. For example, 
the string might contain "pixels", "bytes", "ms", and so on. The string
is informational and has no intrinsic value for converting to other units.
</remakrs>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description>GENERIC_ERROR (Use <see cref="P:PvDotNet.PvResult.Description" /> to get more information).</description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvGenFloat.Representation">
            <summary>
Gets the feature's suggested presentation format. See PvGenRepresentation.
</summary>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description>GENERIC_ERROR (Use <see cref="P:PvDotNet.PvResult.Description" /> to get more information).</description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvGenFloat.Max">
            <summary>
Gets the feature's limits (maximum).	
</summary>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description>GENERIC_ERROR (Use <see cref="P:PvDotNet.PvResult.Description" /> to get more information).</description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvGenFloat.Min">
            <summary>
Gets the feature's limits (minimum).	
</summary>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description>GENERIC_ERROR (Use <see cref="P:PvDotNet.PvResult.Description" /> to get more information).</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvGenFloat.TryGetValue(System.Double@)">
            <summary>
Feature value accessor. On failure returns a PvResult instead of raising an exception.	
</summary>
            <param name="aValue">Output that on success will contain the parameter value.</param>
            <returns>Result of the operation.
<list type="bullet"><item><description>GENERIC_ERROR (Use <see cref="P:PvDotNet.PvResult.Description" /> to get more information).</description></item></list></returns>
        </member>
        <member name="P:PvDotNet.PvGenFloat.Value">
            <summary>
Gets and set  the feature's value.	
</summary>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description>GENERIC_ERROR (Use <see cref="P:PvDotNet.PvResult.Description" /> to get more information).</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvGenFloat.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="T:PvDotNet.PvGenFloat">
            <summary>
GenICam feature: Float.
</summary>
            <remarks>
                <para>In group: GenICam features.</para>
                <para>To use this class, see <see cref="T:PvDotNet.PvGenParameter" />.</para>
            </remarks>
        </member>
        <member name="P:PvDotNet.PvGenInteger.Representation">
            <summary>
Gets the feature's suggested presentation format.
</summary>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> (Use <see cref="P:PvDotNet.PvResult.Description" /> to get more information).</description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvGenInteger.Increment">
            <summary>
Gets the feature's suggested increment.
</summary>
            <remarks>
                <para>The property Increment suggests how much an up/down button in the UI should increment/decrement the current value.</para>
                <para>For example, a feature with a range of 0 to 1000000 might have an increment of 100000 to keep the user from having to click excessively.</para>
            </remarks>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> (Use <see cref="P:PvDotNet.PvResult.Description" /> to get more information).</description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvGenInteger.Max">
            <summary>
Gets the feature's limits (maximum).	
</summary>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> (Use <see cref="P:PvDotNet.PvResult.Description" /> to get more information).</description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvGenInteger.Min">
            <summary>
Gets the feature's limits (minimum).	
</summary>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> (Use <see cref="P:PvDotNet.PvResult.Description" /> to get more information).</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvGenInteger.TryGetValue(System.Int64@)">
            <summary>
Feature value accessor. On failure returns a PvResult instead of raising an exception.	
</summary>
            <param name="aValue">Output that on success will contain the parameter value.</param>
            <returns>Result of the operation.
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> (Use <see cref="P:PvDotNet.PvResult.Description" /> to get more information).</description></item></list></returns>
        </member>
        <member name="P:PvDotNet.PvGenInteger.Value">
            <summary>
Gets and sets  the feature's value.	
</summary>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> (Use <see cref="P:PvDotNet.PvResult.Description" /> to get more information).</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvGenInteger.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="T:PvDotNet.PvGenInteger">
            <summary>
GenICam feature: Integer.
</summary>
            <remarks>
                <para>In group: GenICam features.</para>
                <para>To use <see cref="T:PvDotNet.PvGenInteger" />, see <see cref="T:PvDotNet.PvGenParameter" />.</para>
            </remarks>
        </member>
        <member name="T:PvDotNet.PvGenRepresentation">
            <summary>
Suggests how the UI should present a numerical feature. 
</summary>
            <remarks>
To get a feature's representation, use the following attributes:
<list type="bullet" /><item><description>PvGenFloat.Representation </description></item><item><description>PvGenInteger.Representation </description></item></remarks>
        </member>
        <member name="F:PvDotNet.PvGenRepresentation.Undefined">
            <summary>
Not defined; valid representation not provided. 
</summary>
        </member>
        <member name="F:PvDotNet.PvGenRepresentation.HexNumber">
            <summary>
Hex number. Use an edit box with a hexadecimal display. 
</summary>
        </member>
        <member name="F:PvDotNet.PvGenRepresentation.PureNumber">
            <summary>
Pure number. Use an edit box with a decimal display.   
</summary>
        </member>
        <member name="F:PvDotNet.PvGenRepresentation.Boolean">
            <summary>
Boolean. The number might be presented as a check box or enable. Use a similar UI as for features from the PvGenBoolean class.   
</summary>
        </member>
        <member name="F:PvDotNet.PvGenRepresentation.Logarithmic">
            <summary>
Logarithmic. Use a slider. The GenICam standard doesn't specify if the feature's value represents x or y in the formula x = n ^ y.   
</summary>
        </member>
        <member name="F:PvDotNet.PvGenRepresentation.Linear">
            <summary>
Linear. Use a slider.  
</summary>
        </member>
        <member name="M:PvDotNet.PvGenParameter.FromString(System.String)">
            <summary>
Sets the parameter value from a string. 
</summary>
            <param name="aValue">A string representing the new value to set the parameter to.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> if the operation fails. Use <see cref="P:PvDotNet.PvResult.Description" /> for more information.</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvGenParameter.ToString">
            <summary>
Gets the parameter value as a string. 
</summary>
            <returns>A string representing the parameter value.</returns>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> if the operation fails. Use <see cref="P:PvDotNet.PvResult.Description" /> for more information.</description></item></list></exception>
        </member>
        <member name="E:PvDotNet.PvGenParameter.OnParameterUpdate">
            <summary>
Event OnParameterUpdateHandler.
</summary>
            <remarks>
                <para>See delegate documentation for more information.</para>
            </remarks>
        </member>
        <member name="P:PvDotNet.PvGenParameter.SelectingParameters">
            <summary>
Gets all selectors for this parameter. 
</summary>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> if the operation fails. Use <see cref="P:PvDotNet.PvResult.Description" /> for more information.</description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvGenParameter.SelectedParameters">
            <summary>
Gets all parameters selected by this parameter.  
</summary>
        </member>
        <member name="P:PvDotNet.PvGenParameter.IsSelector">
            <summary>
Queries whether this parameter is a selector or not. 
</summary>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> if the operation fails. Use <see cref="P:PvDotNet.PvResult.Description" /> for more information.</description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvGenParameter.Visibility">
            <summary>
Gets the visibility setting.
</summary>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> if the operation fails. Use <see cref="P:PvDotNet.PvResult.Description" /> for more information.</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvGenParameter.IsVisible(PvDotNet.PvGenVisibility)">
            <summary>
Test if the parameter is visible at the specified visibility level. 
</summary>
            <param name="aCurrentVisibility">Visibility level.</param>
            <returns>True if the specified visibility level is visible, otherwise false.</returns>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> if the operation fails. Use <see cref="P:PvDotNet.PvResult.Description" /> for more information.</description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvGenParameter.IsStreamable">
            <summary>
Test if the parameter can be streamed. 
</summary>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> if the operation fails. Use <see cref="P:PvDotNet.PvResult.Description" /> for more information.</description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvGenParameter.IsReadable">
            <summary>
Test if the parameter is readable. 
</summary>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> if the operation fails. Use <see cref="P:PvDotNet.PvResult.Description" /> for more information.</description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvGenParameter.IsWritable">
            <summary>
Test if the parameter is writable.  
</summary>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> if the operation fails. Use <see cref="P:PvDotNet.PvResult.Description" /> for more information.</description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvGenParameter.IsImplemented">
            <summary>
Test if the parameter is implemented. 
</summary>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> if the operation fails. Use <see cref="P:PvDotNet.PvResult.Description" /> for more information.</description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvGenParameter.IsAvailable">
            <summary>
Test if the parameter is currently available, but may be available later on. 
</summary>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> if the operation fails. Use <see cref="P:PvDotNet.PvResult.Description" /> for more information.</description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvGenParameter.IsPersistent">
            <summary>
Test if the parameter is to be considered when saving the state of a GenICam interface to disk.  
</summary>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> if the operation fails. Use <see cref="P:PvDotNet.PvResult.Description" /> for more information.</description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvGenParameter.IsValueCached">
            <summary>
Test if the parameter's value is cached in the PC. 
</summary>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> if the operation fails. Use <see cref="P:PvDotNet.PvResult.Description" /> for more information.</description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvGenParameter.NameSpace">
            <summary>
Gets the parameter's namespace.
</summary>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> if the operation fails. Use <see cref="P:PvDotNet.PvResult.Description" /> for more information.</description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvGenParameter.DisplayName">
            <summary>
Gets the parameter's display name.
</summary>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> if the operation fails. Use <see cref="P:PvDotNet.PvResult.Description" /> for more information.</description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvGenParameter.Description">
            <summary>
Gets the parameter's description.
</summary>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> if the operation fails. Use <see cref="P:PvDotNet.PvResult.Description" /> for more information.</description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvGenParameter.ToolTip">
            <summary>
Gets the parameter's tooltip.
</summary>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> if the operation fails. Use <see cref="P:PvDotNet.PvResult.Description" /> for more information.</description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvGenParameter.Category">
            <summary>
Gets the parameter's category.
</summary>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> if the operation fails. Use <see cref="P:PvDotNet.PvResult.Description" /> for more information.</description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvGenParameter.Type">
            <summary>
Gets the parameter's type.
</summary>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> if the operation fails. Use <see cref="P:PvDotNet.PvResult.Description" /> for more information.</description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvGenParameter.Name">
            <summary>
Gets the parameter's name.
</summary>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" /> if the operation fails. Use <see cref="P:PvDotNet.PvResult.Description" /> for more information.</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvGenParameter.Finalize">
            <summary>
Finalizer.
</summary>
        </member>
        <member name="M:PvDotNet.PvGenParameter.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="T:PvDotNet.PvGenParameter">
            <summary>
Base class for all GenICam feature types. 
</summary>
        </member>
        <member name="T:PvDotNet.OnParameterUpdateHandler">
            <summary>
PvGenParameter updated event delegate.
</summary>
            <param name="aParameter">Reference to the parameter invoking the event delegate.</param>
        </member>
        <member name="T:PvDotNet.PvGenVisibility">
            <summary>
                <para>Enumeration PvGenVisibility.</para>
            </summary>
            <remarks>
                <para>Every feature has a visibility setting that suggests how difficult the feature is to use and when it shouldn't be made available (visible) to the end user.</para>
                <para>The current visibility might be a program-specific variable available, for example, in an options or configuration dialog.</para>
                <para>When opening the program for the first time, the visibility would typically be set to beginner.</para>
                <para>If a program's current visibility were set to Expert, the user would expect to see Beginner and Expert-level features, but not Guru or Invisible-level features.</para>
            </remarks>
        </member>
        <member name="F:PvDotNet.PvGenVisibility.Undefined">
            <summary>
Not defined; valid visibility not provided. 
</summary>
        </member>
        <member name="F:PvDotNet.PvGenVisibility.Invisible">
            <summary>
Appears in the API, but not the GUI.
</summary>
        </member>
        <member name="F:PvDotNet.PvGenVisibility.Guru">
            <summary>
Intended for very advanced users. 
</summary>
        </member>
        <member name="F:PvDotNet.PvGenVisibility.Expert">
            <summary>
Intended for advanced users. 
</summary>
        </member>
        <member name="F:PvDotNet.PvGenVisibility.Beginner">
            <summary>
Always visible, to all users. 
</summary>
        </member>
        <member name="T:PvDotNet.PvGenNameSpace">
            <summary>
GenICam namespace. 
</summary>
        </member>
        <member name="F:PvDotNet.PvGenNameSpace.Undefined">
            <summary>
GenICam undefined namespace. 
</summary>
        </member>
        <member name="F:PvDotNet.PvGenNameSpace.Custom">
            <summary>
GenICam custom namespace. 
</summary>
        </member>
        <member name="F:PvDotNet.PvGenNameSpace.Standard">
            <summary>
GenICam standard namespace. 
</summary>
        </member>
        <member name="T:PvDotNet.PvGenType">
            <summary>
Enumeration PvGenType.
</summary>
            <remarks>
                <para>Feature data type (Boolean, integer, etc.). </para>
                <para>Each feature has a type that defines the information it contains and how it can be used.</para>
                <para>The type also determines the SDK class used to represent it (and the methods that are available).</para>
            </remarks>
        </member>
        <member name="F:PvDotNet.PvGenType.Undefined">
            <summary>
Undefined (not initialized) feature type.
</summary>
        </member>
        <member name="F:PvDotNet.PvGenType.Register">
            <summary>
Feature of type PvGenRegister.
</summary>
        </member>
        <member name="F:PvDotNet.PvGenType.Float">
            <summary>
Feature of type PvGenFloat.
</summary>
        </member>
        <member name="F:PvDotNet.PvGenType.Command">
            <summary>
Feature of type PvGenCommand.
</summary>
        </member>
        <member name="F:PvDotNet.PvGenType.String">
            <summary>
Feature of type PvGenString.
</summary>
        </member>
        <member name="F:PvDotNet.PvGenType.Boolean">
            <summary>
Feature of type PvGenBoolean.
</summary>
        </member>
        <member name="F:PvDotNet.PvGenType.Enum">
            <summary>
Feature of type PvEnum.
</summary>
        </member>
        <member name="F:PvDotNet.PvGenType.Integer">
            <summary>
Feature of type PvInteger.
</summary>
        </member>
        <member name="P:PvDotNet.PvTransmitterGEV.BufferPoolThreadPriority">
            <summary>
Gets or Sets the priority of the thread used to manage the buffer of the buffer pool
</summary>
            <remarks>
                <para>Only applicable if using a buffer pool. The thread will manage the buffer 
exchange with the transmitter. </para>
                <para>If you change the thread priorities, it may alternate the stability of the system. For this reason,
if you report a bug to Pleora, ensure to clearly mention that you change threads priorities.</para>
            </remarks>
        </member>
        <member name="P:PvDotNet.PvTransmitterGEV.UserModeTransmitterThreadPriority">
            <summary>
Gets or Sets the priority of the thread in charge of sending the packets on the network.
</summary>
            <remarks>
                <para>Only applicable if using a user-mode transmitter. The thread priority of a 
driver-based transmitter cannot be controlled. Thread that is responsible for 
breaking buffers in packets and transmitting them. </para>
                <para>If you change the thread priorities, it may alternate the stability of the system. For this reason,
if you report a bug to Pleora, ensure to clearly mention that you change threads priorities.</para>
            </remarks>
        </member>
        <member name="P:PvDotNet.PvTransmitterGEV.AverageTransmissionRate">
            <summary>
Gets the average transmission rate (in blocks/second).
</summary>
            <remarks>
                <para>Average transmission rate is equivalent to BlocksTransmitted / SamplingTime.</para>
                <para>This function is the transmitter counterpart to the property AcquisitionRateAverage of PvStatistics.</para>
            </remarks>
        </member>
        <member name="P:PvDotNet.PvTransmitterGEV.InstantaneousTransmissionRate">
            <summary>
Gets the instantaneous transmission rate (in blocks/second).
</summary>
            <remarks>
                <para>Instantaneous transmission rate is measured using a short time frame.</para>
                <para>This function is the transmitter counterpart to the property AcquisitionRate of PvStatistics.</para>
            </remarks>
        </member>
        <member name="P:PvDotNet.PvTransmitterGEV.AveragePayloadThroughput">
            <summary>
Gets the average payload throughput (in bps).
</summary>
            <remarks>
                <para>Average payload transmission rate is equivalent to PayloadBytesTransmitted * 8 / SamplingTime.</para>
                <para>Note that this calculation only includes the number of useful data bytes and does not include GVSP, IP and UDP header overhead.</para>
                <para>This function is the transmitter counterpart to property BandwidthAverage of PvStatistics.</para>
            </remarks>
        </member>
        <member name="P:PvDotNet.PvTransmitterGEV.InstantaneousPayloadThroughput">
            <summary>
Gets an instantaneous calculation of the payload throughput (in bps).
</summary>
            <remarks>
                <para>Instantaneous payload transmission rate is measured using a short time frame.</para>
                <para>Note that this calculation only includes the number of useful data bytes and does not include GVSP, IP and UDP header overhead.</para>
                <para>This function is the transmitter counterpart to property Bandwidth of PvStatistics.</para>
            </remarks>
        </member>
        <member name="P:PvDotNet.PvTransmitterGEV.PayloadBytesTransmitted">
            <summary>
Gets the number of payload bytes transmitted.
</summary>
            <remarks>
Note that this value only includes the number of useful data bytes and does not include GVSP, IP and UDP header overhead.
</remarks>
        </member>
        <member name="P:PvDotNet.PvTransmitterGEV.SamplingTime">
            <summary>
Gets the time since last reset. 
</summary>
            <remarks>
The time, in ms, since the counters were zeroed; the time since the object
was created, the transmitter was opened (using Open), or ResetStats was called.
</remarks>
        </member>
        <member name="P:PvDotNet.PvTransmitterGEV.BlocksTransmitted">
            <summary>
Returns the number of blocks transmitted.
</summary>
        </member>
        <member name="M:PvDotNet.PvTransmitterGEV.ResetStats">
            <summary>
Zero all running counters.
</summary>
        </member>
        <member name="P:PvDotNet.PvTransmitterGEV.SourceIPAddress">
            <summary>
Returns the source IP address to which blocks are transmitted.
</summary>
            <remarks>
Returns an empty string when a connection has not yet been opened.
</remarks>
        </member>
        <member name="P:PvDotNet.PvTransmitterGEV.DestinationIPAddress">
            <summary>
Gets the destination IP address to which blocks are transmitted.
</summary>
            <remarks>
Returns an empty string when a connection has not yet been opened.
</remarks>
        </member>
        <member name="P:PvDotNet.PvTransmitterGEV.DestinationPort">
            <summary>
Gets the destination port from which blocks are transmitted.
</summary>
            <remarks>
Returns 0 when a connection has not yet been opened.
</remarks>
        </member>
        <member name="P:PvDotNet.PvTransmitterGEV.SourcePort">
            <summary>
Gets the source port from which blocks are transmitted.
</summary>
            <remarks>
Returns 0 when a connection has not yet been opened.
</remarks>
        </member>
        <member name="P:PvDotNet.PvTransmitterGEV.MaxPayloadThroughput">
            <summary>
Gets or sets the maximum desired effective throughput in bps.
</summary>
            <remarks>
                <para>An occasional delay is placed between the packets being transmitted to attempt to throttle the effective throughput.
This helps to spread out network traffic to optimize bandwidth availability for other applications.</para>
                <para>A value of 0 (default) indicates that there should be no throttling based on throughput.</para>
                <para>The throughput is measured in effective throughput on the content of the transmitted PvBuffer objects. It does not take
into account the GigE Vision, UDP, IP and Ethernet protocol overhead of the packetized data.</para>
            </remarks>
        </member>
        <member name="P:PvDotNet.PvTransmitterGEV.PacketSize">
            <summary>
Gets or sets the maximum packet size (in bytes) of GVSP payload packets.
</summary>
            <remarks>
                <para>When a block is packetized and transmitted, the payload is broken down into packets of a given size.
The default value for the maximum packet size is 1440 because that is the size that should work in theory for all network adapters.</para>
                <para>For best results, enable jumbo packets in your network adapter properties and increase the maximum packet size to match 
When sending very small blocks at high frame rates it may sometimes be desirable to set the maximum packet size to a lower number.</para>
            </remarks>
        </member>
        <member name="P:PvDotNet.PvTransmitterGEV.QueuedBufferCount">
            <summary>
Returns the number of buffers queued for transmission including the ones that are currently being sent.
</summary>
        </member>
        <member name="M:PvDotNet.PvTransmitterGEV.AbortQueuedBuffers(System.UInt32,System.Boolean@)">
            <summary>
Abort all pending transmission requests.
</summary>
            <remarks>
Buffers that were aborted will have an operation result set at <see cref="F:PvDotNet.PvResultCode.ABORTED" />.
</remarks>
            <param name="aTimeout">Represents the maximum number of milliseconds to wait for the completion of the current buffer transmission before forcing an abort. If this timeout expires and forces the system to send a partial buffer, the parameter aPartialTransmission will be set to true ( when supplied ). </param>
            <param name="aPartialTransmission">Optional parameter set to true when the aTimeout expires and a partial image was sent.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.ABORTED" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvTransmitterGEV.AbortQueuedBuffers(System.UInt32)">
            <summary>
Abort all pending transmission requests.
</summary>
            <remarks>
Buffers that were aborted will have an operation result set at <see cref="F:PvDotNet.PvResultCode.ABORTED" />.
</remarks>
            <param name="aTimeout">Represents the maximum number of milliseconds to wait for the completion of the current buffer transmission before forcing an abort. If the abort is forced, the a block can be partially sent.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.ABORTED" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvTransmitterGEV.AbortQueuedBuffers">
            <summary>
Abort all pending transmission requests.
</summary>
            <remarks>
                <para>Buffers that were aborted will have an operation result set at <see cref="F:PvDotNet.PvResultCode.ABORTED" />.</para>
                <para>This function will wait for the completion of the current block before aborting.</para>
            </remarks>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /></description></item><item><description><see cref="F:PvDotNet.PvResultCode.ABORTED" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvTransmitterGEV.RetrieveFreeBuffer(PvDotNet.PvBuffer@,System.UInt32)">
            <summary>
Retrieve a free buffer from the list of available buffers.
</summary>
            <param name="aBuffer">The buffer that is available to populate and transmit. The object handle is set to NULL if no buffer is available.</param>
            <param name="aTimeout">The maximum number of milliseconds to wait for a free buffer to become available.</param>
            <returns>PvResult containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.OK" /> if successful.</description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /> if the device is not connected.</description></item><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /> if invalid data.</description></item></list></returns>
        </member>
        <member name="M:PvDotNet.PvTransmitterGEV.RetrieveFreeBuffer(PvDotNet.PvBuffer@)">
            <summary>
Retrieve a free buffer from the list of available buffers.
</summary>
            <param name="aBuffer">The buffer that is available to populate and transmit. The object handle is set to NULL if no buffer is available.</param>
            <returns>PvResult containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.OK" /> if successful.</description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_CONNECTED" /> if the device is not connected.</description></item><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /> if invalid data.</description></item></list></returns>
        </member>
        <member name="M:PvDotNet.PvTransmitterGEV.QueueBuffer(PvDotNet.PvBuffer)">
            <summary>
Queue one buffer in to be transmitted when a connection is available.
</summary>
            <param name="aBuffer">The buffer to transmit.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NO_LICENSE" /> if there is no transmitter for non-image types.</description></item><item><description><see cref="F:PvDotNet.PvResultCode.PENDING" /> if the queue is pending.</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvTransmitterGEV.LoadBufferPool(System.Collections.Generic.List`1{PvDotNet.PvBuffer})">
            <summary>
Load a set of free buffers into the pool.
</summary>
            <remarks>
This method provides the transmitter with a set of free buffers that can be retrieved immediately by calling RetrieveFreeBuffer.
</remarks>
            <param name="aBuffers">An array of handles to PvBuffer objects.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /> if data is invalid.</description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvTransmitterGEV.SentBuffersTimeout">
            <summary>
Get/Set the timeout to keep the buffers in the transmitter after they are sent.
</summary>
            <remarks>
                <para>This timeout will allow the system to hold the buffers to service the resend requests.</para>
                <para>This timeout will only be check in between the PvBuffers are sent out so the accuracy is not exact.</para>
            </remarks>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet" /></exception>
        </member>
        <member name="P:PvDotNet.PvTransmitterGEV.ExtendedIDs">
            <summary>
Get/Set the transmitter to use extended (64-bit) block IDs, as specified in GigE Vision 2.0. For receivers that are compliant 
with earlier versions of GigE Vision, set this to false to use standard (32-bit) block IDs. This parameter should only be used 
with GigE Vision 2.0 compliant receivers.
</summary>
            <remarks>
                <para>Return True if extended IDs are enabled.</para>
                <para>Can only be changed before the first buffer is queued in the transmitter.</para>
            </remarks>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.BUSY" /></description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvTransmitterGEV.IsTransmitting">
            <summary>
Returns whether the transmitter has started transmitting blocks.
</summary>
        </member>
        <member name="P:PvDotNet.PvTransmitterGEV.IsOpened">
            <summary>
Returns whether a connection is available to begin transmitting blocks.
</summary>
            <remarks>
                <para>Call Open to ensure that the tranmitter knows where to begin transmitting blocks.</para>
                <para>Return True if a connection is available. False if no connection is available.</para>
            </remarks>
        </member>
        <member name="M:PvDotNet.PvTransmitterGEV.Close">
            <summary>
Stop sending data and close the socket.
</summary>
            <remarks>
Any buffers that are in the middle of being transmitted are aborted.
</remarks>
        </member>
        <member name="M:PvDotNet.PvTransmitterGEV.Open(System.String,System.UInt16,System.String,System.UInt16,System.Boolean,System.Boolean,System.UInt32,System.Boolean,System.UInt32,System.UInt32)">
            <summary>
Initialize a socket to begin transmitting data.
</summary>
            <remarks>
Once this call is completed successfully, the transmitter will begin sending blocks as soon as the first buffer is queued in by calling QueueBuffer.
</remarks>
            <param name="aDestinationIp">The address to which the transmitter will send.</param>
            <param name="aDestinationPort">The port to which the transmitter will send.</param>
            <param name="aSourceIp">The address from which the transmitter will send. If the parameter is an empty string (default), the socket will not be bound to a particular local IP address.</param>
            <param name="aSourcePort">The port from which the transmitter will send. If the parameter is 0 (default), the source port will be dynamically assigned by the operating system.</param>
            <param name="aDontFrag">The value of the Don't Fragment flag in the IP header. The default value is true.</param>
            <param name="aExtendedID">Uses the extended ID for blocks and packets when set to true. This parameter should only be used with GigE Vision 2.0 compliant receivers. The default value is false.</param>
            <param name="aBuffersCapacity">Maximum number of buffer that can be stored simultaneously in the lower layer of the transmitter.</param>
            <param name="aTimestampWhenSending">Set the timestamp in the buffer header before sending the packets.</param>
            <param name="aNumberOfPendingResendRequests">Number of pending resend requests allowed at the same time. All other resend requests will be ignored.</param>
            <param name="aNumberOfBuffersHoldForResends">Number of PvBuffers held in the transmitter to service resend requests after the block is transferred.</param>
            <exception cref="T:PvDotNet.PvResult">
                <see cref="F:PvDotNet.PvResultCode.NETWORK_ERROR" /> if the socket could not be created.
</exception>
        </member>
        <member name="M:PvDotNet.PvTransmitterGEV.Open(System.String,System.UInt16,System.String,System.UInt16)">
            <summary>
Initialize a socket to begin transmitting data.
</summary>
            <remarks>
                <para>Once this call is completed successfully, the transmitter will begin sending blocks as soon as the first buffer is queued in by calling QueueBuffer.</para>
                <para>For information about the default argument parameters bool aDontFrag, bool aExtendedID of this overload method, refer to the other overload method.</para>
            </remarks>
            <param name="aDestinationIp">The address to which the transmitter will send.</param>
            <param name="aDestinationPort">The port to which the transmitter will send.</param>
            <param name="aSourceIp">The address from which the transmitter will send. If the parameter is an empty string (default), the socket will not be bound to a particular local IP address.</param>
            <param name="aSourcePort">The port from which the transmitter will send. If the parameter is 0 (default), the source port will be dynamically assigned by the operating system.</param>
            <exception cref="T:PvDotNet.PvResult">
                <see cref="F:PvDotNet.PvResultCode.NETWORK_ERROR" /> if the socket could not be created.
</exception>
        </member>
        <member name="M:PvDotNet.PvTransmitterGEV.Open(System.String,System.UInt16)">
            <summary>
Initialize a socket to begin transmitting data.
<para>Once this call is completed successfully, the transmitter will begin sending blocks as soon as the first buffer is queued in by calling QueueBuffer.</para><remarks>
This overload method Open has four default argument parameters, for information about these four default argument parameters String ^aSourceIp, uint16_t aSourcePort, bool aDontFrag, bool aExtendedID of this overload method, refer to the other overload method."/&gt;.
</remarks></summary>
            <param name="aDestinationIp">The address to which the transmitter will send.</param>
            <param name="aDestinationPort">The port to which the transmitter will send.</param>
            <exception cref="T:PvDotNet.PvResult">
                <see cref="F:PvDotNet.PvResultCode.NETWORK_ERROR" /> if the socket could not be created.
</exception>
        </member>
        <member name="M:PvDotNet.PvTransmitterGEV.Finalize">
            <summary>
Finalizer.
</summary>
        </member>
        <member name="M:PvDotNet.PvTransmitterGEV.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="M:PvDotNet.PvTransmitterGEV.#ctor">
            <summary>
Constructor.
</summary>
        </member>
        <member name="T:PvDotNet.PvTransmitterGEV">
            <summary>
Class for transmitting blocks using the GigE Vision streaming protocol.
</summary>
            <remarks>
Procedure for transmitting blocks (images or raw data) with the eBUS SDK:
<list type="bullet"><item><description>Ensure that the transmitter knows where to send blocks by calling Open.</description></item><item><description>Initialize the transmitter with a set of free buffers (PvBuffer objects) by calling LoadBufferPool.</description></item><item><description>Retrieve a free buffer to populate by calling RetrieveFreeBuffer.</description></item><item><description>Queue a buffer for transmission by calling QueueBuffer.</description></item><item><description>Once a buffer has been transmitted, it can be retrieved again by calling RetrieveFreeBuffer.</description></item></list>
The following code snippet illustrates procedure above:
The status of a given PvBuffer object can be retrieved by calling OperationResult property of PvBuffer.
<list type="bullet"><item><description>An operation result of <see cref="F:PvDotNet.PvResultCode.OK" /> indicates that the buffer was transmitted successfully.</description></item><item><description>An operation result of <see cref="F:PvDotNet.PvResultCode.NETWORK_ERROR" /> indicates that there was a problem transmitting the buffer (likely due to a lack of connectivity).</description></item><item><description>An operation result of <see cref="F:PvDotNet.PvResultCode.ABORTED" /> indicates that the transmission of that buffer was aborted (typically by calling AbortQueuedBuffers).</description></item><item><description>An operation result of <see cref="F:PvDotNet.PvResultCode.PENDING" /> indicates that the buffer has not yet been fully transmitted.</description></item></list>
To receive transmitted blocks with a PvStream application (such as eBUS Player), the transmitting application must be set up to respond to device discovery requests.
Use PvVirtualDeviceGEV to respond to device discovery requests.
If using eBUS Player or NetCommand to receive data being transmitted with this class, ensure that the application is set up as <b>Data Receiver Only</b>.
For an illustration of how this API is used in practice, refer to the following source code samples in the samples directory where the eBUS SDK resides.
<list type="bullet"><item><description>TransmitTestPattern- Transmits a test pattern to a given destination. This is the easiest starting point for learning to use PvTransmitterGEV.</description></item><item><description>TransmitTiledImages - GUI application that receives video from multiple GEV transmitters, tiles into one video feed and transmits to a given destination.</description></item></list></remarks>
        </member>
        <member name="T:PvDotNet.PvThreadPriority">
            <summary>
Thread priority types.
</summary>
            <remarks>
Defined and used by the eBUS SDK as System.Threading.ThreadPriority does not expose the idle and critical priorities.
</remarks>
        </member>
        <member name="F:PvDotNet.PvThreadPriority.TimeCritical">
            <summary>
THREAD_PRIORITY_TIME_CRITICAL.
</summary>
        </member>
        <member name="F:PvDotNet.PvThreadPriority.Highest">
            <summary>
THREAD_PRIORITY_HIGHEST.
</summary>
        </member>
        <member name="F:PvDotNet.PvThreadPriority.AboveNormal">
            <summary>
THREAD_PRIORITY_ABOVE_NORMAL.
</summary>
        </member>
        <member name="F:PvDotNet.PvThreadPriority.Normal">
            <summary>
THREAD_PRIORITY_NORMAL.
</summary>
        </member>
        <member name="F:PvDotNet.PvThreadPriority.BelowNormal">
            <summary>
THREAD_PRIORITY_BELOW_NORMAL.
</summary>
        </member>
        <member name="F:PvDotNet.PvThreadPriority.Lowest">
            <summary>
THREAD_PRIORITY_LOWEST.
</summary>
        </member>
        <member name="F:PvDotNet.PvThreadPriority.Idle">
            <summary>
THREAD_PRIORITY_IDLE.
</summary>
        </member>
        <member name="M:PvDotNet.PvMp4Writer.ResetLastError">
            <summary>
Resets the last error reported by the object.
</summary>
        </member>
        <member name="P:PvDotNet.PvMp4Writer.LastError">
            <summary>
Returns the last error encountered while trying to open/close the writer or write a frame.
</summary>
        </member>
        <member name="P:PvDotNet.PvMp4Writer.AvgBitrate">
            <summary>
Average bitrate of H.264 encoding for the writer. 
The average bitrate must be set before opening the writer.
</summary>
        </member>
        <member name="M:PvDotNet.PvMp4Writer.Close">
            <summary>
Closes the writer.
</summary>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" />System error, see error description for more information..</description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_SUPPORTED" />H.264 encoding and MP4 recording not supported.</description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_INITIALIZED" />If the writer is not opened.</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvMp4Writer.WriteFrame(PvDotNet.PvImage,System.UInt32@)">
            <summary>
Writes a frame to the MP4 file.
</summary>
            <remarks>
Note: the image used to open the writer is not encoded or written to the file. If you are using the first
image to open the file, you need to call WriteFrame with the same image as well.
</remarks>
            <param name="aImage"> Image to encode to H.264 and write to the MP4 file.</param>
            <param name="aFileSizeDelta">Reference to an integer where the file size delta for encoding/writing this frame is written.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" />If there is an issue with one of the parameters.</description></item><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" />System error, see error description for more information..</description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_SUPPORTED" />H.264 encoding and MP4 recording not supported.</description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_INITIALIZED" />If the writer is not opened.</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvMp4Writer.Open(System.String,PvDotNet.PvImage)">
            <summary>
Opens the writer.
</summary>
            <param name="aFilename">The filename of the MP4: full path including the mp4 extension.</param>
            <param name="aImage">Image similar in width, height and pixel format to the stream to encode.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" />If there is an issue with one of the parameters.</description></item><item><description><see cref="F:PvDotNet.PvResultCode.GENERIC_ERROR" />System error, see error description for more information..</description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_SUPPORTED" />H.264 encoding and MP4 recording not supported.</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvMp4Writer.IsOpened">
            <summary>
Returns true if the writer is already opened.
</summary>
            <returns>True the writer is opened.</returns>
        </member>
        <member name="M:PvDotNet.PvMp4Writer.IsAvailable">
            <summary>
Returns true if H.264 encoding and MP4 output is supported on the system.
</summary>
            <returns>True if available.</returns>
        </member>
        <member name="M:PvDotNet.PvMp4Writer.Finalize">
            <summary>
Finalizer.
</summary>
        </member>
        <member name="M:PvDotNet.PvMp4Writer.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="M:PvDotNet.PvMp4Writer.#ctor">
            <summary>
Constructor.
</summary>
        </member>
        <member name="T:PvDotNet.PvMp4Writer">
            <summary>
Performs H.264 encoding and writing to an MP4 container from PvBuffers.
</summary>
            <remarks>
Call Open with the first image and filename, call write for every buffer (including
the first one) and finilize using the Close method. The MP4 file will not be valid
until/unless the Close method (or descructor) is executed.
</remarks>
        </member>
        <member name="M:PvDotNet.PvDeviceInfo.ToString">
            <summary>
Gets the a string representation of the device info.
</summary>
            <returns>String representation of the device info.</returns>
        </member>
        <member name="P:PvDotNet.PvDeviceInfo.IsLicenseValid">
            <summary>
Test if the eBUS SDK license is valid for this device.
</summary>
            <remarks>
                <para>To connect to third-party GigE Vision devices, the eBUS SDK requires a valid license.
If you don't have a license, contact sales.</para>
                <para>returns true if the license is valid; otherwise; otherwise, false.</para>
            </remarks>
        </member>
        <member name="P:PvDotNet.PvDeviceInfo.IsConfigurationValid">
            <summary>
Test if the device can be reached as currently configured.
</summary>
            <remarks>
                <para>This method compares the GigE Vision device and NIC's IP configurations to ensure they are on the same subnet.</para>
                <para>For USB3 Vision devices, the configuration is considered valid if the device can be enumerated and the Pleora driver is associated to the device.</para>
                <return>True if valid.</return>
            </remarks>
        </member>
        <member name="P:PvDotNet.PvDeviceInfo.UniqueID">
            <summary>
Get a string uniquely identifying this device.
</summary>
            <remarks>
                <para>The content of the unique ID is not garanteed to be represent anything or to be
constant between revisions of the eBUS SDK. It should only be used to opaquely,
uniquely match other device unique IDs from within the same application
life cycle.</para>
                <para>Do not assume the unique ID will be using a MAC address for network devices or 
the USB GUID for USB devices.</para>
                <para>If you need the MAC address of a GigE Vision device, use PvDeviceInfoGEV.MACAddress.</para>
                <para>If you need the USB GUID of a USB3 Vision device, use PvDeviceInfoU3V.GUID.</para>
            </remarks>
        </member>
        <member name="P:PvDotNet.PvDeviceInfo.DisplayID">
            <summary>
Gets a string identifying this device for display purpose.
</summary>
        </member>
        <member name="P:PvDotNet.PvDeviceInfo.LicenseMessage">
            <summary>
Gets a message of whether license is valid, and if not why
</summary>
            <remarks>
This string provides information on validity of the license. If the license is valid, then
it is simply 'valid'. Otherwise, the reason for the invalidity is provided as a string. 
</remarks>
        </member>
        <member name="P:PvDotNet.PvDeviceInfo.ConnectionID">
            <summary>
Gets a unique string identifying this GigE Vision device for connection purpose.
</summary>
            <remarks>
This string can be used with the factory methods of PvDevice and PvStream to
create a GigE Vision device or USB3 Vision device from  generic PvDeviceInfo.
</remarks>
        </member>
        <member name="P:PvDotNet.PvDeviceInfo.UserDefinedName">
            <summary>
 Gets the GigE Vision device's user defined name.
</summary>
            <remarks>
This feature is only supported by devices having persistence memory. It can therefore be 
blank if not supported by the device, or simply not yet assigned.
</remarks>
        </member>
        <member name="P:PvDotNet.PvDeviceInfo.SerialNumber">
            <summary>
 Gets the GigE Vision device's serial number.
</summary>
        </member>
        <member name="P:PvDotNet.PvDeviceInfo.ManufacturerInfo">
            <summary>
 Gets the manufacturer information returned by the GigE Vision device. The usage depends on the manufacturer, but may
 contain an additional model number.
</summary>
        </member>
        <member name="P:PvDotNet.PvDeviceInfo.Version">
            <summary>
GigE Vision device's version.
</summary>
            <remarks>
The GenICam <b>DeviceVersion</b> feature. The usage depends on the manufacturer, but may contain
a modifier for the model, such as "rev A", "1.0".
</remarks>
        </member>
        <member name="P:PvDotNet.PvDeviceInfo.ModelName">
            <summary>
 Gets the GigE Vision device's model name.
</summary>
        </member>
        <member name="P:PvDotNet.PvDeviceInfo.VendorName">
            <summary>
 Gets the GigE Vision device's manufacturer name.
</summary>
        </member>
        <member name="P:PvDotNet.PvDeviceInfo.Type">
            <summary>
Returns the type of the device info object.
</summary>
        </member>
        <member name="P:PvDotNet.PvDeviceInfo.Class">
            <summary>Get the device class.</summary>
            <return>The device's class; a <see cref="D:PvDeviceClass" /> enumeration.</return>
        </member>
        <member name="M:PvDotNet.PvDeviceInfo.Finalize">
            <summary>
Finalizer.
</summary>
        </member>
        <member name="M:PvDotNet.PvDeviceInfo.Dispose">
            <summary>
Finalizer.
</summary>
        </member>
        <member name="T:PvDotNet.PvDeviceInfo">
            <summary>
Information about a GigE Vision device.
</summary>
            <remarks>
                <para>PvDeviceInfo provides information about a GigE Vision device as found by either PvSystem/PvInterface or PvDeviceFinderWnd.</para>
            </remarks>
        </member>
        <member name="T:PvDotNet.PvDeviceInfoType">
            <summary>
Device information type.
</summary>
        </member>
        <member name="F:PvDotNet.PvDeviceInfoType.U3V">
            <summary>
                <para>U3V device information type.</para>
            </summary>
        </member>
        <member name="F:PvDotNet.PvDeviceInfoType.USB">
            <summary>
                <para>USB device information type.</para>
            </summary>
        </member>
        <member name="F:PvDotNet.PvDeviceInfoType.PleoraProtocol">
            <summary>
                <para>Pleora protocol device information type.</para>
            </summary>
        </member>
        <member name="F:PvDotNet.PvDeviceInfoType.GEV">
            <summary>
                <para>GEV device information type.</para>
            </summary>
        </member>
        <member name="T:PvDotNet.PvAccessType">
            <summary>
GigE Vision device access type. 
</summary>
        </member>
        <member name="F:PvDotNet.PvAccessType.Exclusive">
            <summary>
Exclusive access. The controller has full read-write access and any other requests but discovery or resent packets are denied.
</summary>
        </member>
        <member name="F:PvDotNet.PvAccessType.ReadOnly">
            <summary>
Can be used with a PvDeviceGEV Connect method when requesting read-only access to a device.
</summary>
        </member>
        <member name="F:PvDotNet.PvAccessType.Control">
            <summary>
Shared access; a main controller has read-write access to the device and any other controller can have read-only access to the device.
</summary>
        </member>
        <member name="F:PvDotNet.PvAccessType.Open">
            <summary>
Open access; the GigE Vision device isn't connected to any other PC.
</summary>
        </member>
        <member name="F:PvDotNet.PvAccessType.Unknown">
            <summary>
Value not known; indeterminate.
</summary>
        </member>
        <member name="T:PvDotNet.PvDeviceClass">
            <summary>
GigE Vision device class. 
</summary>
        </member>
        <member name="F:PvDotNet.PvDeviceClass.Peripheral">
            <summary>
This device is a peripheral. This implies that this device does not have any streaming channels. 
</summary>
        </member>
        <member name="F:PvDotNet.PvDeviceClass.Transceiver">
            <summary>
This device is a transceiver. This implies that one or more streaming channels transmit data and one or more streaming channels receive data. 
</summary>
        </member>
        <member name="F:PvDotNet.PvDeviceClass.Receiver">
            <summary>
This device is a receiver. This implies all its streaming channels receive data. 
</summary>
        </member>
        <member name="F:PvDotNet.PvDeviceClass.Transmitter">
            <summary>
This device is a transmitter. This implies all its streaming channels transmit data. 
</summary>
        </member>
        <member name="F:PvDotNet.PvDeviceClass.Unknown">
            <summary>
Device class unknown; indeterminate. 
</summary>
        </member>
        <member name="M:PvDotNet.PvTapFilter.GetTapCountFor(System.String)">
            <summary>
Utility method returning how many taps are used to a specific tap geometry.
</summary>
            <param name="aValue">SFNC compliant tap geometry name.</param>
            <returns>Tap count.</returns>
        </member>
        <member name="M:PvDotNet.PvTapFilter.GetTapCountFor(PvDotNet.PvTapGeometry)">
            <summary>
Utility method returning how many taps are used to a specific tap geometry.
</summary>
            <param name="aValue">Tap geometry enum</param>
            <returns>Tap count.</returns>
        </member>
        <member name="M:PvDotNet.PvTapFilter.GetOutputPixelTypeFor(PvDotNet.PvBuffer)">
            <summary>
Static method used to query the output pixel type for an input image of a specific pixel type.
</summary>
            <remarks>
                <para>This method can be used if the output buffer provided to Execute is attached and not allocated. The filter
can re-allocate an allocated buffer if needed (mismatch on width, height or pixel format) but attached
external buffers must be properly formatted before calling Execute.</para>
                <para>To properly prepare the output buffer, use the same width and height as the input buffer. For the pixel
format, use this static method with the input buffer in aBuffer to query the required pixel type of the
output buffer.</para>
            </remarks>
            <param name="aBuffer">Buffer to return the required output pixel type for.</param>
            <returns>The pixel type the filter as currently configured would output.</returns>
        </member>
        <member name="M:PvDotNet.PvTapFilter.GetSupportedGeometryName(System.UInt32)">
            <summary>
Returns the name of a tap geometry.
</summary>
            <param name="aIndex">Index of the geometry: must be between 0 (inclusive) and GetSupportedGeometryCount - 1.</param>
            <returns>Name of the supported geometry aIndex.</returns>
        </member>
        <member name="M:PvDotNet.PvTapFilter.GetSupportedGeometryValue(System.UInt32)">
            <summary>
Returns the PvTapGeometry enum value of one of the supported tap geometry.
</summary>
            <param name="aIndex">Index of the geometry: must be between 0 (inclusive) and GetSupportedGeometryCount - 1.</param>
            <returns>Supported geometry aIndex.</returns>
        </member>
        <member name="M:PvDotNet.PvTapFilter.GetSupportedGeometryCount">
            <summary>
Returns how many tap geometries are supported by this class.
</summary>
            <returns>Geometry count.</returns>
        </member>
        <member name="P:PvDotNet.PvTapFilter.Geometry">
            <summary>
Tap geometry used by the filter when performing reconstruction.
</summary>
        </member>
        <member name="P:PvDotNet.PvTapFilter.ThreadCount">
            <summary>
How many threads are used by the filter. Some filters may not support multi-threading: an 
exception would be thrown when trying to set to any other value than 0.
</summary>
        </member>
        <member name="M:PvDotNet.PvTapFilter.Execute(PvDotNet.PvBuffer,PvDotNet.PvBuffer)">
            <summary>
Executes the filter: performs tap reconstruction on aIn, writing into aOut.
</summary>
            <param name="aIn">The input buffer where data is read from. Must be a PvImage.</param>
            <param name="aOut">The output buffer where data is written to. Can be resized if needed if the 
buffer is allocated. If the buffer is attached, the buffer must be of the right
image size and pixel type.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description>INVALID_DATA_FORMAT</description></item><item><description>GENERIC_ERROR</description></item><item><description>INVALID_PARAMETERS</description></item><item><description>NOT_ENOUGH_MEMORY</description></item><item><description>NOT_SUPPORTED</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvTapFilter.Finalize">
            <summary>
Finalizer.
</summary>
        </member>
        <member name="M:PvDotNet.PvTapFilter.Dispose">
            <summary>
Destructor
</summary>
        </member>
        <member name="M:PvDotNet.PvTapFilter.#ctor">
            <summary>
Constructor
</summary>
        </member>
        <member name="T:PvDotNet.PvTapFilter">
            <summary>
Filter used for tap reconstruction.
</summary>
        </member>
        <member name="T:PvDotNet.PvTapGeometry">
            <summary>
Tap geometries enumeration.
</summary>
            <remarks>
Refer to the GenICam Standard Feature Naming Convention for more information
on the tap configurations defined by this enum.
</remarks>
        </member>
        <member name="F:PvDotNet.PvTapGeometry.LS_4X2E">
            <summary>
Linescan, 4 zones in X with 2 taps and end extraction. Same as AS_4X2E_1Y.
</summary>
        </member>
        <member name="F:PvDotNet.PvTapGeometry.LS_4X2">
            <summary>
Linescan, 4 zones in X with 2 taps. Same as AS_4X2_1Y.
</summary>
        </member>
        <member name="F:PvDotNet.PvTapGeometry.LS_8X">
            <summary>
Linescan, 8 zones in X. Same as PvTapGeometryAS_8X_1Y.
</summary>
        </member>
        <member name="F:PvDotNet.PvTapGeometry.LS_2X2M">
            <summary>
Linescan, 2 zones in X with 2 taps and middle extraction. Same as AS_2X2M_1Y.
</summary>
        </member>
        <member name="F:PvDotNet.PvTapGeometry.LS_2X2E">
            <summary>
Linescan, 2 zones in X with 2 taps and end extraction. Same as AS_2X2E_1Y.
</summary>
        </member>
        <member name="F:PvDotNet.PvTapGeometry.LS_2X2">
            <summary>
Linescan, 2 zones in X with 2 taps. Same as AS_2X2_1Y.
</summary>
        </member>
        <member name="F:PvDotNet.PvTapGeometry.LS_4X">
            <summary>
Linescan, 4 zones in X. Same as AS_4X_1Y.
</summary>
        </member>
        <member name="F:PvDotNet.PvTapGeometry.LS_2XM">
            <summary>
Linescan, 2 zones in X with middle extraction. Same as AS_2XM_1Y.
</summary>
        </member>
        <member name="F:PvDotNet.PvTapGeometry.LS_2XE">
            <summary>
Linescan, 2 zones in X with end extraction. Same as AS_2XE_1Y.
</summary>
        </member>
        <member name="F:PvDotNet.PvTapGeometry.LS_2X">
            <summary>
Linescan, 2 zones in X. Same as AS_2X_1Y.
</summary>
        </member>
        <member name="F:PvDotNet.PvTapGeometry.AS_2X2E_2YE">
            <summary>
2 zones in X with 2 taps, 2 zones in Y with 2 taps.
</summary>
        </member>
        <member name="F:PvDotNet.PvTapGeometry.AS_4X2E_1Y">
            <summary>
4 zones in X with 2 taps, 2 zones in Y with 2 taps.
</summary>
        </member>
        <member name="F:PvDotNet.PvTapGeometry.AS_4X2_1Y">
            <summary>
4 zones in X with 2 taps, 1 zone in Y.
</summary>
        </member>
        <member name="F:PvDotNet.PvTapGeometry.AS_8X_1Y">
            <summary>
8 zones in X, 1 zone in Y.
</summary>
        </member>
        <member name="F:PvDotNet.PvTapGeometry.AS_2XM_1Y2">
            <summary>
2 zones in X with middle extraction,  1 zone in Y with 2 taps.
</summary>
        </member>
        <member name="F:PvDotNet.PvTapGeometry.AS_2XM_2YE">
            <summary>
2 zones in X with middle extraction, 2 zones in Y with end extraction.
</summary>
        </member>
        <member name="F:PvDotNet.PvTapGeometry.AS_2XE_1Y2">
            <summary>
2 zones in X with end extraction, 1 zone in Y with 2 taps.
</summary>
        </member>
        <member name="F:PvDotNet.PvTapGeometry.AS_2XE_2YE">
            <summary>
2 zones in X with end extraction, 2 zones in Y with end extraction.
</summary>
        </member>
        <member name="F:PvDotNet.PvTapGeometry.AS_2X2E_1Y">
            <summary>
2 zones in X with 2 taps, 1 zone in Y.
</summary>
        </member>
        <member name="F:PvDotNet.PvTapGeometry.AS_2X_1Y2">
            <summary>
2 zones in X, 1 zone in Y with 2 taps.
</summary>
        </member>
        <member name="F:PvDotNet.PvTapGeometry.AS_2X_2YE">
            <summary>
2 zones in X, 2 zones in Y with end extraction.
</summary>
        </member>
        <member name="F:PvDotNet.PvTapGeometry.AS_1X2_1Y2">
            <summary>
1 zone in X with 2 taps, 1 zone in Y with 2 taps.
</summary>
        </member>
        <member name="F:PvDotNet.PvTapGeometry.AS_1X2_2YE">
            <summary>
1 zone in X with 2 taps, 2 zones in Y with end extraction.
</summary>
        </member>
        <member name="F:PvDotNet.PvTapGeometry.AS_2X2M_1Y">
            <summary>
2 zones in X with 2 taps and middle extraction, 1 zone in Y.
</summary>
        </member>
        <member name="F:PvDotNet.PvTapGeometry.AS_2X2_1Y">
            <summary>
2 zones in X with 2 taps, 1 zone in Y.
</summary>
        </member>
        <member name="F:PvDotNet.PvTapGeometry.AS_4X_1Y">
            <summary>
4 zones in X, 1 zone in Y.
</summary>
        </member>
        <member name="F:PvDotNet.PvTapGeometry.AS_1X_2YE">
            <summary>
1 zone in X, 2 zones in Y with end extraction.
</summary>
        </member>
        <member name="F:PvDotNet.PvTapGeometry.AS_1X_1Y2">
            <summary>
1 zone in X, 1 zone in Y with 2 taps.
</summary>
        </member>
        <member name="F:PvDotNet.PvTapGeometry.AS_2XM_1Y">
            <summary>
2 zones in X with middle extraction, 1 zone in Y.
</summary>
        </member>
        <member name="F:PvDotNet.PvTapGeometry.AS_2XE_1Y">
            <summary>
2 zones in X with end extraction, 1 zone in Y.
</summary>
        </member>
        <member name="F:PvDotNet.PvTapGeometry.AS_2X_1Y">
            <summary>
2 zones in X, 1 zone in Y.
</summary>
        </member>
        <member name="F:PvDotNet.PvTapGeometry.Unknown">
            <summary>
Unknown tap geometry.
</summary>
        </member>
        <member name="P:PvDotNet.IPvFilter.ThreadCount">
            <summary>
How many threads are used by the filter. If multi-threading is not supported
regardless of the value writtin to this attribute 1 is always read back.
</summary>
        </member>
        <member name="M:PvDotNet.IPvFilter.Execute(PvDotNet.PvBuffer,PvDotNet.PvBuffer)">
            <summary>
Executes a filter reading from aIn and writing to aOut.
</summary>
            <param name="aIn">Input buffer.</param>
            <param name="aOut">Output buffer.</param>
        </member>
        <member name="T:PvDotNet.IPvFilter">
            <summary>
Generic interface for eBUS SDK filters
</summary>
        </member>
        <member name="P:PvDotNet.PvProperty.Value">
            <summary>
The property value.
</summary>
        </member>
        <member name="P:PvDotNet.PvProperty.Name">
            <summary>
The property name.
</summary>
        </member>
        <member name="M:PvDotNet.PvProperty.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="M:PvDotNet.PvProperty.#ctor(System.String,System.String)">
            <summary>
Constructor that can set name, value.
</summary>
            <param name="aName">Property name.</param>
            <param name="aValue">Property value.</param>
        </member>
        <member name="M:PvDotNet.PvProperty.#ctor">
            <summary>
Default constructor.
</summary>
        </member>
        <member name="T:PvDotNet.PvProperty">
            <summary>
Simple name/value string pair class.
</summary>
        </member>
        <member name="P:PvDotNet.PvDeInterlacer.FieldInversion">
            <summary>
Gets and sets the deinterlacer configuration for field inversion. False for 1-2 field order (default) or true for 2-1.
</summary>
        </member>
        <member name="M:PvDotNet.PvDeInterlacer.ApplyEven(PvDotNet.PvBuffer,PvDotNet.PvBuffer)">
            <summary>
Writes the even lines of the output buffer from a buffer containing the even field.
</summary>
            <param name="aIn">Buffer used as source.</param>
            <param name="aOut">Buffer used as destination for the operation.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" />, if a buffer is NULL or both buffers points to the same data.</description></item><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_DATA_FORMAT" />, if the buffers are not properly formatted.</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvDeInterlacer.ApplyOdd(PvDotNet.PvBuffer,PvDotNet.PvBuffer)">
            <summary>
Writes the odd lines of the output buffer from a buffer containing the odd field.
</summary>
            <param name="aIn">Buffer used as source.</param>
            <param name="aOut">Buffer used as destination for the operation.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" />, if a buffer is NULL or both buffers points to the same data.</description></item><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_DATA_FORMAT" />, if the buffers are not properly formatted.</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvDeInterlacer.Apply(PvDotNet.PvBuffer,PvDotNet.PvBuffer,PvDotNet.PvBuffer)">
            <summary>
Deinterlaces an image from a pair of PvBuffers, one Even and one Odd field.
</summary>
            <param name="aInOdd">
                <see cref="T:PvDotNet.PvBuffer" /> used as Odd field source.</param>
            <param name="aInEven">
                <see cref="T:PvDotNet.PvBuffer" /> used as Even field source.</param>
            <param name="aOut">
                <see cref="T:PvDotNet.PvBuffer" /> used as destination for the operation.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" />, if a buffer is NULL or both buffers points to the same data.</description></item><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_DATA_FORMAT" />, if both buffers are not similar: width, height, pixel format.</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvDeInterlacer.Apply(PvDotNet.PvBuffer,PvDotNet.PvBuffer)">
            <summary>
Deinterlaces an image from a <see cref="T:PvDotNet.PvBuffer" /> containing both fields.
</summary>
            <remarks>
There is one overload for this method, refer to the other overload method: 
<see cref="M:PvDotNet.PvDeInterlacer.Apply(PvDotNet.PvBuffer,PvDotNet.PvBuffer,PvDotNet.PvBuffer)" />.
</remarks>
            <param name="aIn">
                <see cref="T:PvDotNet.PvBuffer" /> used as source.</param>
            <param name="aOut">
                <see cref="T:PvDotNet.PvBuffer" /> used as destination for the operation.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" />, if a buffer is NULL or both buffers points to the same data.</description></item><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_DATA_FORMAT" />, if the buffer has an odd number lines.</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvDeInterlacer.Finalize">
            <summary>
Finalizer.
</summary>
        </member>
        <member name="M:PvDotNet.PvDeInterlacer.Dispose">
            <summary>
Destructor
</summary>
        </member>
        <member name="M:PvDotNet.PvDeInterlacer.#ctor">
            <summary>
Constructor
</summary>
        </member>
        <member name="T:PvDotNet.PvDeInterlacer">
            <summary>
De-interlacing filter
</summary>
            <remarks>
                <para>This class only supports non-destructive (non-in-place) filtering on buffers with an image payload type.</para>
                <para>It is possible to de-interlace a buffer containing both fields using the #Apply
method only taking a single input <see cref="T:PvDotNet.PvBuffer" /> as parameter. With this method, 
field inversion can be controlled through <see cref="P:PvDotNet.PvDeInterlacer.FieldInversion" />.</para>
                <para>The other <see cref="M:PvDotNet.PvDeInterlacer.Apply(PvDotNet.PvBuffer,PvDotNet.PvBuffer)" /> method takes two independent <see cref="T:PvDotNet.PvBuffer" /> objects each containing
a field. Even and Odd interlaced fields are required for reconstructions.
<see cref="P:PvDotNet.PvDeInterlacer.FieldInversion" /> is ignored when de-interlacing with this <see cref="M:PvDotNet.PvDeInterlacer.Apply(PvDotNet.PvBuffer,PvDotNet.PvBuffer)" /> method, the
user can simply swap the parameters to obtain the same effect.</para>
                <para>
                    <b>To de-interlace an image:</b>
                </para>
                <list type="number">
                    <item>
                        <description>Configure a filter object.</description>
                    </item>
                    <item>
                        <description>Apply the filter. Use PvFilter.Apply.</description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="M:PvDotNet.PvBuffer.GetPayloadSize">
            <summary>
Returns payload size in bytes, excluding any extra padding.
</summary>
            <remarks>
                <para>Gets the size in bytes of the block received by the data receiver including, 
if present, additional chunk data and headers.</para>
                <para>Different than GetAcquiredSize as it does not include optional additional padding
when data chunks are present.</para>
                <para>If data chunks are not present, this method returns the same value as GetAcquiredSize 
as extra padding is only an issue when data chunks are present.</para>
                <para>This method is required in order to parse the chunk data using GenICam.</para>
            </remarks>
            <returns>Payload size in bytes, excluding any extra padding.</returns>
        </member>
        <member name="M:PvDotNet.PvBuffer.GetChunkRawDataByID(System.UInt32)">
            <summary>
Returns a const pointer to the data chunk with its ID matching aID.
</summary>
            <remarks>
If the aID chunk is not found or the PvBuffer does not have any chunks 
NULL is returned.
</remarks>
            <param name="aID">Data chunk ID.</param>
            <returns>Point to chunk data. NULL if aID is not found.</returns>
        </member>
        <member name="M:PvDotNet.PvBuffer.GetChunkRawDataByIndex(System.UInt32)">
            <summary>
Returns a pointer to the data chunk at zero-based aIndex. 
</summary>
            <remarks>
Chunks are enumerated from the end of the payload data to its beginning.
If the index is out of range or the PvBuffer does not have any data 
chunk NULL is returned.
</remarks>
            <param name="aIndex">Data chunk index.</param>
            <returns>Point to chunk data. NULL if aIndex is out of range.</returns>
        </member>
        <member name="M:PvDotNet.PvBuffer.GetChunkSizeByID(System.UInt32)">
            <summary>
Returns the size in bytes of the data chunk identified by aID.
</summary>
            <remarks>
If the aID chunk is not found or the PvBuffer does not have any 
chunks 0 is returned.
</remarks>
            <param name="aID">Data chunk ID.</param>
            <returns>Data chunk size. 0 if the chunk ID is not found.</returns>
        </member>
        <member name="M:PvDotNet.PvBuffer.GetChunkSizeByIndex(System.UInt32)">
            <summary>
Returns the size in bytes of the data chunk at zero-based aIndex. 
</summary>
            <remarks>
Chunks are enumerated from the end of the payload data to its beginning.
If the index is out of range or the PvBuffer does not have any data 
chunk 0 is returned.
</remarks>
            <param name="aIndex">Data chunk index.</param>
            <returns>Data chunk size. 0 if the index is out of range.</returns>
        </member>
        <member name="M:PvDotNet.PvBuffer.AddChunk(System.UInt32,System.Byte!System.Runtime.CompilerServices.IsConst*,System.UInt32)">
            <summary>
Add chunk data to the buffer.
</summary>
            <remarks>
Add chunk data to the buffer payload section by specifying the index ID of the chunk data.
</remarks>
            <param name="aID">Chunk data ID for aIndex.</param>
            <param name="aData">Payload data of the chunk data.</param>
            <param name="aLength">Length of the payload data of the chunk, in bytes. Must be a multiple of 4 bytes.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description>BUFFER_TOO_SMALL</description></item><item><description>INVALID_ARGUMENT</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvBuffer.GetChunkIDByIndex(System.UInt32)">
            <summary>
Returns the ID of a chunk based on its index.
</summary>
            <remarks>
If the index is out of range or the PvBuffer does not have any data 
chunk 0 is returned in aID.
</remarks>
            <param name="aIndex">Data chunk index.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /></description></item></list></exception>
            <returns>The ID of a chunk based on its index.</returns>
        </member>
        <member name="P:PvDotNet.PvBuffer.ChunkCount">
            <summary>
Returns the number of data chunks in the PvBuffer. 
</summary>
            <remarks>
                <para>If no data chunks are available, 0 is returned.</para>
                <para>Counting chunks requires the chunks to be parsed and resolved which has a 
performance hit.</para>
                <para>If you need to access chunks directly, you need to use this method to enumerate 
the chunks. If you access the chunks through GenICam, just use HasChunks to see 
if you need to attach the buffer the GenICam parameter array of the device.</para>
            </remarks>
        </member>
        <member name="P:PvDotNet.PvBuffer.HasChunks">
            <summary>
Returns true if the buffer has data chunks.
</summary>
            <remarks>
                <para>Unlike GetChunkCount, chunks do not need to be parsed or resolved 
with this method.</para>
            </remarks>
        </member>
        <member name="P:PvDotNet.PvBuffer.ChunkData">
            <summary>
Gets the <see cref="T:PvDotNet.PvChunkData" /> interface to the buffer or NULL, depending on payload type.
</summary>
            <remarks>
                <para>If the payload type of the PvBuffer is PvPayloadType.ChunkData, a reference to
a <see cref="T:PvDotNet.PvChunkData" /> interface of the buffer is returned.</para>
                <para> If the payload type of the PvBuffer is NOT PvPayloadType.ChunkData, a null
reference is returned.</para>
                <para>This <see cref="T:PvDotNet.PvChunkData" /> handle is owned by the PvBuffer and does not need to be released
after use. It is valid as long as the PvBuffer exists.</para>
            </remarks>
        </member>
        <member name="P:PvDotNet.PvBuffer.RawData">
            <summary>
Gets the <see cref="T:PvDotNet.PvRawData" /> interface to the buffer or NULL, depending on payload type.
</summary>
            <remarks>
                <para>If the payload type of the PvBuffer is PvPayloadTypeRawData, a reference to
a <see cref="T:PvDotNet.PvRawData" /> interface of the buffer is returned.</para>
                <para> If the payload type of the PvBuffer is NOT PvPayloadType.RawData, a null
reference is returned.</para>
                <para>This <see cref="T:PvDotNet.PvRawData" /> handle is owned by the PvBuffer and does not need to be released
after use. It is valid as long as the PvBuffer exists.</para>
            </remarks>
        </member>
        <member name="P:PvDotNet.PvBuffer.Image">
            <summary>
Gets the <see cref="T:PvDotNet.PvImage" /> interface to the buffer or NULL, depending on payload type.
</summary>
            <remarks>
                <para>If the payload type of the PvBuffer is PvPayloadTypeImage, a reference to
the <see cref="T:PvDotNet.PvImage" /> interface of the buffer is returned.</para>
                <para>If the payload type of the PvBuffer is NOT PvPayloadType.Image, a null
reference is returned.</para>
                <para>This <see cref="T:PvDotNet.PvImage" /> handle is owned by the PvBuffer and does not need to be released
after use. It is valid as long as the PvBuffer exists.</para>
            </remarks>
        </member>
        <member name="M:PvDotNet.PvBuffer.GetMissingPacketIds(System.UInt32,System.UInt32@,System.UInt32@)">
            <summary>
Gets a missing packet group that represents an unpopulated area of memory in this buffer.
</summary>
            <remarks>
                <para>This is an advanced feature that requires knowledge of how GigE Vision data is transmitted.
Refer to <see cref="P:PvDotNet.PvBuffer.MissingPacketIdsCount" /> for further details on how this feature is used.</para>
            </remarks>
            <param name="aIndex">The index of the missing packet group being retrieved.</param>
            <param name="aPacketIdLow">The first packet of a range of missing packets.</param>
            <param name="aPacketIdHigh">The last packet of a range of missing packets. A value of 0xFFFFFF ( or 0xFFFFFFFF for ExtendedID )
 indicates that the last packet of the block went missing and therefore the actual size of the block is unknown.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description>NOT_AVAILABLE.</description></item><item><description>NOT_IMPLEMENTED./&gt; </description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvBuffer.MissingPacketIdsCount">
            <summary>
Gets the number of missing packet groups that represent unpopulated areas of memory in this buffer.
</summary>
            <remarks>
                <para>This is an advanced feature that requires knowledge of how GigE Vision data is transmitted.</para>
                <para> When receiving data from a GigE Vision transmitter, network conditions may prevent the successful delivery
of all the data for a given block. Although the eBUS data receiver provides a mechanism for requesting
lost packets, there are cases when it is desirable to ignore missing packets and make use of a buffer that
contains missing information. In some cases, there are portions of a block that are less important and can thus
be disregarded. GetMissingPacketIdsCount and GetMissingPacketIds can provide information about
which packets were lost. To use this feature take note of the following procedure:</para>
                <list type="bullet">
                    <item>
                        <description>Enable the feature that causes the data receiver to keep track of missing packets 
(see the EnableMissingPacketsList property of PvStream parameters).</description>
                    </item>
                    <item>
                        <description>Optionally disable the mechanism that requests lost packets 
(see the RequestMissingPackets property of PvStream parameters).</description>
                    </item>
                    <item>
                        <description>Check the operation result when a new block is received (see <see cref="P:PvDotNet.PvBuffer.OperationResult" />).</description>
                    </item>
                    <item>
                        <description>If the operation result is MISSING_PACKETS, use property MissingPacketIdsCount to determine how many groups of packets are missing.</description>
                    </item>
                    <item>
                        <description>Iterate through the missing packet groups using <see cref="M:PvDotNet.PvBuffer.GetMissingPacketIds(System.UInt32,System.UInt32@,System.UInt32@)" />.</description>
                    </item>
                    <item>
                        <description>Note that there is no particular order to the missing packet groups that are returned.</description>
                    </item>
                    <item>
                        <description>Take note of the packet size set on the GigE Vision transmitter from which you are receiving 
to determine the areas of the payload where information is missing.</description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="P:PvDotNet.PvBuffer.IsTrailerValid">
            <summary>
True if this buffer has valid trailer (GVSP) information.
</summary>
            <remarks>
                <para>If the buffer trailer is not valid (missing) some information about the buffer
could be missing. As an example, the image payload type confirms the number
of lines received in the trailer.</para>
                <para>When a buffer is attached or allocated for use other than receiving GVSP data,
this attribute evaluates to true in order to appear as valid.</para>
            </remarks>
        </member>
        <member name="P:PvDotNet.PvBuffer.IsHeaderValid">
            <summary>
True if this buffer has valid header (GVSP) information.
</summary>
            <remarks>
                <para>If the buffer header is not valid (missing) the buffer has to be manipulated
with extreme caution. To start with, it is impossible to confirm the payload type.
The timestamp and other shared header information is not valid. Finally, information
specific to some payload types (like with, height, pixel format, etc. for the image
payload type) is not available or valid this buffer.</para>
                <para>When a buffer is attached or allocated for use other than receiving GVSP data,
this attribute evaluates to true in order to appear as valid.</para>
            </remarks>
        </member>
        <member name="P:PvDotNet.PvBuffer.IsExtendedID">
            <summary>
Check if the buffer is currently in extended ID mode.
</summary>
            <remarks>
                <para>When the extended ID mode is not enabled, the maximum block ID is 0xFFFFFF 
and the maximum packet ID is 0xFFFFFF as per the GEV 1.X specification. 
When the extended ID mode is enabled, the maximum block ID is 0xFFFFFFFFFFFFFFFF 
and the maximum packet ID is 0xFFFFFFFF as per the GEV 2.X specification.</para>
                <para> When a PvBuffer is received, the extended ID mode is initialized based on the information 
received by the PvStreamLib.Stream. When a PvBuffer is sent, the extended ID mode
will be initialized by the PvTransmitterGEV according to its configuration.</para>
                <para>Returns true if the extended mode is in usage.</para>
            </remarks>
        </member>
        <member name="P:PvDotNet.PvBuffer.PacketOutOfOrderCount">
            <summary>
Number of packets received out of order.
</summary>
        </member>
        <member name="P:PvDotNet.PvBuffer.RedundantPacketCount">
            <summary>
Number of packets received more than once.
</summary>
        </member>
        <member name="P:PvDotNet.PvBuffer.IgnoredPacketCount">
            <summary>
Packets received that were ignored when this buffer was filled by the data receiver.
</summary>
        </member>
        <member name="P:PvDotNet.PvBuffer.LostPacketCount">
            <summary>
Packets that were not successfully delivered when this PvBuffer was filled by the data receiver.
</summary>
        </member>
        <member name="P:PvDotNet.PvBuffer.ResendPacketRequestedCount">
            <summary>
The number of packets the data receiver requests with ResendGroupRequested.
</summary>
        </member>
        <member name="P:PvDotNet.PvBuffer.ResendGroupRequestedCount">
            <summary>
The number of resend requests issued by the data receiver. 
</summary>
        </member>
        <member name="P:PvDotNet.PvBuffer.PacketsRecoveredSingleResendCount">
            <summary>
The number of lost packets successfully recovered  by packet resend requests without any resend request retries. 
</summary>
        </member>
        <member name="P:PvDotNet.PvBuffer.PacketsRecoveredCount">
            <summary>
The number of lost packets successfully recovered  by packet resend requests. Duplicate received packets are not counted. 
</summary>
        </member>
        <member name="P:PvDotNet.PvBuffer.OperationResult">
            <summary>
Gets the value of aOperationResult when this buffer was last received through a PvStream. See also PvStream::RetrieveBuffer, PvPipeline::RetrieveNextBuffer.
</summary>
            <remarks>
                <para>Buffers with BUFFER_TOO_SMALL, ABORTED, NOT_CONNECTED and NO_MORE_ITEM operation results are never returned to
the user with PvPipeline. PvPipeline handles these operation results internally without returning the buffers.
Buffers with these operation results can only reach the user when using PvStream directly.</para>
                <para>Result of the acquisition operation; Includes:
<list type="bullet"><see cref="F:PvDotNet.PvResultCode.NOT_INITIALIZED" /><see cref="F:PvDotNet.PvResultCode.OK" /><see cref="F:PvDotNet.PvResultCode.TIMEOUT" /><see cref="F:PvDotNet.PvResultCode.ABORTED" /><see cref="F:PvDotNet.PvResultCode.MISSING_PACKETS" /><see cref="F:PvDotNet.PvResultCode.BUFFER_TOO_SMALL" /><see cref="F:PvDotNet.PvResultCode.IMAGE_ERROR" /> for images with grabber issues like data overrun or missing lines (complete or partial)
<see cref="F:PvDotNet.PvResultCode.RESENDS_FAILURE" /><see cref="F:PvDotNet.PvResultCode.TOO_MANY_RESENDS" /><see cref="F:PvDotNet.PvResultCode.TOO_MANY_CONSECUTIVE_RESENDS" /><see cref="F:PvDotNet.PvResultCode.INVALID_DATA_FORMAT" /><see cref="F:PvDotNet.PvResultCode.AUTO_ABORTED" /><see cref="F:PvDotNet.PvResultCode.ERR_OVERFLOW" /></list></para>
            </remarks>
        </member>
        <member name="P:PvDotNet.PvBuffer.ReceptionTime">
            <summary>
Get the buffer's reception time.
</summary>
            <remarks>
The buffer's reception time on the host, in micro seconds. Not an absolute time value.
</remarks>
        </member>
        <member name="P:PvDotNet.PvBuffer.Timestamp">
            <summary>
Gets the buffer's timestamp. 
</summary>
            <remarks>
                <para>With hardware timestamps and GigE Vision devices, the device defines the timestamp tick frequency. The effective value
can be retrieved from the GenApi interface of the device.</para>
                <para>With hardware timestamps and USB3 Vision devices, timestamps are always defined in nanoseconds.</para>
                <para>With software timestamps the timestamps are in microseconds.</para>
                <para>Use the PvStream GenApi interface to configure whether hardware or software time stamps are used.</para>
                <para>For Pleora devices, this is the value of the relative timestamp clock when the grabber 
began receiving data from the camera head - on the rising edge of the FVAL.</para>
            </remarks>
        </member>
        <member name="P:PvDotNet.PvBuffer.BlockID">
            <summary>
Gets the block ID.
</summary>
            <remarks>
This method returns the block ID. The GigE Vision or USB3 Vision transmitter typically increments
the value by 1 for each new image. You can use this value to ensure the
blocks are in order and that none are missing. The value is unsigned and wraps
around to 1 (skipping 0) when it reaches 65536.
</remarks>
        </member>
        <member name="M:PvDotNet.PvBuffer.Detach">
            <summary>
Releases an attached memory buffer. Does nothing other than resetting the memory buffer pointer to NULL.<seealso cref="M:PvDotNet.PvBuffer.Attach(System.Byte*,System.UInt32)" /></summary>
            <returns>The buffer's location in memory.</returns>
        </member>
        <member name="M:PvDotNet.PvBuffer.Attach(System.Byte*,System.UInt32)">
            <summary>
Attach this PvBuffer to an external memory buffer. To use an internal memory buffer, use <see cref="M:PvDotNet.PvBuffer.Alloc(System.UInt32)" />.
</summary>
            <param name="aBuffer"> A pointer to the buffer.</param>
            <param name="aSize">The size of the buffer, in bytes.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description>INVALID_PARAMETER.</description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvBuffer.DataPointer">
            <summary>
Gets the buffer's data pointer. To set the memory location, use <see cref="M:PvDotNet.PvBuffer.Alloc(System.UInt32)" /> or <see cref="M:PvDotNet.PvBuffer.Attach(System.Byte*,System.UInt32)" />.
</summary>
        </member>
        <member name="M:PvDotNet.PvBuffer.Free">
            <summary>
Frees (de-allocates) the buffer's internal memory. <seealso cref="M:PvDotNet.PvBuffer.Alloc(System.UInt32)" /></summary>
        </member>
        <member name="M:PvDotNet.PvBuffer.Alloc(System.UInt32)">
            <summary>
Allocates memory for this PvBuffer.
</summary>
            <param name="aSize">The size of the buffer, in bytes.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description>NOT_ENOUGH_MEMORY.</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvBuffer.Reset(PvDotNet.PvPayloadType)">
            <summary>
Reconstruct the object with a new payload type.
</summary>
            <param name="aPayloadType">The default payload type is PvPayloadTypeImage.</param>
        </member>
        <member name="M:PvDotNet.PvBuffer.Reset">
            <summary>
Reconstruct the object with a default payload type PvPayloadTypeImage.
</summary>
            <remarks>
                <para>There is one overload for this method, refer to the other overload method:</para>
                <para>
                    <see cref="M:PvDotNet.PvBuffer.Reset(PvDotNet.PvPayloadType)" />
                </para>
            </remarks>
        </member>
        <member name="P:PvDotNet.PvBuffer.ChunkLayoutID">
            <summary>
Chunk layout ID
</summary>
        </member>
        <member name="P:PvDotNet.PvBuffer.Size">
            <summary>
Gets the buffer's size (total capacity, allocated or attached) in bytes.
</summary>
        </member>
        <member name="P:PvDotNet.PvBuffer.AcquiredSize">
            <summary>
Gets the size, in bytes of the payload received by the data receiver.
</summary>
            <remarks>
This property is not necessarily equal to (Width * Height * BitsPerPixel) / 8 + (PaddingX * Height + PaddingY) for an image.
</remarks>
        </member>
        <member name="P:PvDotNet.PvBuffer.ID">
            <summary>
Gets the buffer's ID.
</summary>
        </member>
        <member name="P:PvDotNet.PvBuffer.PayloadType">
            <summary>
Gets the payload type currently used by the buffer.
</summary>
        </member>
        <member name="M:PvDotNet.PvBuffer.Finalize">
            <summary>
Finalizer.
</summary>
        </member>
        <member name="M:PvDotNet.PvBuffer.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="M:PvDotNet.PvBuffer.#ctor(PvDotNet.PvPayloadType)">
            <summary>
Constructor.	 
</summary>
            <param name="aPayloadType">The block type (default is PvPayloadTypeImage).</param>
        </member>
        <member name="M:PvDotNet.PvBuffer.#ctor">
            <summary>
Constructor.
</summary>
        </member>
        <member name="T:PvDotNet.PvBuffer">
            <summary>
Represents a block of data in memory.
</summary>
            <remarks>
                <para> A PvBuffer object is typically used to receive data from a GigE Vision or USB3 Vision transmitter or to transmit data to a GigE Vision receiver.
To learn about receiving data from a GigE Vision transmitter, see PvStreamGEV.
To learn about receiving data from a USB3 Vision transmitter, see PvStreamU3V.
To learn about transmitting GigE Vision data to a GigE Vision receiver, see PvTransmitterGEV.</para>
                <para>A block of data has an associated payload which can be an image, raw data, file, chunk data, extended chunk data or device specific.</para>
                <para>In order to access the payload specific data, use property <see cref="P:PvDotNet.PvBuffer.Image" /> in order to get a handle 
to an interface giving you access to payload specific methods and properties.</para>
                <para>The current payload type of a PvBuffer can be determined by using the <see cref="P:PvDotNet.PvBuffer.PayloadType" /> method.</para>
                <para>In this section:</para>
                <list type="bullet">
                    <item>
                        <description>Creating and configuring buffers.</description>
                    </item>
                    <item>
                        <description>Accessing payload type specific data.</description>
                    </item>
                    <item>
                        <description>Processing images.</description>
                    </item>
                </list>
                <para>
                    <h3 id="configuring">Creating and configuring buffers</h3>
                </para>
                <para>
                    <b>To determine the payload type and access payload type specific data:</b>
                </para>
                <list type="number">
                    <item>
                        <description>Retrieve the PvPayloadType using <see cref="P:PvDotNet.PvBuffer.PayloadType" />.</description>
                    </item>
                    <item>
                        <description>If PvPayloadType is PvPayloadTypeImage, retrieve <see cref="T:PvDotNet.PvImage" /> reference from your PvBuffer.</description>
                    </item>
                    <item>
                        <description>Access image specific data through the <see cref="T:PvDotNet.PvImage" /> reference, like <see cref="P:PvDotNet.PvImage.Width" />, <see cref="P:PvDotNet.PvImage.Height" />, etc.</description>
                    </item>
                    <item>
                        <description>There is no need to release or delete the <see cref="T:PvDotNet.PvImage" /> reference. It is valid as long as the PvBuffer exists.</description>
                    </item>
                </list>
                <para>
                    <h3 id="processing">Processing images</h3>
                </para>
                <para>
                    <b>To process an image:</b>
                </para>
                <list type="number">
                    <item>
                        <description>Retrieve a <see cref="T:PvDotNet.PvImage" /> interface to the buffer use property.<see cref="P:PvDotNet.PvBuffer.Image" />.</description>
                    </item>
                    <item>
                        <description>Test the success of the image acquisition. Use the <i>aOperationResult</i> parameter in PvStream::RetrieveBuffer or PvBuffer::GetOperationResult.</description>
                    </item>
                    <item>
                        <description>Process the image using your own code. You may process the image in place, if you wish. Use: </description>
                    </item>
                </list>
                <list type="bullet">
                    <item>
                        <description>PvImage.AcquiredSize.</description>
                    </item>
                    <item>
                        <description>PvImage.Height and PvImage.Width.</description>
                    </item>
                    <item>
                        <description>PvImage.OffsetX and PvImage.OffsetY.</description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="M:PvDotNet.PvChunkData.GetChunkRawDataByID(System.UInt32)">
            <summary>
Returns a const pointer to the data chunk with its ID matching aID.
</summary>
            <remarks>
                <para>Same as PvBuffer equivalent. Provided with this interface for convenience.</para>
            </remarks>
            <param name="aID">Data chunk ID.</param>
            <returns>Point to chunk data. NULL if aID is not found.</returns>
        </member>
        <member name="M:PvDotNet.PvChunkData.GetChunkRawDataByIndex(System.UInt32)">
            <summary>
Returns a pointer to the data chunk at zero-based aIndex. 
</summary>
            <remarks>
                <para>Same as PvBuffer equivalent. Provided with this interface for convenience.</para>
            </remarks>
            <param name="aIndex">Data chunk index.</param>
            <returns>Point to chunk data. NULL if aIndex is out of range.</returns>
        </member>
        <member name="M:PvDotNet.PvChunkData.GetChunkSizeByID(System.UInt32)">
            <summary>
Returns the size in bytes of the data chunk identified by aID.
</summary>
            <remarks>
                <para>Same as PvBuffer equivalent. Provided with this interface for convenience.</para>
            </remarks>
            <param name="aID">Data chunk ID.</param>
            <returns>Data chunk size. 0 if the chunk ID is not found.</returns>
        </member>
        <member name="M:PvDotNet.PvChunkData.GetChunkSizeByIndex(System.UInt32)">
            <summary>
Returns the size in bytes of the data chunk at zero-based aIndex. 
</summary>
            <remarks>
                <para>Same as PvBuffer equivalent. Provided with this interface for convenience.</para>
            </remarks>
            <param name="aIndex">Data chunk index.</param>
            <returns>Data chunk size. 0 if the index is out of range.</returns>
        </member>
        <member name="M:PvDotNet.PvChunkData.AddChunk(System.UInt32,System.Byte*,System.UInt32)">
            <summary>
Add chunk data to the buffer.
</summary>
            <remarks>
                <para>Same as PvBuffer equivalent. Provided with this interface for convenience.</para>
            </remarks>
            <param name="aID">Chunk data ID for aIndex.</param>
            <param name="aData">Payload data of the chunk data.</param>
            <param name="aLength">Length of the payload data of the chunk, in bytes. Must be a multiple of 4 bytes.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description>BUFFER_TOO_SMALL</description></item><item><description>INVALID_ARGUMENT</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvChunkData.GetChunkIDByIndex(System.UInt32)">
            <summary>
Returns the ID of a chunk based on its index.
</summary>
            <remarks>
                <para>Same as PvBuffer equivalent. Provided with this interface for convenience.</para>
            </remarks>
            <param name="aIndex">Data chunk index.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing one of the following result codes:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_FOUND" /></description></item></list></exception>
            <returns>The ID of a chunk based on its index.</returns>
        </member>
        <member name="P:PvDotNet.PvChunkData.ChunkCount">
            <summary>
Returns the number of data chunks in the PvBuffer. 
</summary>
            <remarks>
                <para>Same as PvBuffer equivalent. Provided with this interface for convenience.</para>
            </remarks>
        </member>
        <member name="M:PvDotNet.PvChunkData.Detach">
            <summary>
Releases an attached memory buffer. Does nothing other than resetting the memory buffer pointer to NULL.<seealso cref="M:PvDotNet.PvChunkData.Attach(System.Byte*,System.UInt32)" /></summary>
            <returns>The buffer's location in memory.</returns>
        </member>
        <member name="M:PvDotNet.PvChunkData.Attach(System.Byte*,System.UInt32)">
            <summary>
Attach this PvBuffer to an external memory buffer. To use an internal memory buffer, use <see cref="M:PvDotNet.PvChunkData.Alloc(System.UInt32)" />.
</summary>
            <param name="aRawBuffer"> A pointer to the buffer.</param>
            <param name="aMaximumChunkLength">The size of the buffer, in bytes.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description>INVALID_PARAMETER.</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvChunkData.Free">
            <summary>
Frees (de-allocates) the buffer's internal memory. <seealso cref="M:PvDotNet.PvChunkData.Alloc(System.UInt32)" /></summary>
        </member>
        <member name="M:PvDotNet.PvChunkData.Alloc(System.UInt32)">
            <summary>
Allocates memory for this buffer.
</summary>
            <param name="aMaximumChunkLength">The memory size reserved for chunk data.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description>NOT_ENOUGH_MEMORY.</description></item></list></exception>
        </member>
        <member name="T:PvDotNet.PvChunkData">
            <summary>
Raw data interface to a PvBuffer.
</summary>
            <remarks>
                <para>A PvBuffer represents a generic buffer with no specific payload type. If the payload type
is chunk data, the user can obtain a pointer to a PvChunkData buffer interface through PvBuffer.GetChunkData.</para>
                <para>This PvChunkData pointer is owned by the PvBuffer and does not need to be released
after use. It is valid as long as the PvBuffer exists.</para>
                <para>To use in a receiver context, retrieve PvBuffer from PvStream or PvPipeline and when PvBuffer.GetPayloadType
is PvPayloadChunkData use PvBuffer.GetChunkData to retrieve a pointer to this interface. Use the various
chunk methods in this class to access the chunk data by ID or index or alternatively attach the PvBuffer
to the GenApi interface of the transmitter with PvGenParameterArray.AttachDataChunks to access the chunk data
using GenApi.</para>
                <para>To use in a transmitter context, create a PvBuffer, set its payload type to PvPayloadChunkData with SetPayloadType,
use PvBuffer.GetChunkData to retrieve a point to this interface, use PvChunkData.Alloc to allocate enough
memory for all chunks and their headers (64 bytes per chunk for the headers) and then add chunks to the buffer
using PvChunkData.AddChunk. Use PvTransmitterGEV to transmit the buffer.</para>
            </remarks>
        </member>
        <member name="M:PvDotNet.PvRawData.Detach">
            <summary>
Releases an attached memory buffer. Does nothing other than resetting the memory buffer pointer to NULL. 
</summary>
            <remarks>
See Attach( System::Byte * aRawBuffer, UInt64 aPayloadLength ).
</remarks>
            <returns>The buffer's location in memory.</returns>
        </member>
        <member name="M:PvDotNet.PvRawData.Attach(System.Byte*,System.UInt64,System.UInt32)">
            <summary>
Attach this <see cref="T:PvDotNet.PvRawData" /> to an external memory buffer.
</summary>
            <remarks>
                <para>This method is identical to <see cref="M:PvDotNet.PvRawData.Alloc(System.UInt64)" />,
with the following exceptions:</para>
                <list type="bullet">
                    <item>
                        <description>This method uses an external memory buffer, controlled by the caller.</description>
                    </item>
                </list>
            </remarks>
            <param name="aRawBuffer">A reference to the buffer.</param>
            <param name="aPayloadLength">The payload length of the raw data, in pixels.. See property <see cref="P:PvDotNet.PvRawData.PayloadLength" />.</param>
            <param name="aMaximumChunkLength">Pre-allocated length in the buffer to add chunks</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvRawData.Attach(System.Byte*,System.UInt64)">
            <summary>
Attach this <see cref="T:PvDotNet.PvRawData" /> to an external memory buffer.
</summary>
            <remarks>
                <para>This method is identical to <see cref="M:PvDotNet.PvRawData.Alloc(System.UInt64)" />,
with the following exceptions:</para>
                <list type="bullet">
                    <item>
                        <description>This method uses an external memory buffer, controlled by the caller.</description>
                    </item>
                </list>
            </remarks>
            <param name="aRawBuffer">A reference to the buffer.</param>
            <param name="aPayloadLength">The payload length of the raw data, in pixels.. See property <see cref="P:PvDotNet.PvRawData.PayloadLength" />.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvRawData.Free">
            <summary>
Frees (de-allocates) the buffer's internal memory.
</summary>
            <remarks>
See <seealso cref="M:PvDotNet.PvRawData.Alloc(System.UInt64)" />.
</remarks>
        </member>
        <member name="M:PvDotNet.PvRawData.Alloc(System.UInt64,System.UInt32)">
            <summary>
Allocates memory for this PvRawData.
</summary>
            <remarks>
                <para>Allocates a PvRawData of specific payload length.</para>
            </remarks>
            <param name="aPayloadLength">The payload length of the raw data, in pixels. See property <see cref="P:PvDotNet.PvRawData.PayloadLength" />.</param>
            <param name="aMaximumChunkLength">Pre-allocated length in the buffer to add chunks</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvRawData.Alloc(System.UInt64)">
            <summary>
Allocates memory for this PvRawData.
</summary>
            <remarks>
                <para>Allocs a PvRawData of specific payload length.</para>
            </remarks>
            <param name="aPayloadLength">The payload length of the raw data, in pixels. See property <see cref="P:PvDotNet.PvRawData.PayloadLength" />.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /></description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvRawData.PayloadLength">
            <summary>
Get the payload length specified in the leader information of this block.
</summary>
        </member>
        <member name="T:PvDotNet.PvRawData">
            <summary>
Raw data interface to a PvBuffer.
</summary>
            <remarks>
                <para>A PvBuffer represents a generic buffer with no specific payload type. If the payload type
is raw data (according to the GigE Vision specification), the user can obtain a reference to a PvRawData buffer interface through PvBuffer.RawData.</para>
            </remarks>
        </member>
        <member name="M:PvDotNet.PvImage.IsPixelHighRes(PvDotNet.PvPixelType)">
            <summary>
Returns whether a pixel type is higher than 8-bit per channel or not.
</summary>
            <param name="aPixelType">Pixel type.</param>
            <returns>The pixel bit count.</returns>
        </member>
        <member name="M:PvDotNet.PvImage.IsPixelColor(PvDotNet.PvPixelType)">
            <summary>
Returns whether a pixel type is color or not.
</summary>
            <param name="aPixelType">Pixel type.</param>
            <returns>True if color, false otherwise.</returns>
        </member>
        <member name="M:PvDotNet.PvImage.GetPixelBitCount(PvDotNet.PvPixelType)">
            <summary>
Gets the pixel bit count according to the pixel type.
</summary>
            <param name="aPixelType">Pixel type.</param>
            <returns>The pixel bit count.</returns>
        </member>
        <member name="P:PvDotNet.PvImage.IsDataOverrun">
            <summary>
Data overrun status bit. True if there was a data overrun. False otherwise.
</summary>
        </member>
        <member name="P:PvDotNet.PvImage.IsImageDropped">
            <summary>
Image dropped status bit. True if the previous frame was dropped. False otherwise.
</summary>
        </member>
        <member name="P:PvDotNet.PvImage.IsInterlacedOdd">
            <summary>
The image contained in the PvImage is an interlaced Odd field. True interlaced Odd field. False otherwise.
</summary>
        </member>
        <member name="P:PvDotNet.PvImage.IsInterlacedEven">
            <summary>
The image contained in the PvImage is an interlaced Even field. True interlaced Even field. False otherwise.
</summary>
        </member>
        <member name="P:PvDotNet.PvImage.IsEOFByLineCount">
            <summary>
Simulates the EOFByLineCount used by Pleora video interfaces. True if previous frame was NOT the last one of a sequence of sub frames, false otherwise.
</summary>
        </member>
        <member name="P:PvDotNet.PvImage.IsFullLineMissing">
            <summary>
If true, the grabber (on the device) was missing at least one line when the frame was grabbed, false otherwise. 
</summary>
        </member>
        <member name="P:PvDotNet.PvImage.IsPartialLineMissing">
            <summary>
If true, the grabber (on the device) was missing at least one pixel in at least one of the lines when the frame was grabbed, , false otherwise.
</summary>
        </member>
        <member name="M:PvDotNet.PvImage.CopyFromBitmap(System.Drawing.Bitmap,PvDotNet.PvPixelType)">
            <summary>
Copies the content of a .NET Bitmap to the PvImage.
</summary>
            <remarks>
Prior to the copy, the PvImage is resized to hold the complete bitmap.
The PvPixelType is used as destination. Color BGRA8Packed, BGR8Packed, RGBA8Packed,
RGB8Packed, WinRGB24, WinBGR24, WinRGB32 and WinBGR32 PvPixelType are currently supported. The input has to be either
Format32bppRgb, Format32bppArgb or Format24bppRgb.
</remarks>
            <param name="aBitmap">The bitmap from which to copy the data.</param>
            <param name="aPixelType">The pixel type to convert to when copying the data to the PvImage.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_SUPPORTED" /> if the conversion is not supported.</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvImage.CopyToBitmap(System.Drawing.Bitmap)">
            <summary>
Converts the PvImage content to a .NET Bitmap.
</summary>
            <remarks>
The bitmap needs to be allocated to have the same width and height as the PvImage.
The pixel type of the bitmap needs to be set at Format24bppArgb, Format32bppRgb or Format32bppArgb.
</remarks>
            <param name="aBitmap">The bitmap to copy the image data to.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /> if the bitmap is not properly allocated.</description></item><item><description><see cref="F:PvDotNet.PvResultCode.NOT_SUPPORTED" /> if the conversion is not supported.</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvImage.GenerateTestPattern(System.UInt16)">
            <summary>
Generates a simple test pattern from a seed.
</summary>
            <remarks>
Not all pixel types are supported. This method is simply provided as a helper for some of the 
transmitter samples.
</remarks>
            <param name="aSeed">Use a different seed (usually increasing) to generate a different image.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.NOT_SUPPORTED" /> if the pixel type is not supported.</description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvImage.Detach">
            <summary>
Releases an attached memory buffer. Does nothing other than resetting the memory buffer pointer to NULL. 
</summary>
            <remarks>
See Attach( System::Byte, UInt32, UInt32, PvPixelType ).
</remarks>
            <returns>The buffer's location in memory.</returns>
        </member>
        <member name="M:PvDotNet.PvImage.Attach(System.Byte*,System.UInt32,System.UInt32,PvDotNet.PvPixelType,System.UInt16,System.UInt16,System.UInt32)">
            <summary>
Attach this PvImage to an external memory buffer.
</summary>
            <remarks>
                <para>This method is identical to <see cref="M:PvDotNet.PvImage.Alloc(System.UInt32,System.UInt32,PvDotNet.PvPixelType)" />,
with the following exceptions:</para>
                <list type="bullet">
                    <item>
                        <description>This method uses an external memory buffer, controlled by the caller.</description>
                    </item>
                </list>
            </remarks>
            <param name="aRawBuffer">A pointer to the buffer.</param>
            <param name="aSizeX">See <see cref="M:PvDotNet.PvImage.Alloc(System.UInt32,System.UInt32,PvDotNet.PvPixelType,System.UInt16,System.UInt16,System.UInt32)" />.</param>
            <param name="aSizeY">See <see cref="M:PvDotNet.PvImage.Alloc(System.UInt32,System.UInt32,PvDotNet.PvPixelType,System.UInt16,System.UInt16,System.UInt32)" />.</param>
            <param name="aPixelType">See <see cref="M:PvDotNet.PvImage.Alloc(System.UInt32,System.UInt32,PvDotNet.PvPixelType,System.UInt16,System.UInt16,System.UInt32)" />.</param>
            <param name="aPaddingX">See <see cref="M:PvDotNet.PvImage.Alloc(System.UInt32,System.UInt32,PvDotNet.PvPixelType,System.UInt16,System.UInt16,System.UInt32)" />.</param>
            <param name="aPaddingY">See <see cref="M:PvDotNet.PvImage.Alloc(System.UInt32,System.UInt32,PvDotNet.PvPixelType,System.UInt16,System.UInt16,System.UInt32)" />.</param>
            <param name="aMaximumChunkLength">See <see cref="M:PvDotNet.PvImage.Alloc(System.UInt32,System.UInt32,PvDotNet.PvPixelType,System.UInt16,System.UInt16,System.UInt32)" />.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvImage.Attach(System.Byte*,System.UInt32,System.UInt32,PvDotNet.PvPixelType,System.UInt16,System.UInt16)">
            <summary>
Attach this PvImage to an external memory buffer.
</summary>
            <remarks>
                <para>This method is identical to <see cref="M:PvDotNet.PvImage.Alloc(System.UInt32,System.UInt32,PvDotNet.PvPixelType)" />,
with the following exceptions:</para>
                <list type="bullet">
                    <item>
                        <description>This method uses an external memory buffer, controlled by the caller.</description>
                    </item>
                </list>
            </remarks>
            <param name="aRawBuffer">A pointer to the buffer.</param>
            <param name="aSizeX">See <see cref="M:PvDotNet.PvImage.Alloc(System.UInt32,System.UInt32,PvDotNet.PvPixelType)" />.</param>
            <param name="aSizeY">See <see cref="M:PvDotNet.PvImage.Alloc(System.UInt32,System.UInt32,PvDotNet.PvPixelType)" />.</param>
            <param name="aPixelType">See <see cref="M:PvDotNet.PvImage.Alloc(System.UInt32,System.UInt32,PvDotNet.PvPixelType)" />.</param>
            <param name="aPaddingX">See <see cref="M:PvDotNet.PvImage.Alloc(System.UInt32,System.UInt32,PvDotNet.PvPixelType)" />.</param>
            <param name="aPaddingY">See <see cref="M:PvDotNet.PvImage.Alloc(System.UInt32,System.UInt32,PvDotNet.PvPixelType)" />.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvImage.Attach(System.Byte*,System.UInt32,System.UInt32,PvDotNet.PvPixelType)">
            <summary>
Attach this PvImage to an external memory buffer.
</summary>
            <remarks>
                <para>This method is identical to <see cref="M:PvDotNet.PvImage.Alloc(System.UInt32,System.UInt32,PvDotNet.PvPixelType)" />,
with the following exceptions:</para>
                <list type="bullet">
                    <item>
                        <description>This method uses an external memory buffer, controlled by the caller.</description>
                    </item>
                </list>
                <para>There is one overload for this method, refer to the other overload method:</para>
                <para>Attach( System::Byte *aRawBuffer, UInt32 aSizeX, UInt32 aSizeY, PvPixelType aPixelType, UInt16 aPaddingX, UInt16 aPaddingY ).</para>
            </remarks>
            <param name="aRawBuffer">A pointer to the buffer.</param>
            <param name="aSizeX">See <see cref="M:PvDotNet.PvImage.Alloc(System.UInt32,System.UInt32,PvDotNet.PvPixelType)" />.</param>
            <param name="aSizeY">See <see cref="M:PvDotNet.PvImage.Alloc(System.UInt32,System.UInt32,PvDotNet.PvPixelType)" />.</param>
            <param name="aPixelType">See <see cref="M:PvDotNet.PvImage.Alloc(System.UInt32,System.UInt32,PvDotNet.PvPixelType)" />.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvImage.Free">
            <summary>
Frees (de-allocates) the buffer's internal memory.
</summary>
            <remarks>
See also <seealso cref="M:PvDotNet.PvImage.Alloc(System.UInt32,System.UInt32,PvDotNet.PvPixelType)" />.
</remarks>
        </member>
        <member name="M:PvDotNet.PvImage.Alloc(System.UInt32,System.UInt32,PvDotNet.PvPixelType,System.UInt16,System.UInt16,System.UInt32)">
            <summary>
Allocates memory for this PvImage.
</summary>
            <remarks>
                <para>Allocs a PvImage of specific width, height and pixel format.</para>
            </remarks>
            <param name="aSizeX">The width of the image, in pixels. See property <see cref="P:PvDotNet.PvImage.Width" />.</param>
            <param name="aSizeY">The height of the image, in pixels. See property <see cref="P:PvDotNet.PvImage.Height" />.</param>
            <param name="aPixelType">The GEV pixel type from which the pixel depth is extracted. 
                           For supported pixel types, see PvPixelType.h.</param>
            <param name="aPaddingX">The horizontal padding of the image, in pixels. See property <see cref="P:PvDotNet.PvImage.PaddingX" />.</param>
            <param name="aPaddingY">The vertical padding of the image, in pixels. See property <see cref="P:PvDotNet.PvImage.PaddingY" />.</param>
            <param name="aMaximumChunkLength">Maximum size to store chunk data, in bytes. Must include an extra 64 bits for headers.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvImage.Alloc(System.UInt32,System.UInt32,PvDotNet.PvPixelType,System.UInt16,System.UInt16)">
            <summary>
Allocates memory for this PvImage.
</summary>
            <remarks>
                <para>Allocs a PvImage of specific width, height and pixel format.</para>
            </remarks>
            <param name="aSizeX">The width of the image, in pixels. See property <see cref="P:PvDotNet.PvImage.Width" />.</param>
            <param name="aSizeY">The height of the image, in pixels. See property <see cref="P:PvDotNet.PvImage.Height" />.</param>
            <param name="aPixelType">The GEV pixel type from which the pixel depth is extracted. 
                           For supported pixel types, see PvPixelType.h.</param>
            <param name="aPaddingX">The horizontal padding of the image, in pixels. See property <see cref="P:PvDotNet.PvImage.PaddingX" />.</param>
            <param name="aPaddingY">The vertical padding of the image, in pixels. See property <see cref="P:PvDotNet.PvImage.PaddingY" />.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /></description></item></list></exception>
        </member>
        <member name="M:PvDotNet.PvImage.Alloc(System.UInt32,System.UInt32,PvDotNet.PvPixelType)">
            <summary>
Allocates memory for this PvImage.
</summary>
            <remarks>
                <para>Allocs a PvImage of specific width, height and pixel format. There is one overload for this method, refer to the other overload method: 
<see cref="M:PvDotNet.PvImage.Alloc(System.UInt32,System.UInt32,PvDotNet.PvPixelType,System.UInt16,System.UInt16)" />.</para>
            </remarks>
            <param name="aSizeX">The width of the image, in pixels. See property <see cref="P:PvDotNet.PvImage.Width" />.</param>
            <param name="aSizeY">The height of the image, in pixels. See property <see cref="P:PvDotNet.PvImage.Height" />.</param>
            <param name="aPixelType">The GEV pixel type from which the pixel depth is extracted. 
                           For supported pixel types, see PvPixelType.h.</param>
            <exception cref="T:PvDotNet.PvException">Failure can produce a <see cref="T:PvDotNet.PvException" /> containing the following result code:
<list type="bullet"><item><description><see cref="F:PvDotNet.PvResultCode.INVALID_PARAMETER" /></description></item></list></exception>
        </member>
        <member name="P:PvDotNet.PvImage.PaddingY">
            <summary>
Gets the vertical image padding, in bytes.
</summary>
            <remarks>
                <para>Additional bytes appended at the end of an image. See <see cref="P:PvDotNet.PvImage.PaddingX" /></para>
            </remarks>
        </member>
        <member name="P:PvDotNet.PvImage.PaddingX">
            <summary>
Gets the horizontal image padding, in bytes; the number of bytes at the end of an image's line that contain meaningless data.
</summary>
            <remarks>
                <para>Images lines could be grabbed in increments of, let's say, 32 bytes. For an image 511 bytes across, 
the device adds a meaningless byte to make the line total 512 bytes (divisible by 32). 
In this case, the <i>paddingX</i> value would be 1 (byte).</para>
                <para>Other GigE Vision devices may have different requirements on line length. Drivable by 4, 8, 16, etc.
or no specific limitations or requirements.</para>
            </remarks>
        </member>
        <member name="P:PvDotNet.PvImage.OffsetY">
            <summary>
Image's vertical offset, in pixels.
</summary>
        </member>
        <member name="P:PvDotNet.PvImage.OffsetX">
            <summary>
Image's horizontal offset, in pixels.
</summary>
        </member>
        <member name="P:PvDotNet.PvImage.EffectiveImageSize">
            <summary>
Gets the effective image size. Uses same size x and y as <see cref="P:PvDotNet.PvImage.ImageSize" /> but excludes all padding.
</summary>
        </member>
        <member name="P:PvDotNet.PvImage.ImageSize">
            <summary>
Gets actual image size within the payload or buffer.
</summary>
            <remarks>
                <para>Uses the GEV leader for the actual width.</para>
                <para>Uses the GEV trailer for line count which is the actual height.</para>
            </remarks>
        </member>
        <member name="P:PvDotNet.PvImage.RequiredSize">
            <summary>
Gets the size of buffer required to hold the acquired image.
</summary>
            <remarks>
                <para>This attribute is valid if the last image acquisition was successful or if it
failed because the buffer was too small. It can be used to re-allocate the acquisition 
buffers if the acquisition failed because the buffer was too small.</para>
                <para>The required size is only computed for the last image - based on the number
of lines as provided in the GigE Vision streaming protocol trailer. </para>
                <para>It is possible that with devices outputting images of varying length (like line
scan cameras) that the last image required size may be smaller than the maximum
possible size.</para>
                <para>In order to be 100% sure of allocating buffers correctly, you should either hard code
the buffer size to known big enough sizes or use the device GenICam GevPayloadSize
parameter for dynamic cases.</para>
                <para />
            </remarks>
        </member>
        <member name="P:PvDotNet.PvImage.BitsPerPixel">
            <summary>
Gets how many bits are required to hold a pixel using the current buffer's pixel type.
</summary>
        </member>
        <member name="P:PvDotNet.PvImage.PixelType">
            <summary>
Gets the GigE Vision pixel type. The pixel depth, color space, and other information are coded into the value.
</summary>
        </member>
        <member name="P:PvDotNet.PvImage.Height">
            <summary>
Gets the image's height, in pixels.
</summary>
        </member>
        <member name="P:PvDotNet.PvImage.Width">
            <summary>
Gets the image's width in pixels.
</summary>
        </member>
        <member name="P:PvDotNet.PvImage.DataPointer">
            <summary>
Gets the buffer's data pointer.
</summary>
        </member>
        <member name="T:PvDotNet.PvImage">
            <summary>
Image interface to a PvBuffer.
</summary>
            <remarks>
                <para>A PvBuffer represents a generic buffer with no specific payload type. If the payload type
is image, the user can obtain a reference to a PvImage buffer interface through the PvBuffer.Image attribute.</para>
                <para>This PvImage reference is owned by the PvBuffer and does not need to be released
after use. It is valid as long as the PvBuffer exists.</para>
                <para>
                    <h3 id="accessing">Accessing image specific data.</h3>
                </para>
                <para>
                    <b>To determinate the payload type and access image specific data:</b>
                </para>
                <list type="number">
                    <item>
                        <description>Retrieve the PvPayloadType using the PvBuffer.PayloadType attribute </description>
                    </item>
                    <item>
                        <description>If PvPayloadType is PvPayloadTypeImage, retrieve a PvImage reference from your PvBuffer </description>
                    </item>
                    <item>
                        <description>Access image specific data through a PvImage reference, like <see cref="P:PvDotNet.PvImage.Width" />, <see cref="P:PvDotNet.PvImage.Height" />, etc.</description>
                    </item>
                    <item>
                        <description>There is no need to release or delete the PvImage reference. It is valid as long as the PvBuffer exists.</description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="P:PvDotNet.PvException.Result">
            <summary>
Accessor to the embedded PvResult object.
</summary>
        </member>
        <member name="P:PvDotNet.PvException.Message">
            <summary>
Override of the exception description message.
</summary>
        </member>
        <member name="M:PvDotNet.PvException.#ctor(PvDotNet.PvResultCode,System.String)">
            <summary>
Constructor
</summary>
            <param name="aCode">PvResultCode used to initialize the exception.</param>
            <param name="aDescription">Error description string.</param>
        </member>
        <member name="M:PvDotNet.PvException.#ctor(PvDotNet.PvResultCode)">
            <summary>
Constructor
</summary>
            <param name="aCode">PvResultCode used to initialize the exception.</param>
        </member>
        <member name="M:PvDotNet.PvException.#ctor(PvDotNet.PvResult)">
            <summary>
Constructor
</summary>
            <param name="aResult">PvResult object used to initialize the exception.</param>
        </member>
        <member name="T:PvDotNet.PvException">
            <summary>
Exception class wrapping a PvResult object. Used for most of the error management in the eBUS SDK.
</summary>
        </member>
        <member name="T:PvDotNet.PvPixelType">
            <summary>
The format of the color data for each pixel in the image.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.SCF1WGWB16">
            <summary>
Sparse Color Filter (type 1, pattern WGWB) 16 bit.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.SCF1WRWG16">
            <summary>
Sparse Color Filter (type 1, pattern WRWG) 16 bit.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.SCF1WBWG16">
            <summary>
Sparse Color Filter (type 1, pattern WBWG) 16 bit.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.SCF1WGWR16">
            <summary>
Sparse Color Filter (type 1, pattern WGWR) 14 bit.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.SCF1WGWB14">
            <summary>
Sparse Color Filter (type 1, pattern WGWB) 14 bit.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.SCF1WRWG14">
            <summary>
Sparse Color Filter (type 1, pattern WRWG) 14 bit.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.SCF1WBWG14">
            <summary>
Sparse Color Filter (type 1, pattern WBWG) 14 bit.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.SCF1WGWR14">
            <summary>
Sparse Color Filter (type 1, pattern WGWR) 12 bit using PFNC packing.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.SCF1WGWB12p">
            <summary>
Sparse Color Filter (type 1, pattern WGWB) 12 bit using PFNC packing.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.SCF1WRWG12p">
            <summary>
Sparse Color Filter (type 1, pattern WRWG) 12 bit using PFNC packing.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.SCF1WBWG12p">
            <summary>
Sparse Color Filter (type 1, pattern WBWG) 12 bit using PFNC packing.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.SCF1WGWR12p">
            <summary>
Sparse Color Filter (type 1, pattern WGWR) 12 bit using PFNC packing.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.SCF1WGWB12">
            <summary>
Sparse Color Filter (type 1, pattern WGWB) 12 bit.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.SCF1WRWG12">
            <summary>
Sparse Color Filter (type 1, pattern WRWG) 12 bit.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.SCF1WBWG12">
            <summary>
Sparse Color Filter (type 1, pattern WBWG) 12 bit.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.SCF1WGWR12">
            <summary>
Sparse Color Filter (type 1, pattern WGWR) 12 bit.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.SCF1WGWB10p">
            <summary>
Sparse Color Filter (type 1, pattern WGWB) 10 bit using PFNC packing.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.SCF1WRWG10p">
            <summary>
Sparse Color Filter (type 1, pattern WRWG) 10 bit using PFNC packing.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.SCF1WBWG10p">
            <summary>
Sparse Color Filter (type 1, pattern WBWG) 10 bit using PFNC packing.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.SCF1WGWR10p">
            <summary>
Sparse Color Filter (type 1, pattern WGWR) 10 bit using PFNC packing.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.SCF1WGWB10">
            <summary>
Sparse Color Filter (type 1, pattern WGWB) 10 bit
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.SCF1WRWG10">
            <summary>
Sparse Color Filter (type 1, pattern WRWG) 10 bit
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.SCF1WBWG10">
            <summary>
Sparse Color Filter (type 1, pattern WBWG) 10 bit
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.SCF1WGWR10">
            <summary>
Sparse Color Filter (type 1, pattern WGWR) 10 bit
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.SCF1WGWB8">
            <summary>
Sparse Color Filter (type 1, pattern WGWB) 8 bit
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.SCF1WRWG8">
            <summary>
Sparse Color Filter (type 1, pattern WRWG) 8 bit
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.SCF1WBWG8">
            <summary>
Sparse Color Filter (type 1, pattern WBWG) 8 bit
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.SCF1WGWR8">
            <summary>
Sparse Color Filter (type 1, pattern WGWR) 8 bit
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.YCbCr709_422_12p_CbYCrY">
            <summary>
UYVY 12 bit per component using PFNC packing.
ITU-R BT.709 color space.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.YCbCr709_422_12_CbYCrY">
            <summary>
UYVY 12 bit per component.
ITU-R BT.709 color space.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.YCbCr709_422_10p_CbYCrY">
            <summary>
UYVY 10 bit per component using PFNC packing.
ITU-R BT.709 color space.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.YCbCr709_422_10_CbYCrY">
            <summary>
UYVY 10 bit per component.
ITU-R BT.709 color space.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.YCbCr709_12p_CbYCr">
            <summary>
YUV 12 bit per component using PFNC packing.
ITU-R BT.709 color space.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.YCbCr709_12_CbYCr">
            <summary>
YUV 12 bit per component.
ITU-R BT.709 color space.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.YCbCr709_10p_CbYCr">
            <summary>
YUV 10 bit per component using PFNC packing.
ITU-R BT.709 color space.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.YCbCr709_10_CbYCr">
            <summary>
YUV 10 bit per component.
ITU-R BT.709 color space.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.YCbCr709_422_12p">
            <summary>
YUV 12 bit per component.
ITU-R BT.709 color space.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.YCbCr709_422_12">
            <summary>
UYVY 12 bit per component.
ITU-R BT.709 color space.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.YCbCr709_422_10p">
            <summary>
UYVY 10 bit per component using PFNC packing.
ITU-R BT.709 color space.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.YCbCr709_422_10">
            <summary>
UYVY 10 bit per component.
ITU-R BT.709 color space.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.YCbCr601_422_12p_CbYCrY">
            <summary>
UYVY 10 bit per component using PFNC packing.
ITU-R BT.601 color space.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.YCbCr601_422_12_CbYCrY">
            <summary>
UYVY 12 bit per component.
ITU-R BT.601 color space.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.YCbCr601_422_10p_CbYCrY">
            <summary>
UYVY 10 bit per component using PFNC packing.
ITU-R BT.601 color space.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.YCbCr601_422_10_CbYCrY">
            <summary>
UYVY 10 bit per component.
ITU-R BT.601 color space.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.YCbCr601_12p_CbYCr">
            <summary>
YUV 12 bit per component using PFNC packing.
ITU-R BT.601 color space.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.YCbCr601_12_CbYCr">
            <summary>
YUV 12 bit per component.
ITU-R BT.601 color space.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.YCbCr601_10p_CbYCr">
            <summary>
YUV 10 bit per component using PFNC packing.
ITU-R BT.601 color space.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.YCbCr601_10_CbYCr">
            <summary>
YUV 10 bit per component.
ITU-R BT.601 color space.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.YCbCr601_422_12p">
            <summary>
UYVY 12 bit per component using PFNC packing.
ITU-R BT.601 color space.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.YCbCr601_422_12">
            <summary>
UYVY 12 bit per component.
ITU-R BT.601 color space.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.YCbCr601_422_10p">
            <summary>
UYVY 10 bit per component using PFNC packing.
ITU-R BT.601 color space.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.YCbCr601_422_10">
            <summary>
UYVY 10 bit per component.
ITU-R BT.601 color space.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.YCbCr411_8">
            <summary>
UYYYVYYY 8 bit per component.
Default color space.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.YCbCr422_12p_CbYCrY">
            <summary>
UYVY 12 bit per component using PFNC packing.
Default color space.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.YCbCr422_12_CbYCrY">
            <summary>
UYVY 12 bit per component.
Default color space.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.YCbCr422_10p_CbYCrY">
            <summary>
UYVY 10 bit per component using PFNC packing.
Default color space.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.YCbCr422_10_CbYCrY">
            <summary>
UYVY 10 bit per component.
Default color space.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.YCbCr12p_CbYCr">
            <summary>
YUV 12 bit per component using PFNC packing.
Default color space.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.YCbCr12_CbYCr">
            <summary>
YUV 12 bit per component.
Default color space.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.YCbCr10p_CbYCr">
            <summary>
YUV 10 bit per component using PFNC packing.
Default color space.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.YCbCr10_CbYCr">
            <summary>
YUV 10 bit per component.
Default color space.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.YCbCr8">
            <summary>
YUV 8 bit per component using PFNC packing.
Default color space.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.YCbCr422_12p">
            <summary>
UYVY 12 bit per component using PFNC packing.
Default color space.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.YCbCr422_12">
            <summary>
UYVY 12 bit per component.
Default color space.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.YCbCr422_10p">
            <summary>
UYVY 10 bit per component using PFNC packing.
Default color space.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.YCbCr422_10">
            <summary>
UYVY 10 bit per component.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.BGRa16">
            <summary>
BGRa 16 bits per component.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.RGBa16">
            <summary>
RGBa 16 bits per component.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.BGR16">
            <summary>
BGR 16 bits per component.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.BGRa14">
            <summary>
BGRa 14 bits per component.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.RGBa14">
            <summary>
RGBa14 bits per component.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.BGR14">
            <summary>
BGR 14 bits per component.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.RGB14">
            <summary>
RGB 14bits per component.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.BGRa12p">
            <summary>
BGRa 12 bits per component using PFNC packing.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.RGBa12p">
            <summary>
RGBa 12 bits per component using PFNC packing.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.BGRa12">
            <summary>
BGRa 12 bits per component using PFNC packing.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.RGBa12">
            <summary>
RGBa 12 bits per component using PFNC packing.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.BGR12p">
            <summary>
BGR 12 bits per component using PFNC packing.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.RGB12p">
            <summary>
RGB 12 bits per component using PFNC packing.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.BGRa10p">
            <summary>
BGRa 10 bits per component using PFNC packing.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.RGBa10p">
            <summary>
RGBa 10 bits per component using PFNC packing.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.BGRa10">
            <summary>
BGRa 10 bits per component.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.RGBa10">
            <summary>
RGBa 10 bits per component.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.BGR10p">
            <summary>
BGR 10 bits per component using PFNC packing.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.RGB10p">
            <summary>
RGB 10 bits per component using PFNC packing.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.BayerBG12p">
            <summary>
Bayer (GB pattern) 12 bits per pixel using PFNC packing.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.BayerGB12p">
            <summary>
Bayer (GB pattern) 12 bits per pixel using PFNC packing.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.BayerRG12p">
            <summary>
Bayer (RG pattern) 12 bits per pixel using PFNC packing.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.BayerGR12p">
            <summary>
Bayer (GR pattern) 12 bits per pixel using PFNC packing.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.BayerBG10p">
            <summary>
Bayer (BG pattern) 10 bits per pixel using PFNC packing.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.BayerGB10p">
            <summary>
Bayer (GB pattern) 10 bits per pixel using PFNC packing.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.BayerRG10p">
            <summary>
Bayer (RG pattern) 10 bits per pixel using PFNC packing.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.BayerGR10p">
            <summary>
Bayer (GR pattern) 10 bits per pixel using PFNC packing.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.Mono12p">
            <summary>
Monochrome 12 bits per pixel using PFNC packing.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.Mono10p">
            <summary>
Monochrome 10 bits per pixel using PFNC packing.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.RGB16_Planar">
            <summary>
GigE Vision pixel type. Three planes of R, G and B pixels. 
Each color component is stored as 16 bits over two bytes.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.RGB12_Planar">
            <summary>
GigE Vision pixel type. Three planes of R, G and B pixels. 
Each color component is stored as 12 bits over two bytes.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.RGB10_Planar">
            <summary>
GigE Vision pixel type. Three planes of R, G and B pixels. 
Each color component is stored as 10 bits over two bytes.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.RGB8_Planar">
            <summary>
GigE Vision pixel type. Three planes of R, G and B pixels. 
Each color component is stored as a byte.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.YCbCr709_411_8_CbYYCrYY">
            <summary>
GigE Vision pixel type Cb1Y1Y2Cr1Y3Y4 for 4 pixels.
ITU-R BT.709 color space.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.YCbCr709_422_8_CbYCrY">
            <summary>
GigE Vision pixel type Cb1Y1Cr1Y2 for 2 pixels.
ITU-R BT.709 color space.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.YCbCr709_422_8">
            <summary>
GigE Vision pixel type Y1Cb1Y2Cr1 for 2 pixels.
ITU-R BT.709 color space.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.YCbCr709_8_CbYCr">
            <summary>
GigE Vision pixel type Cb1Y1C41 for 1 pixel.
ITU-R BT.709 color space.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.YCbCr601_411_8_CbYYCrYY">
            <summary>
GigE Vision pixel type Cb1Y1Y2Cr1Y3Y4 for 4 pixels.
ITU-R BT.601 color space.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.YCbCr601_422_8_CbYCrY">
            <summary>
GigE Vision pixel type Cb1Y1Cr1Y2 for 2 pixels.
ITU-R BT.601 color space.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.YCbCr601_422_8">
            <summary>
GigE Vision pixel type Y1Cb1Y2Cr1 for 2 pixels.
ITU-R BT.601 color space.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.YCbCr601_8_CbYCr">
            <summary>
GigE Vision pixel type Cb1Y1C41 for 1 pixel.
ITU-R BT.601 color space.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.YCbCr411_8_CbYYCrYY">
            <summary>
GigE Vision pixel type Cb1Y1Cr1Y2 for 2 pixels.
Default (host JPG) color space.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.YCbCr422_8_CbYCrY">
            <summary>
GigE Vision pixel type Y1Cb1Y1Cr1 for 2 pixels.
Default (host JPG) color space.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.YCbCr422_8">
            <summary>
GigE Vision pixel type Y1Cb1Y1Cr1 for 2 pixel2.
Default (host JPG) color space.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.YCbCr8_CbYCr">
            <summary>
GigE Vision pixel type Cb1Y1Cr1 for 1 pixel.
Default (host JPG) color space.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.YUV8_UYV">
            <summary>
GigE Vision pixel type U1Y1V1 for 1 pixel.
Unspecified color space (default/JPG is used for conversion).
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.YUV422_8">
            <summary>
GigE Vision pixel type Y1U1Y2V1 for 2 pixels.
Unspecified color space (default/JPG is used for conversion).
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.YUV422_8_UYVY">
            <summary>
GigE Vision pixel type U1Y1V1Y2 for 2 pixels.space.
Unspecified color space (default/JPG is used for conversion).
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.YUV411_8_UYYVYY">
            <summary>
GigE Vision pixel type U1Y1Y2V1Y3Y4 for 4 pixels.
Unspecified color space (default/JPG is used for conversion).
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.BGR565p">
            <summary>
GigE Vision pixel type B5G6R5.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.RGB565p">
            <summary>
GigE Vision pixel type R5G6B5.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.RGB12V1Packed">
            <summary>
GigE Vision pixel type RGB 12 bits per channel packed.
The three 10 bits color components are stored on 4.5 bytes.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.RGB10p32">
            <summary>
GigE Vision pixel type RGB 10 bits per channel packed.
The three 10 bits color components are stored on 4 bytes.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.RGB10V1Packed">
            <summary>
GigE Vision pixel type RGB 10 bits per channel packed.
The three 10 bits color components are stored on 4 bytes.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.RGB16">
            <summary>
GigE Vision pixel type RGB 16 bits per channel.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.BGR12">
            <summary>
GigE Vision pixel BGR 10 bits per channel.
Each color component is stored on 2 bytes.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.RGB12">
            <summary>
GigE Vision pixel type RGB 12 bits per channel.
Each color component is stored on 2 bytes.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.BGR10">
            <summary>
GigE Vision pixel type BGR 10 bits per channel.
Each color component is stored on 2 bytes.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.RGB10">
            <summary>
GigE Vision pixel type RGB 10 bits per channel.
Each color component is stored on 2 bytes.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.BGRa8">
            <summary>
GigE Vision pixel type 32 bits, BGRA 8 bits per channel.
Reads B-G-R-A from lowest to highest byte address.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.RGBa8">
            <summary>
GigE Vision pixel type 32 bits, RGBA 8 bits per channel.
Reads R-G-B-A from lowest to highest byte address.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.BGR8">
            <summary>
GigE Vision pixel type 24 bits, BGR 8 bits per channel.
Reads B-G-R from lowest to highest byte address.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.RGB8">
            <summary>
GigE Vision pixel type 24 bits, RGB 8 bits per channel.
Reads R-G-B from lowest to highest byte address.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.BayerBG16">
            <summary>
GigE Vision pixel type, Bayer BG pattern 16 stored on two bytes.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.BayerGB16">
            <summary>
GigE Vision pixel type, Bayer GB pattern 16 stored on two bytes.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.BayerRG16">
            <summary>
GigE Vision pixel type, Bayer RG pattern 16 stored on two bytes.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.BayerGR16">
            <summary>
GigE Vision pixel type, Bayer GR pattern 16 stored on two bytes.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.BayerBG12Packed">
            <summary>
GigE Vision pixel type, Bayer BG pattern 12 bits, two pixels stored on two bytes.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.BayerGB12Packed">
            <summary>
GigE Vision pixel type, Bayer GB pattern 12 bits, two pixels stored on two bytes.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.BayerRG12Packed">
            <summary>
GigE Vision pixel type, Bayer RG pattern 12 bits, two pixels stored on two bytes.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.BayerGR12Packed">
            <summary>
GigE Vision pixel type, Bayer GR pattern 12 bits, two pixels stored on two bytes.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.BayerBG10Packed">
            <summary>
GigE Vision pixel type, Bayer BG pattern 10 bits, two pixels stored on two bytes.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.BayerGB10Packed">
            <summary>
GigE Vision pixel type, Bayer GB pattern 10 bits, two pixels stored on two bytes.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.BayerRG10Packed">
            <summary>
GigE Vision pixel type, Bayer RG pattern 10 bits, two pixels stored on two bytes.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.BayerGR10Packed">
            <summary>
GigE Vision pixel type, Bayer GR pattern 10 bits, two pixels stored on two bytes.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.BayerBG12">
            <summary>
GigE Vision pixel type, Bayer BG pattern 12 bits stored on two bytes.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.BayerGB12">
            <summary>
GigE Vision pixel type, Bayer GB pattern 12 bits stored on two bytes.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.BayerRG12">
            <summary>
GigE Vision pixel type, Bayer RG pattern 12 bits stored on two bytes.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.BayerGR12">
            <summary>
GigE Vision pixel type, Bayer GR pattern 12 bits stored on two bytes.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.BayerBG10">
            <summary>
GigE Vision pixel type, Bayer BG pattern 10 bits stored on two bytes.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.BayerGB10">
            <summary>
GigE Vision pixel type, Bayer GB pattern 10 bits stored on two bytes.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.BayerRG10">
            <summary>
GigE Vision pixel type, Bayer RG pattern 10 bits stored on two bytes.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.BayerGR10">
            <summary>
GigE Vision pixel type, Bayer GR pattern 10 bits stored on two bytes.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.BayerBG8">
            <summary>
GigE Vision pixel type, Bayer BG pattern 8 bits.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.BayerGB8">
            <summary>
GigE Vision pixel type, Bayer GB pattern 8 bits.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.BayerRG8">
            <summary>
GigE Vision pixel type, Bayer RG pattern 8 bits.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.BayerGR8">
            <summary>
GigE Vision pixel type, Bayer GR pattern 8 bits.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.Mono16">
            <summary>
GigE Vision pixel type, monochrome 16 bits stored on two bytes.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.Mono14">
            <summary>
GigE Vision pixel type, monochrome 16 bits stored on two bytes.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.Mono12Packed">
            <summary>
GigE Vision pixel type, monochrome 12 bits, two pixels stored in 2 bytes.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.Mono12">
            <summary>
GigE Vision pixel type, monochrome 12 bits stored in 2 bytes.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.Mono10Packed">
            <summary>
GigE Vision pixel type, monochrome 10 bits, two pixels stored on three bytes.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.Mono10">
            <summary>
GigE Vision pixel type, monochrome 10 bits stored in 2 bytes.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.Mono8s">
            <summary>
GigE Vision pixel type, monochrome 8 bits signed.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.Mono8">
            <summary>
GigE Vision pixel type, monochrome 8 bits unsigned.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.Mono4p">
            <summary>
GigE Vision pixel type, monochrome 4 bits.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.Mono2p">
            <summary>
GigE Vision pixel type, monochrome 2 bits.
</summary>
        </member>
        <member name="F:PvDotNet.PvPixelType.Mono1p">
            <summary>
GigE Vision pixel type, monochrome 1 bit.
</summary>
        </member>
        <member name="T:PvDotNet.PvPayloadType">
            <summary>
GVSP payload type.
</summary>
        </member>
        <member name="F:PvDotNet.PvPayloadType.DeviceSpecificBase">
            <summary>
Base value for device specific payload type. Not currently supported. 
</summary>
        </member>
        <member name="F:PvDotNet.PvPayloadType.MultiZoneImage">
            <summary>
Multi-zone image payload type. Not currently supported.
</summary>
        </member>
        <member name="F:PvDotNet.PvPayloadType.H264">
            <summary>
H.264 payload type. Not currently supported.
</summary>
        </member>
        <member name="F:PvDotNet.PvPayloadType.JPEG2000">
            <summary>
JPEG 2000 payload type. Not currently supported.
</summary>
        </member>
        <member name="F:PvDotNet.PvPayloadType.JPEG">
            <summary>
JPEG payload type. Not currently supported.
</summary>
        </member>
        <member name="F:PvDotNet.PvPayloadType.ExtendedChunkData">
            <summary>
Deprecated extended chunk data payload type. Not currently supported.
</summary>
        </member>
        <member name="F:PvDotNet.PvPayloadType.ChunkData">
            <summary>
Chunk data payload type. Access from PvBuffer using PvBuffer.ChunkData.
</summary>
        </member>
        <member name="F:PvDotNet.PvPayloadType.File">
            <summary>
File payload type. Not currently supported.
</summary>
        </member>
        <member name="F:PvDotNet.PvPayloadType.RawData">
            <summary>
Raw data payload type. Access from PvBuffer using PvBuffer.RawData. 
</summary>
        </member>
        <member name="F:PvDotNet.PvPayloadType.Image">
            <summary>
Image payload type. Access from PvBuffer using PvBuffer.Image. 
</summary>
        </member>
        <member name="F:PvDotNet.PvPayloadType.Undefined">
            <summary>
Undefined or non initialized payload type. 
</summary>
        </member>
        <member name="P:PvDotNet.PvResult.OSCode">
            <summary>
Retrieves the internal OS code that may have triggered the error.
</summary>
            <remarks>
                <para>The user is not expected to be able to interpret this error code, it can
widely vary based on the platform or even API that generated it. It can be
used in order to provide more information to Pleora support personnel.</para>
            </remarks>
        </member>
        <member name="P:PvDotNet.PvResult.InternalCode">
            <summary>
Returns the internal error code of the error.
</summary>
            <remarks>
                <para>This method can be used to retrieve the internal error code that was
mapped to the public error code contained in the PvResult.</para>
                <para>The user is not expected to be able to interpret this error code. It 
can be used in order to provide more information to Pleora support personnel.</para>
            </remarks>
        </member>
        <member name="P:PvDotNet.PvResult.IsSuccess">
            <summary>
Test for a successful result.
</summary>
        </member>
        <member name="P:PvDotNet.PvResult.IsPending">
            <summary>
Test for a pending result. 
</summary>
        </member>
        <member name="P:PvDotNet.PvResult.IsOK">
            <summary>
Test for a successful result.
</summary>
        </member>
        <member name="P:PvDotNet.PvResult.IsFailure">
            <summary>
Test for a failed result. 
</summary>
        </member>
        <member name="P:PvDotNet.PvResult.Description">
            <summary>
Gets and sets the result description.  
</summary>
        </member>
        <member name="P:PvDotNet.PvResult.CodeString">
            <summary>
Gets and sets the result code in the form of a string. 
</summary>
        </member>
        <member name="P:PvDotNet.PvResult.Code">
            <summary>
Gets and sets the result code. 
</summary>
        </member>
        <member name="M:PvDotNet.PvResult.ToString">
            <summary>
Gets the description of the result code.
</summary>
            <returns>The description of the result code.</returns>
        </member>
        <member name="M:PvDotNet.PvResult.#ctor(PvDotNet.PvResultCode,System.String)">
            <summary>
Constructor initializing the object to a specific status code.
</summary>
            <param name="aCode">Code to assign to the PvResult object on construction.</param>
            <param name="aDescription">Description to assign to the PvResult object on construction.</param>
        </member>
        <member name="M:PvDotNet.PvResult.#ctor(PvDotNet.PvResultCode)">
            <summary>
Constructor initializing the object to a specific status code.
</summary>
            <param name="aCode">Code to assign to the PvResult object on construction.</param>
        </member>
        <member name="T:PvDotNet.PvResult">
            <summary>
Result information.
</summary>
            <remarks>
                <para>The PvResult class provides information about the success or failure of the
methods you use. </para>
                <para>Most successful methods return <see cref="F:PvDotNet.PvResultCode.OK" />, however, there are exceptions:</para>
                <list type="bullet">
                    <item>
                        <description>Some methods return immediately, but the ultimate success of the method
  may not be know for some time after (several seconds or more).
  These methods return <see cref="F:PvDotNet.PvResultCode.PENDING" />. Pending operations are considered successful.</description>
                    </item>
                </list>
                <para>
                    <b>To use result codes (best coding practices):</b>
                </para>
                <list type="bullet">
                    <item>
                        <description>Call a method.</description>
                    </item>
                    <item>
                        <description>Test the result for success. Use <see cref="P:PvDotNet.PvResult.IsSuccess" />, <see cref="P:PvDotNet.PvResult.IsOK" />, or test against specific PvResult::Code values.</description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="T:PvDotNet.PvResultCode">
            <summary>
Result code used by the eBUS SDK.
</summary>
        </member>
        <member name="F:PvDotNet.PvResultCode.CORRUPTED_DATA">
            <summary>
The data is corrupted.
</summary>
        </member>
        <member name="F:PvDotNet.PvResultCode.BUSY">
            <summary>
The resource requested is already in use.
</summary>
        </member>
        <member name="F:PvDotNet.PvResultCode.NO_MORE_ITEM">
            <summary>
No more of what was requested is currently available.
</summary>
        </member>
        <member name="F:PvDotNet.PvResultCode.THREAD_ERROR">
            <summary>
An error occurred while attempting to perform an operation on a thread like starting, stopping or changing priority.
</summary>
        </member>
        <member name="F:PvDotNet.PvResultCode.NO_AVAILABLE_DATA">
            <summary>
There is no available data to enumerate.
</summary>
        </member>
        <member name="F:PvDotNet.PvResultCode.NETWORK_ERROR">
            <summary>
A network error occurred while performing the requested operation.
</summary>
        </member>
        <member name="F:PvDotNet.PvResultCode.NO_MORE_ENTRY">
            <summary>
There are no more entries to retrieve/enumerate.
</summary>
        </member>
        <member name="F:PvDotNet.PvResultCode.BAD_VERSION">
            <summary>
Some component versions are not compatible.
</summary>
        </member>
        <member name="F:PvDotNet.PvResultCode.AUTO_ABORTED">
            <summary>
Buffer reception failed. The data receiver entered a state where so many packets and/or blocks were missing that all 
queued buffers were automatically aborted on an internal reset. 
</summary>
        </member>
        <member name="F:PvDotNet.PvResultCode.TOO_MANY_CONSECUTIVE_RESENDS">
            <summary>
Buffer reception failed, consecutive missing buffers higher than allowed. The data receiver may stop attempting to receive 
a block if a set of consecutive packets exceeding MaximumResendGroupSize.
</summary>
        </member>
        <member name="F:PvDotNet.PvResultCode.RESENDS_FAILURE">
            <summary>
Failure to receive all missing packets for a buffer through resend packets.
</summary>
        </member>
        <member name="F:PvDotNet.PvResultCode.TOO_MANY_RESENDS">
            <summary>
Too many resend packets were requested, buffer acquisition failure.
</summary>
        </member>
        <member name="F:PvDotNet.PvResultCode.BUFFER_TOO_SMALL">
            <summary>
The buffer was not large enough to hold the payload of the block being received. Call PvBuffer::GetRequiredSize 
to use the information from the leader packet to determine the size of buffer that would have been required to 
receive the block. Call PvBuffer::Alloc or PvBuffer::Attach to allocate or associate an a larger area of memory 
to receive the next block.
</summary>
        </member>
        <member name="F:PvDotNet.PvResultCode.MISSING_PACKETS">
            <summary>
Some packets are missing in the buffer. Happens when at least one packet of the buffer is missing when it was 
released back to the calling application. 
</summary>
        </member>
        <member name="F:PvDotNet.PvResultCode.IMAGE_ERROR">
            <summary>
Error with an image. May be returned when a corrupt image arrives due to discontinuities in data between 
the camera and the hardware responsible for transmitting packets in the GigE Vision device. This can 
include data overrun, partial and full lines missing. 
</summary>
        </member>
        <member name="F:PvDotNet.PvResultCode.ERR_OVERFLOW">
            <summary>
Overflow occurred. Can happen when a counter overflows or when an attempt was made
to write past the upper boundary of a file or data structure. 
</summary>
        </member>
        <member name="F:PvDotNet.PvResultCode.FILE_ERROR">
            <summary>
A file operation error occurred.
</summary>
        </member>
        <member name="F:PvDotNet.PvResultCode.NOT_SUPPORTED">
            <summary>
The requested feature or functionality is not supported.
</summary>
        </member>
        <member name="F:PvDotNet.PvResultCode.NOT_IMPLEMENTED">
            <summary>
The requested feature or functionality is not implemented. Can happen when a dynamically selected feature 
or capability is not implemented in the SDK. 
</summary>
        </member>
        <member name="F:PvDotNet.PvResultCode.CANT_READ_MANIFEST">
            <summary>
The device manifest table could not be accessed. This may happen if the device is not powered properly
and the firmware is not powered. 
</summary>
        </member>
        <member name="F:PvDotNet.PvResultCode.GENICAM_XML_ERROR">
            <summary>
The GenICam XML file could not be loaded into GenApi. The file could be corrupted or simply incorrectly 
structured. Some third-party vendors use XML files that don't conform to the GenApi schema. 
</summary>
        </member>
        <member name="F:PvDotNet.PvResultCode.NO_LICENSE">
            <summary>
An eBUS SDK license is missing. To receive data from a GigE Vision device that does not contain a Pleora 
video interface, a receiver license is required. A license is also required to transmit data using the eBUS SDK 
using PvTransmitterGEV. When working with images, a watermark is applied when no license is present.
This is so that the SDK can be used for evaluation purposes.
</summary>
        </member>
        <member name="F:PvDotNet.PvResultCode.TIMEOUT">
            <summary>
The operation timed out. The operation exceeded its specified maximum wait time without succeeding.
</summary>
        </member>
        <member name="F:PvDotNet.PvResultCode.PENDING">
            <summary>
Success. (Pending.) Returned by PvStreamRaw::QueueBuffer to indicate that a buffer has been successfully 
queued but the operation is still pending (the data has not yet been received).
</summary>
        </member>
        <member name="F:PvDotNet.PvResultCode.CANCEL">
            <summary>
The user closed a dialog and the operation was not performed. This can occur if the "Cancel" button is clicked.
</summary>
        </member>
        <member name="F:PvDotNet.PvResultCode.INVALID_PARAMETER">
            <summary>
A parameter passed to the method is invalid.
</summary>
        </member>
        <member name="F:PvDotNet.PvResultCode.GENERIC_ERROR">
            <summary>
An undefined error occurred.
</summary>
        </member>
        <member name="F:PvDotNet.PvResultCode.NOT_ENOUGH_MEMORY">
            <summary>
An operation failed to complete as not enough memory was available.
</summary>
        </member>
        <member name="F:PvDotNet.PvResultCode.ABORTED">
            <summary>
The operation was aborted
</summary>
        </member>
        <member name="F:PvDotNet.PvResultCode.INVALID_DATA_FORMAT">
            <summary>
The data format is not supported for the requested operation.
</summary>
        </member>
        <member name="F:PvDotNet.PvResultCode.STATE_ERROR">
            <summary>
The system's current state doesn't allow the action.
</summary>
        </member>
        <member name="F:PvDotNet.PvResultCode.NOT_CONNECTED">
            <summary>
The object isn't connected.
</summary>
        </member>
        <member name="F:PvDotNet.PvResultCode.CANNOT_OPEN_FILE">
            <summary>
The file doesn't exist or can't be opened.
</summary>
        </member>
        <member name="F:PvDotNet.PvResultCode.NOT_FOUND">
            <summary>
The expected item wasn't found.
</summary>
        </member>
        <member name="F:PvDotNet.PvResultCode.NOT_INITIALIZED">
            <summary>
An error code hasn't been set.
</summary>
        </member>
        <member name="F:PvDotNet.PvResultCode.OK">
            <summary>
Success. For information about what constitutes success (and the exceptions), see PvResult.
</summary>
        </member>
    </members>
</doc>